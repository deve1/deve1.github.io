<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
>

<channel>
    <title><![CDATA[Memo]]></title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <link href="/" />
    <description><![CDATA[]]></description>
    <lastBuildDate>Wed, 25 Nov 2015 15:53:01 +0900</lastBuildDate>
    <language>en-US</language>
    <generator uri="http://octopress.org/">Octopress</generator>

    
        <item>
            <title><![CDATA[Test]]></title>
            <link>/blog/2015/11/25/test/</link>
            <pubDate>Wed, 25 Nov 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[markdown]]></category>
        
            <category><![CDATA[syntax]]></category>
        
            <guid>/blog/2015/11/25/test/</guid>
            <description>
                <![CDATA[Syntax Cheatsheet: Phrase Emphasis italic bold italic bold no-italic_ *no-bold__ no-italic* _no-bold** 문장 중간에라도 * 나 _ 를 공백으로 감싸면 그대로 나타난다. 임의의 위치에서는 * 또는 _와 같이 예외처리할 수 있다. Links Inline: An example 같은 서버안에서는 상대경로로 link text Reference-style labels (titles are optional): An example. Then, anywhere else...]]>
            </description>
            <content:encoded>
                <![CDATA[<h2>Syntax Cheatsheet:</h2>

<h3>Phrase Emphasis</h3>

<p><em>italic</em>   <strong>bold</strong></p>

<p><em>italic</em>   <strong>bold</strong></p>

<p><em>no-italic_ *</em>no-bold__ </p>

<p><em>no-italic* _</em>no-bold**</p>

<p>문장 중간에라도 * 나 _ 를 공백으로 감싸면 그대로 나타난다. 임의의 위치에서는 * 또는 _와 같이 예외처리할 수 있다.</p>

<h3>Links</h3>

<p>Inline:    An <a href="http://url.com/" title="Title">example</a></p>

<p>같은 서버안에서는 상대경로로 <a href="/same_server.ext" title="optional title">link text</a></p>

<p>Reference-style labels (titles are optional):</p>

<p>An <a href="/url/to/img.jpg" title="Title">example</a>. Then, anywhere else in the doc, define the link:</p>

<p>옵션으로 <a href="/url/to/img.jpg" title="Title">example</a> 처럼 공백을 넣을 수 있으며,</p>

<p>등도 가능하다.</p>

<p>다음과 같이 함축된 링크명으로 간단히 줄일 수 있다. 링크명은 여러 단어도 가능하며 대소문자를 구분하지 않는다.</p>

<p><a href="http://daringfireball.net/">Daring Fireball</a></p>

<h3>Images</h3>

<p>Inline (titles are optional):</p>

<p><img src="/path/img.jpg" alt="alt text" title="Title"></p>

<p>Reference-style:</p>

<p><img src="/url/to/img.jpg" alt="alt text" title="Title"></p>

<h3>Headers</h3>

<p><a href="http://docutils.sourceforge.net/mirror/setext.html">Setext-style</a>:</p>

<h1>Header 1</h1>

<h2>Header 2</h2>

<p><a href="http://www.aaronsw.com/2002/atx/">atx-style</a> (closing #&#39;s are optional):</p>

<h1>Header 1</h1>

<h2>Header 2</h2>

<h3>헤더 3</h3>

<h4>헤더 4</h4>

<h5>헤더 5</h5>

<h6>Header 6</h6>

<h3>Lists</h3>

<p>Ordered, without paragraphs:</p>

<ol>
<li> Foo</li>
<li> Bar</li>
</ol>

<p>단락이 있는 순차 항목:</p>

<ol>
<li>사랑</li>
</ol>

<p>사랑은 자기를 잃어버리는 것.</p>

<ol>
<li>결혼
자신의 재산을 물려줄 사람을 지정하는 것.</li>
</ol>

<p>Unordered, with paragraphs:</p>

<ul>
<li><p>A list item.</p>

<p>With multiple paragraphs.</p></li>
<li><p>Bar</p>

<blockquote>
<p>즐기는 곳이거나 먹는 것이거나 환영!</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">들여쓰기 두번이면  코드블럭이 된다.
</code></pre></div></li>
<li><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>
viverra nec, fringilla in, laoreet vitae, risus.</p></li>
</ul>

<p>You can nest them:</p>

<ul>
<li>  Abacus

<ul>
<li>answer</li>
</ul></li>
<li>  Bubbles

<ol>
<li> bunk</li>
<li> bupkis

<ul>
<li>BELITTLER</li>
</ul></li>
<li>burper</li>
</ol></li>
<li>  Cunning</li>
</ul>

<p>다음과 같이 항목 중간에 빈줄이 있으면 항목들은 <code>&lt;p&gt;</code>로 감싸진다.</p>

<ul>
<li><p>새</p></li>
<li><p>마술</p></li>
</ul>

<p>1986. What a great season. 은 리스트가 되지않는다.</p>

<h3>Blockquotes</h3>

<blockquote>
<p>Email-style angle brackets<br>
are used for blockquotes.</p>

<blockquote>
<p>And, they can be nested.</p>

<blockquote>
<p>몇 개까지 될까?</p>

<blockquote>
<p>4개</p>

<blockquote>
<p>5개</p>

<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>10개</p>

<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>

<h4>Headers in blockquotes</h4>

<ul>
<li>You can quote a list.</li>
<li>Etc.</li>
</ul>

<blockquote>
<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
</blockquote>

<h3>Code Spans</h3>

<p><code>&lt;code&gt;</code> spans are delimited by backticks.</p>

<p>You can include literal backticks like <code>`this`</code>.</p>

<h3>Preformatted Code Blocks</h3>

<p>Indent every line of a code block by at least 4 spaces or 1 tab.</p>

<p>This is a normal paragraph.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">This is a preformatted
code block.
</code></pre></div>
<p>탭문자 들여쓰기</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">탭을 입력할 수가 없으니 수동으로 테스트해야..
</code></pre></div>
<p>다음 코드블럭은 </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre></div>
<p>은 다음과 같이 바뀌어야 한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre></div>
<h3>Horizontal Rules</h3>

<p>Three or more dashes or asterisks:</p>

<hr>

<hr>

<hr>

<hr>

<hr>

<hr>

<hr>

<hr>

<h3>Manual Line Breaks</h3>

<p>End a line with two or more spaces:</p>

<p>Roses are red,<br><br>
Violets are blue.</p>

<h3>Automatic Link</h3>

<p><a href="http://example.com/">http://example.com/</a> 와 십진/16진 인코딩되는 <a href="mailto:address@example.com">address@example.com</a>이 있다.</p>

<h3>Backslash Escapes</h3>

<p>\   backslash<br><br>
`   backtick<br><br>
*   asterisk<br><br>
_   underscore<br><br>
{}  curly braces<br><br>
[]  square brackets<br><br>
()  parentheses<br><br>
#   hash mark<br><br>
+   plus sign<br><br>
-   minus sign (hyphen)<br><br>
.   dot<br><br>
!   exclamation mark</p>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[아마존 리눅스 AMI에 FTP 서버 설정하기]]></title>
            <link>/blog/2015/11/23/ftp-server-on-amazon-linux-ami/</link>
            <pubDate>Mon, 23 Nov 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[amazon]]></category>
        
            <category><![CDATA[linux]]></category>
        
            <category><![CDATA[ftp]]></category>
        
            <guid>/blog/2015/11/23/ftp-server-on-amazon-linux-ami/</guid>
            <description>
                <![CDATA[AWS EC2에 무료로 제공되는 아마존 리눅스 AMI(Amazon Machine Image)에 FTP 서버를 설정하는 방법을 간결하게 설명하고, 스택오버플로우에서도 많은 호응을 얻은 글이 있어 번역한다. 원문 : Setting up an FTP server on your Amazon Linux AMI 1단계: vsftpd 설치 EC2 서버에 SSH 접속한 후 vsftpd를 설치한다. sudo yum install vsftpd 2단계: EC2...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>AWS EC2에 무료로 제공되는 아마존 리눅스 AMI(<a href="https://en.wikipedia.org/wiki/Amazon_Machine_Image">Amazon Machine Image</a>)에 FTP 서버를 설정하는 방법을 간결하게 설명하고, 스택오버플로우에서도 많은 호응을 얻은 <a href="http://stackoverflow.com/a/11404078">글</a>이 있어 번역한다.</p>

<p>원문 : <a href="http://cafeandrew.com/archives/2339">Setting up an FTP server on your Amazon Linux AMI</a></p>

<h2>1단계: vsftpd 설치</h2>

<p>EC2 서버에 SSH 접속한 후 vsftpd를 설치한다.</p>

<pre class="terminal">
sudo yum install vsftpd
</pre>

<h2>2단계: EC2 인스턴스의 FTP 포트를 연다.</h2>

<p>EC2 서버의 FTP 포트를 연다. AWS EC2 관리 콘솔에 로그인하고 왼쪽의 내비게이션 메뉴에서 보안 그룹(Security Groups)을 선택한다. EC2 인스턴스에 할당된 보안 그룹을 선택하고 Inbound 탭에서 20-21 범위의 포트를 추가한다.</p>

<p><img src="http://i.stack.imgur.com/4OKWe.png" alt=""></p>

<p>1024-1048 포트 범위도 추가한다:</p>

<p><img src="http://i.stack.imgur.com/MVtT4.png" alt=""></p>

<h2>3단계: vsftpd.conf 파일 업데이트</h2>

<p>vsftpd 환경 설정 파일을 편집한다.</p>

<pre class="terminal">
sudo nano /etc/vsftpd/vsftpd.conf
</pre>

<p>익명으로 FTP를 접속하는 것을 막는다:</p>

<pre class="terminal">
anonymous_enable=YES
</pre>

<p>를</p>

<pre class="terminal">
anonymous_enable=NO
</pre>

<p>로 고친다.</p>

<p><code>vsftpd.conf</code> 파일의 마지막에 다음을 추가한다:</p>

<pre class="terminal">
pasv_enable=YES
pasv_min_port=1024
pasv_max_port=1048
pasv_address=자신의 인스턴스 공인 IP
</pre>

<p><code>vsftpd.conf</code> 파일이 다음과 비슷해 보여야 한다. - 단, <code>pasv_address</code> 값은 자신의 공인(Public) IP 주소여야 한다.</p>

<p><img src="http://i.stack.imgur.com/MqGmg.jpg" alt=""></p>

<h2>4단계: vsftpd 재시작</h2>

<pre class="terminal">
sudo /etc/init.d/vsftpd restart
</pre>

<p>다음과 같은 메시지가 보여야 한다.</p>

<p><img src="http://i.stack.imgur.com/oGWgL.jpg" alt=""></p>

<h2>5단계: FTP 사용자 만들기</h2>

<p><code>/etc/vsftpd/user_list</code>를 보면 다음과 같을 것이다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># vsftpd userlist
# If userlist_deny=NO, only allow users in this file
# If userlist_deny=YES (default), never allow users in this file, and
# do not even prompt for a password.
# Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers
# for users that are denied.
root
bin
daemon
adm
lp
sync
shutdown
halt
mail
news
uucp
operator
games
nobody
</code></pre></div>
<p>이건 기본적으로 &quot;이 사용자들은 FTP 접근을 허락하지 않는다&quot;라고 말하는 것이다. vsftpd는 이 목록에 없는 사용자가 FTP에 접근할 수 있게 한다.</p>

<p>그러므로 새 FTP 계정을 만들기 위해서, 서버에 사용자를 새로 만들어야 한다.(만약 <code>/etc/vsftpd/user_list</code>에 열거되지 않은 사용자 계정(예를 들어 ec2-user: 역자주)을 이미 가지고 있다면 다음 단계로 넘어간다.)</p>

<p>EC2 인스턴스에 사용자를 새로 만드는 것은 매우 간단하다. 예를 들어 사용자 <code>bret</code>을 만들려면:</p>

<pre class="terminal">
sudo adduser bret
sudo passwd bret
</pre>

<p>다음과 같이 보일 것이다.</p>

<p><img src="http://i.stack.imgur.com/A7Dad.jpg" alt=""></p>

<h2>6단계: 사용자의 홈 디렉토리를 제한한다.</h2>

<p>이 시점에서의 FTP 사용자는 홈 디렉토리에 제한이 없다. 이것은 보안상 좋지 않으나, 매우 쉽게 고칠 수 있다.</p>

<p><code>vsftpd.conf</code> 파일을 편집한다:</p>

<pre class="terminal">
sudo nano /etc/vsftpd/vsftpd.conf
</pre>

<p>다음 라인을 주석해제한다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">chroot_local_user=YES
</code></pre></div>
<p>다음과 같이 보일 것이다:</p>

<p><img src="http://i.stack.imgur.com/5atwI.jpg" alt=""></p>

<p>vsftpd 서버를 재시작한다:</p>

<pre class="terminal">
sudo /etc/init.d/vsftpd restart
</pre>

<p>이제 다 했다!</p>

<h2>부록 A: 리부트에서 살아남기</h2>

<p>vsftpd는 서버가 부트할 때 자동으로 시작되지 않는다. 다음과 같이 한다:</p>

<pre class="terminal">
sudo chkconfig --level 345 vsftpd on
</pre>

<h2>부록 A: vsftpd 제거하기(역자)</h2>

<pre class="terminal">
sudo yum remove vsftpd
</pre>

<p>우분투와 달리 위의 명령어로 환경설정까지 제거되고, 서비스도 정지된다.</p>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[사무직을 위한 좌욕 실천법]]></title>
            <link>/blog/2015/10/13/hip-bath-for-officer/</link>
            <pubDate>Tue, 13 Oct 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[bath]]></category>
        
            <category><![CDATA[health]]></category>
        
            <category><![CDATA[hemorrhoid]]></category>
        
            <guid>/blog/2015/10/13/hip-bath-for-officer/</guid>
            <description>
                <![CDATA[치질은 30대 이상 성인이라면 열 명중 여덟 명이 걸리는 흔한 질환이며, 노화됨에 따라 더 쉽게 걸린다고 한다. 그러나, 전체 한국인을 대상으로도 약 25~30%, 성인 여성의 40~50%가 크고 작은 치질을 지닌 채 살아가고 있다고 한다. 중고생, 성인을 가리지않고 발병한다. 꼼꼼한 성격일수록 치질에 걸리기 쉽다고 하며 미인이 치질이 많다는 통계도 있다고 한다....]]>
            </description>
            <content:encoded>
                <![CDATA[<p><a href="https://namu.wiki/w/%EC%B9%98%EC%A7%88">치질</a>은 30대 이상 성인이라면 열 명중 여덟 명이 걸리는 흔한 질환이며, 노화됨에 따라 더 쉽게 걸린다고 한다. 그러나, 전체 한국인을 대상으로도 약 25~30%, 성인 여성의 40~50%가 크고 작은 치질을 지닌 채 살아가고 있다고 한다. 중고생, 성인을 가리지않고 발병한다. 꼼꼼한 성격일수록 치질에 걸리기 쉽다고 하며 미인이 치질이 많다는 통계도 있다고 한다. 미인일수록 식사량을 제한하는 경향이 많은데 식사량이 일정 이하라면 소화와 배변 활동이 제대로 이루어지지 않아서 자연스럽게 항문도 제대로 활동을 못하게 되기 때문이다. 운전기사, 고시생, 사무직 등 오래 앉아 있는 사람이 더 많이 생기며, 여자들이 흔히 취하는 쪼그려 앉는 자세도 좋지 않다.</p>

<p>치질은 치핵, 치열, 치루 등으로 나뉘는데 제일 많이 걸리는 치핵은 괄약근을 기준으로 내치핵과 외치핵으로 나뉜다. 내치핵은 본인도 걸렸는지 잘모르는 경우가 많으며, 무통증 출혈이 가장 일반적인 증상이다. 대변볼 때 새빨간 피를 본 적이 있는가? 최소 내치핵 1기이다. 내치핵이 밖으로 빠지는 3,4기에는 수술이 권유되기 때문에 1기나 2기에서 잡아야 한다.</p>

<p>1기는 특별한 치료는 없고 약, 좌욕, 식이섬유 섭취 등으로 충분히 치료가 가능하다. 과음은 삼가해야 한다. 약은 전문의약품이 아니어서 약국에서 좌약을 직접 구매할 수도 있다.</p>

<p>좌욕은 양한방 모두에서 권하는 손쉬운 치질 예방법이며, 항문 및 주변부를 깨끗하게 유지하여 염증이 나지 않도록 하며, 괄약근 이완과 혈액순환 촉진으로 치핵(치질), 치열, 기타 항문 병변을 방지할 수 있는 가장 좋은 방법이다. </p>

<h2>좌욕의 효능</h2>

<ul>
<li>치핵, 치열, 치루 등의 항문 병변</li>
<li>전립선염, 전립선 통증 또는 비대 등의 전립선 이상</li>
<li>변비, 부인병, 출산 후 통증 등의 여성 질환</li>
</ul>

<h2>좌욕하는 방법</h2>

<ul>
<li>수온 : 38~45도 정도로 권하는 사람마다 약간 다르나 너무 뜨거우면 화상을 입어 오히려 병이 도진다. 방법과 상관없이 40도 정도가 적당하다.</li>
<li>수질 : 깨끗한 수돗물. 첨가물(소독액, 소금)은 오히려 상처나 항문에 자극을 주어서 좋지 않다. 치질 수술 후에는 오히려 상처가 아물지 않는 원인이 될 수 있다. 사용할 때는 의사와 상의해야 한다.</li>
<li>세척 : 조금이라도 증상이 있는 경우에는 배변 후에는 반드시 샤워기로 항문 세척을 한다. 하루에 여러 번 배변하게 되면 매번 하기 어려우니 증상이 있는 경우에는 아침에 한번 배변을 하는 것을 습관을 들이고 샤워도 함께하는 것이 현실적이다.</li>
<li>회수 : 하루 3∼4회. 지키기 어렵다면 아침저녁으로는 반드시 한다. (낮에 좌욕이 여의치 않은 경우 화장솜을 항문 사이에 끼워 1∼2시간마다 교체해주면 항문을 깨끗하게 유지할 수 있다고 한다. 이건 안해봄)</li>
<li>시간 : 5-10분. 너무 적어도 너무 길어도 좋지 않다. 항문이 찢어지는 치열 환자가 아니라면 괄약근 케겔 운동을 겸하면 효과가 더 좋다. 5분이란 시간은 생각보다 길다.</li>
<li>건조 : 좌욕 후 수건으로 부드럽게 닦는다. 건조가 안 되면 항문소양증(가려움증) 등이 생길 수도 있다.</li>
</ul>

<h3>샤워기로 하는 약식 좌욕</h3>

<ul>
<li>집에서 가장 손쉽게 할 수 있는 방법이며, 일반 좌욕과 마찬가지로 5∼10분 정도를 항문부위를 쏘이면 깨끗이 씻어내고 마사지하는 효과가 있다.</li>
<li>수압이 어느 정도는 되어야 세척과 마사지 효과가 있으므로 샤워의 마무리로 시행하는 하는 것이 현실적이다.</li>
<li>증상이 없어 예방을 목적으로 할 때 스쿼트 자세로 하면 운동 효과도 누릴 수 있으며, 이때 무릎이 발끝보다 뒤에 위치하도록 해야 한다. 조금이라도 증상이 있을 때는 스쿼트 자세가 좋지 않을 수도 있으니 욕조에 비스듬히 눕는 등의 가장 편한 자세를 취한다.</li>
<li>증상이 없을 때는 게으르기 쉬워 약식 좌욕도 하기 싫어진다. 아무리 바빠도 예방을 위해 1분 이상 실행하여 세척의 목적은 달성해야 한다.</li>
<li>온수 비데를 이용하여 씻을 수도 있다. 차갑거나 수압이 너무 세면 증상을 악화시킬 수 있다. 비데에서 쾌락을 얻으려 하지 말고 청결만 건진다.</li>
</ul>

<h3>반신욕법</h3>

<p>반신욕은 몸의 하반신을 따뜻한 물(38~40도)에 30분 정도 담그는 목욕법이다. 하체를 데워 따뜻한 혈액을 전신으로 순환하게 하여 여러 가지 질병을 예방하거나 치료에 도움을 줄 수 있다. 십여년 전 엄청나게 유행한 적이 있다. 단, 음주자나 심장병과 같은 혈관계 질환자는 조심해서 해야 한다.</p>

<p>좌욕은 넓은 세숫대야나 <a href="http://www.enuri.com/view/Listmp3.jsp?cate=05101302&amp;from=search&amp;islist=Y&amp;skeyword=%EC%A2%8C%EC%9A%95%EA%B8%B0&amp;cate_keyword=Y&amp;hyphen_2=false">좌욕기</a>를 이용해서 하는 경우가 더 많이 권장된다. 그러나 어차피 하반신은 벗어야 하고 상반신도 어느 정도 탈의를 해야 한다. 세숫대야나 좌욕기도 가지고 다닐 수 없으므로 집에서 할 수밖에 없으며, 쪼그려 앉아서 하면 항문으로 혈액이 몰려 좋지 않다. 그러느니 반신욕법이 더 낫다고 생각한다. 반신욕법은 전립선 질환이나 다른 증상에도 효과가 있으니 일석다조다.</p>

<ul>
<li>반신욕을 할 때도 샤워기로 항문 세척을 먼저 한다.</li>
<li>40~43도의 깨끗한 물에 하반신 또는 적어도 엉덩이 아래는 다 잠기도록 한다. 굳이 물을 끓여서 식혀서까지 할 필요는 없다. 필요 없는 정성은 들이지 않는다.</li>
<li>욕조 모양대로 비스듬히 누운 자세가 좋다.</li>
<li>괄약근 케겔 운동을 추가하면 효과가 더 좋다. 단 치열 환자는 해가 된다. 케겔 운동은 전립선과 조루 등에도 좋다. (케겔 운동에 더 자세한 설명은 다음 기회에~)</li>
<li>5~10분 정도만 한다. 심혈관 질환이 있는 사람은 답답한 증세 등의 이상이 있으면 즉시 중단한다. 심혈관 환자의 경우에는 실신할 수 있으므로 보호자가 지켜봐야 한다.</li>
</ul>

<h2>그 외 도움이 되는 방법</h2>

<ul>
<li>평소 장시간 고정자세로 있는 것을 피하고 수시로 자세를 바꾸거나 가벼운 체조를 하는 것도 항문건강과 치질 예방에 도움이 된다. </li>
<li>술은 말초 혈관을 확장하고 혈류량을 증가시켜 치핵 부위에 출혈과 통증을 유발할 수 있는 만큼 치질 환자는 될 수 있으면 음주를 삼가야 한다. </li>
<li>책상에서 일할 땐 메모리폼 도넛 방석과 같은 치질 방석을 깔고 앉으면 통증 완화에 도움이 된다. <a href="http://yanghospital.tistory.com/148">치료나 예방에는 효과가 없다.</a></li>
<li>치질 예방에 매우 중요한 것이 올바른 배변습관이다. 우선 정해진 시간에 화장실에 가는 습관을 들이는 게 좋다. 한번에 5분 이상 변기에 앉지 않는다.</li>
<li>장이 건강해야 배변이 수월하고 항문건강에도 도움을 준다. 식물성 섬유소 섭취를 늘리는 습관이 중요하다. 이를 위해 식이섬유가 풍부하고 장운동에 도움이 되는 음식들로 식단을 구성하는 게 좋다. 김ㆍ다시마 등의 해조류와 콩 등의 곡물류, 고구마ㆍ감자 등의 구근류, 사과ㆍ알로에ㆍ당근 등 채소나 과일을 자주 먹는 것이 좋다. 유산균도 도움이 된다.</li>
<li>변비나 딱딱한 변은 항문질환에 좋지 않으므로 변을 묽게 하기 위해 하루에 물 1.5리터 이상 섭취한다. <a href="http://health.chosun.com/site/data/html_dir/2011/11/24/2011112402108.html">식이섬유가 많은 음식</a>을 섭취한다.</li>
</ul>

<h2>요약</h2>

<ul>
<li>샤워기로 약식 좌욕을 생활화한다. 온수 비데를 수압이 약하게 이용한다.</li>
<li>시간이 되면 10분 반신욕을 하되 케겔 운동을 같이한다.</li>
<li>식이섬유와 물을 충분히 섭취하고 과음을 하지 않는다.</li>
</ul>

<h2>참고링크</h2>

<ul>
<li><a href="https://soundcloud.com/docdocdoc/63-1?in=docdocdoc/sets/iam_doctor_s2#t=1h2m15s">[나의사] 63회 - 서울성도병원 송석규 진료부장(치질의 모든 것)</a></li>
<li><a href="https://soundcloud.com/docdocdoc/64-1?in=docdocdoc/sets/iam_doctor_s2#t=52m48s">[나의사] 64회 - 서울성도병원 송석규 진료부장(치칠 치료법 공개방송)</a></li>
<li><a href="http://blog.daum.net/docgs/6279132">올바른 좌욕이란?</a></li>
<li><a href="http://www.youngwol.org/bbs/board.php?bo_table=health_talk&amp;wr_id=560">좌욕</a></li>
<li><a href="http://economy.hankooki.com/lpage/entv/201109/e2011091517265994230.htm">치질 예방·관리하려면… &quot;온수 좌욕 꾸준히 하라&quot;</a></li>
<li><a href="http://cuspis.net/%EC%98%AC%EB%B0%94%EB%A5%B8%EC%A2%8C%EC%9A%95%EB%B2%95/">올바른좌욕법</a></li>
<li><a href="http://health.chosun.com/healthyLife/column_view.jsp?idx=8145">지나친 좌욕은 치질을 악화시킨다</a></li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[터미널 초보의 필수품인 Oh My ZSH!를 사용하자]]></title>
            <link>/blog/2015/08/21/oh-my-zsh/</link>
            <pubDate>Fri, 21 Aug 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[linux]]></category>
        
            <category><![CDATA[osx]]></category>
        
            <category><![CDATA[shell]]></category>
        
            <category><![CDATA[zsh]]></category>
        
            <category><![CDATA[bash]]></category>
        
            <category><![CDATA[command]]></category>
        
            <guid>/blog/2015/08/21/oh-my-zsh/</guid>
            <description>
                <![CDATA[요약: 화려한 테마와 편리한 기능을 가진 Oh My Zsh를 설치하여 터미널 환경을 획기적으로 변경하고 iTerm이던 터미널 앱이던 리눅스든 상관없이 같은 환경으로 작업하자! 터미널로 정말 많은 것을 할 수 있지만, 터미널 명령어를 익히는 것은 맥이나 리눅스 초보에겐 매우 낯선 일이다. 아마 맥을 오랫동안 사용한 사람들도 터미널을 한 번도 사용하지 않은 사람도...]]>
            </description>
            <content:encoded>
                <![CDATA[<p><strong>요약: 화려한 테마와 편리한 기능을 가진 Oh My Zsh를 설치하여 터미널 환경을 획기적으로 변경하고 iTerm이던 터미널 앱이던 리눅스든 상관없이 같은 환경으로 작업하자!</strong></p>

<p>터미널로 정말 많은 것을 할 수 있지만, 터미널 명령어를 익히는 것은 맥이나 리눅스 초보에겐 매우 낯선 일이다. 아마 맥을 오랫동안 사용한 사람들도 터미널을 한 번도 사용하지 않은 사람도 많고, 터미널을 사용했다고 하더라도 제시된 명령어를 그대로 복붙하는 경우가 많다. 그러나 터미널 명령어를 한번 익혀놓으면 <strong>어떠한 OS에서도</strong>(수십 년의 시간과 기종과 거의 상관없이 - 물론 유닉스 계열이라 윈도 기종은 제외) 거의 그대로 사용할 수 있으므로 배우는 시간이 아깝지 않다.</p>

<p>터미널을 실행시키면 최신 버전의 우분투와 OS X에서는 bash라는 쉘<code>shell</code>을 실행한다. 맥에서 터미널 앱을 실행시킬 때 또는 우분투에 로그인할 때 처음 만나는 화면은 bash 쉘이 보여주는 화면이다. 텍스트로 되어있고 폰트도 까만 화면에 하얀색으로 무뚝뚝하게 보여주는 화면이다. GUI 환경을 많이 사용하다 보면 정이 뚝 떨어지는 느낌이 든다. 그래서 많은 사용자가 쉘 환경설정을 변경하여 자신이 좋아하는 색상과 폰트를 설정하기도 하고 시스템의 설정을 자신만의 환경으로 변경하기도 한다. 깃허브에서도 이러한 <a href="https://dotfiles.github.io/">돗파일<code>dotfiles</code>만 모아서 추천해주고 있다</a>.</p>

<p>이 돗파일을 살펴보면 정말 많은 환경설정 값을 변경할 수 있다는 것을 알 수 있는데 초보자가 보기에는 어렵고, 때로는 원하지 않는 설정을 바꾸게 되어서 되돌리느라 많은 시간을 소비할 경우도 있다.</p>

<h2>Oh My Zsh</h2>

<p>Oh My Zsh는 bash보다 최근에 나온 쉘인 zsh의 환경설정을 다루는 프레임워크이며, 커뮤니티 활동이 매우 활발하여 120여 개의 테마와 120여 개의 플러그인이 준비되어있다.</p>

<p>먼저 <a href="http://ohmyz.sh/">Oh My Zsh</a>를 설치하려면 당연히 zsh가 설치되어 있어야 하고, curl이나 wget, 마지막으로 git이 설치되어 있어야 한다.</p>

<p>아래 명령으로 zsh가 설치되어 있나 확인한다.</p>

<pre class="terminal">
$ zsh --version
zsh 5.0.7
</pre>

<p>설치가 되어있지 않다면 아래 명령으로 설치한다. 우분투는:</p>

<pre class="terminal">
sudo apt-get install zsh
</pre>

<p>OS X에서는:</p>

<pre class="terminal">
$ brew update
$ brew install zsh
</pre>

<p>bash로 되어있는 기본 쉘을 zsh로 바꾼다.</p>

<pre class="terminal">
$ which zsh               #쉘의 위치를 확인한다.
/usr/bin/zsh

$ chsh -s /usr/bin/zsh    #기본 쉘을 변경한다.

$ chsh -s `which zsh`     #위 두 개의 명령을 하나로 줄일 수도 있다.
</pre>

<p>재로그인하거나 터미널을 종료하고 재시작한 후 기본 쉘이 zsh인 것을 확인한다. 일부 시스템 특히 OS X에서는 <code>/etc/shells</code> 파일에 설치한 쉘을 등록한 후에 재시작해야 한다.</p>

<pre class="terminal">
$ echo $SHELL
/usr/bin/zsh
</pre>

<p>이제 Oh My Zsh을 설치한다. <a href="http://ohmyz.sh/">wget으로 설치</a>할 수도 있다.</p>

<pre class="terminal">
$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
</pre>

<h2>간단한 사용법</h2>

<p>설치가 잘되었다면 이제 간단하고 편리한 몇 가지 기능을 경험해보자.</p>

<p><code>/home/encodes/Projects</code>라는 폴더가 있을 때 <code>cd /h/enco/proj</code>만 입력하고 탭을 치면 전체 경로가 완성된다.</p>

<pre class="terminal">
$ cd /h/enco/proj             # 여기까지 입력한 후 탭을 친다.

$ cd /home/encodes/Projects   # 이렇게 결과가 나온다.
</pre>

<p><code>/home/encodes/Projects</code>라는 폴더에서 바로 <code>/</code>로 이동하려면 <code>cd ......</code>라고 하면 된다. <code>cd ..</code>은 바로 위 부모 디렉토리로 올라가는 일반적인 명령어인데, Oh My Zsh에서는 <code>cd ...</code>은 부모 디렉토리의 부모 디렉토리로, <code>cd ....</code>은 부모 디렉토리의 부모 디렉토리의 부모 디렉토리로 옮겨진다.</p>

<p>루트<code>/</code> 디렉토리에서 바로 이전의 디렉토리인 <code>/home/encodes/Projects</code>로 이동하려면 간단히 <code>cd -</code>를 입력하면 된다. Oh My Zsh에서는 이것을 확장하여 <code>cd -</code> 상태에서 탭을 치면 이전 히스토리가 나온다.(최대 10개까지 보여주며, 2개 이상일 때 유용하므로 cd 명령으로 여러 개의 디렉토리를 이동한 후에 사용해 보자) 히스토리 바로 앞의 숫자를 입력하면 원하는 디렉토리로 돌아갈 수 있다. </p>

<pre class="terminal">
$ cd -        # 탭을 치면 아래와 같은 히스토리가 나오고 번호로 선택한다.
1 -- /home/encodes/Projects
2 -- /var/www
3 -- /usr/local
4 -- /usr/bin
5 -- /home/user
</pre>

<p>디렉토리나 파일의 이름을 자동으로 완성하거나 추천해준다. 여러 개일 경우에는 탭으로 내비게이션해서 선택할 수 있다.</p>

<pre class="terminal">
$ cd /etc/a    # 탭을 치면 아래와 같이 a로 시작하는 디렉토리가 나오며 탭으로 선택할 수 있다.
acpi/          apache2/       apparmor/      apport/        at-spi2/
alternatives/  apm/           apparmor.d/    apt/
</pre> 

<p>명령어의 옵션에서도 이 추천 기능을 사용할 수 있다!</p>

<pre class="terminal">
$ git a         # 탭을 치면 a로 시작하는 옵션이 나오고 탭으로 선택할 수 있다.
add      -- add file contents to index
am       -- apply patches from a mailbox
apply       -- apply patch to files and/or to index
archimport  -- import an Arch repository into git
archive  -- create archive of files from named tree
</pre>

<p>zsh에도 추천 기능이 있지만 Oh-My-ZSH!가 더 직관적이다.</p>

<p>명령어 스펠체크기능은 디폴트가 아니기 때문에 다음 명령어로 깨워야 한다.</p>

<pre class="terminal">
$ setopt correct                        # 스펠체크기능을 깨운다.
$ gut add                               # 잘못된 명령어를 입력하면
zsh: correct 'gut' to 'git' [nyae]?     # 예상되는 추천 명령어를 제시한다.
</pre>

<h2>테마</h2>

<p>개인적으로 예쁜 테마도 좋지만, 기능적으로 간결한 테마를 원한다. <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">120개 가까운 테마</a>를 훑어 봤는데 디폴트 테마인 <code>robbyrussell</code>보다 확실하게 더 눈에 띄는 것을 찾을 수가 없었다. 그렇다고 일일이 써보기엔 너무 많아서 고민이었는데 재미있는 기능을 발견했다. 터미널을 실행할 때마다 랜덤하게 선택해서 테마를 경험해 볼 수 있는 기능이다. <code>~/.zshrc</code>에서 두 번째 설정값을 디폴트값인 <code>robbyrussell</code>에서 <code>random</code>으로 변경한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ZSH_THEME=&quot;random&quot;
</code></pre></div>
<p>이제 터미널을 켤 때마다 테마를 탐색할 수 있다. 테마 중에 Oh My Zsh의 기능인 <code>Right-hand prompts</code>을 적용한 테마도 있다. 주로 시간이나 배터리값을 보여주거나 현재 git 상태를 기호 등으로 나타내주는 기능이다.</p>

<h2>플러그인</h2>

<p><code>~/.oh-my-zsh/plugins</code>에 들어있는 200개 가까운 플러그인은 많이 사용되는 프로그램의 alias를 미리 정의해 놓은 것이다. alias는 긴 명령어를 짧게 사용할 수 있도록 별명을 주는 것이다. 예를 들어 <code>alias ga = &quot;git add&quot;</code>로 정의하면 <code>ga</code>만 입력해도 <code>git add</code>를 입력한 것과 같도록 하는 것인데 안 쓸 수 없다. 위에서 설명한 옵션 완성 기능도 플러그인을 설치해야 한다.(git 플러그인은 기본으로 설치되어 있다)</p>

<p><code>~/.zshrc</code> 파일에 원하는 플러그인을 스페이스로 구분하면서 하나씩 나열하면서 입력한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">plugins=(git rails gem rvm)
</code></pre></div>
<p>터미널을 재로그인하거나 아래 명령으로 <code>~/.zshrc</code>안의 스크립트를 실행한다.</p>

<pre class="terminal">
source ~/.zshrc         # 혹은
. ~/.zshrc              # .과 source는 같다.
</pre>

<p>자신만의 알리아스를 추가할 경우에도 <code>~/.zshrc</code>에 입력한 후 위의 명령을 내리면 된다.</p>

<blockquote>
<p>.zshrc나 .bashrc의 rc는 <a href="https://en.wikipedia.org/wiki/Run_commands">Run commands</a>의 준말로 &quot;런컴&quot;으로 읽는다.</p>
</blockquote>

<p>설명이 곁들여진 플러그인 리스트는 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview">Plugins Overview</a>과 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins">Plugins</a>에서 볼 수 있다.</p>

<p>기본으로 설치되는 git 플러그의 알리아스도 70개가 넘다 보니 편하게 쓰려다가 외워야 하는 게 너무 많아졌다. 행복한 고민일까? 간단하게 검색해보니 <a href="https://github.com/djui/alias-tips">알리아스팁</a>이란 것이 있다. 여기서는 자동으로 설치하는 것보다 수동설치한다.</p>

<pre class="terminal">
$ cd ${ZSH_CUSTOM1:-$ZSH/custom}/plugins            # 커스텀 플러그인 폴더로 이동
$ git clone https://github.com/djui/alias-tips.git  # 저장소를 로컬로 복사
$ $EDITOR ~/.zshrc                                  # 에디터로 파일을 에디터로 불러들임
</pre>

<p><code>alias-tips</code> 플러그인을 추가한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">plugins=(git ... alias-tips)
</code></pre></div>
<p>source 명령으로 <code>~/.zshrc</code>을 재실행하면 다음과 같은 화면을 볼 수 있다.</p>

<pre class="terminal">
$ ls -lh
You know you have an alias for that, right? ll
</pre>

<p><code>~/.zshrc</code> 파일 안에 다음 변수와 값을 지정하여 나타나는 메시지를 변경할 수도 있다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:
export ZSH_PLUGINS_ALIAS_TIPS_TEXT=&quot;Alias tip: &quot;
:
</code></pre></div>
<p>이제 자주 사용하는 몇 개만 외워두고 사용해가면서 알리아스를 배워나갈 수 있다.</p>

<h2>참고 링크</h2>

<ul>
<li><a href="https://github.com/alebcay/awesome-shell#zsh">alebcay/awesome-shell</a></li>
<li><a href="https://github.com/herrbischoff/awesome-osx-command-line">herrbischoff/awesome-osx-command-line</a></li>
<li><a href="https://github.com/sorin-ionescu/prezto">sorin-ionescu/prezto</a> : Oh My Zsh를 포크하여 성능을 개선시켰다고 한다. 그러나 도큐멘트가 부족해서 아직은 Oh My Zsh에 머물러있다.</li>
<li><a href="http://subicura.com/zsh-oh-my-zsh-tip/">bash를 대체할 zsh + oh-my-zsh tip!</a></li>
<li><a href="http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/">My Extravagant Zsh Prompt / Steve Losh</a></li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[버추얼박스 우분투에서 아파치와 패신저로 레일즈 프로덕션 모드 실행하기]]></title>
            <link>/blog/2015/08/18/rails-on-virtualbox-with-ubuntu-apache/</link>
            <pubDate>Tue, 18 Aug 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[virtualbox]]></category>
        
            <category><![CDATA[ubuntu]]></category>
        
            <category><![CDATA[linux]]></category>
        
            <category><![CDATA[apache]]></category>
        
            <category><![CDATA[passenger]]></category>
        
            <category><![CDATA[rails]]></category>
        
            <category><![CDATA[mysql]]></category>
        
            <category><![CDATA[production]]></category>
        
            <guid>/blog/2015/08/18/rails-on-virtualbox-with-ubuntu-apache/</guid>
            <description>
                <![CDATA[오라클에서 만든 버추얼박스VirtualBox를 다운로드하여 설치한다. 가상머신를 만들어서 우분투 서버를 설치하는 것을 사진과 함께 단계마다 자세하게 설명한 가이드가 있으니 보고 그대로 따라 하면 된다. 시간도 우분투 서버를 다운받는 시간보다 적게 걸린다. 우분투 14.04 서버 세팅하기 (Virtual Box) | 초보자를 위한 레일스 가이드북 : 우분투를 설치하기위해 가상머신을 시작하기 전에 브리지 어댑터로 설정하는...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>오라클에서 만든 버추얼박스<a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>를 다운로드하여 설치한다. 가상머신를 만들어서 우분투 서버를 설치하는 것을 사진과 함께 단계마다 자세하게 설명한 가이드가 있으니 보고 그대로 따라 하면 된다. 시간도 우분투 서버를 다운받는 시간보다 적게 걸린다.</p>

<ul>
<li><a href="http://rorlab.gitbooks.io/railsguidebook/content/appendices/ubuntu14server.html">우분투 14.04 서버 세팅하기 (Virtual Box) | 초보자를 위한 레일스 가이드북</a> : 우분투를 설치하기위해 가상머신을 시작하기 전에 브리지 어댑터로 설정하는 것을 빼먹으면 처음부터 다시 설치해야하는 불상사가 일어날 수 있다. &quot;서버 웹운영 환경 설정&quot;은 책의 예제에 맞추어져 있기 때문에 자신의 웹앱에 필요한 것을 설치해야한다.</li>
<li><a href="https://help.ubuntu.com/lts/serverguide/">우분투 서버 가이드</a>는 참고용.</li>
</ul>

<h2>프로그램 설치</h2>

<pre class="terminal">
ssh [user_id]@[서버IP주소]   # user_id와 서버IP주소는 []없이 자신의 것으로 입력

# 여기서부터의 모든 명령어는 별도의 언급이 없는 한 서버에서 실행해야한다.

# 최초 시스템 업데이트
sudo apt-get update
sudo apt-get upgrade

# 자신이 필요한 앱 설치
sudo apt-get install apache2 curl git libmysqlclient-dev mysql-server nodejs
</pre>

<!-- * 최초 시스템 엡데이트 시에 로케일 에러가 나면 `sudo nano /etc/ssh/sshd_config`에서 `AcceptEnv LANG LC_*`을 제외시킨다. [참고링크](http://stackoverflow.com/a/2510548) -->

<ul>
<li>mysql-server를 설치할 경우 루트 패스워드를 입력한다. 그렇지 않으면 계속 물어보기 때문에 설치할 때 신중하게 생각해서 입력한다.</li>
<li>레일즈의 애셋 파이프라인 컴파일러는 자바스크립트 런타입을 요구하므로 Node.js를 설치해야한다.</li>
</ul>

<p>웹브라우저에 서버IP주소를 입력하면 다음과 같은 아파치 기본화면을 볼 수 있다.</p>

<p><img src="https://farm1.staticflickr.com/684/20407517979_b731fb515b_b.jpg" alt=""></p>

<h3>RVM, Ruby 설치</h3>

<pre class="terminal">
# 요구되는 앱 설치
sudo apt-get install -y curl gnupg build-essential

# RVM 설치
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
curl -L https://get.rvm.io | bash -s stable

sudo addgroup rvm
sudo usermod -a -G rvm [user_id]  :user_id는 []없이 자신의 것으로 입력

if sudo grep -q secure_path /etc/sudoers; then sudo sh -c "echo export rvmsudo_secure_path=1 >> /etc/profile.d/rvm_secure_path.sh" && echo Environment variable installed; fi

exit
</pre>

<p>RVM을 작동시키기위해 서버에 재로그인한다. <code>service ssh reload</code>로도 해결될 것 같지만 우분투 깔기 귀찮아서 패스한다.(다른 분이 해보고 제보해주셨으면 합니다:)</p>

<pre class="terminal">
ssh [user_id]@[서버IP주소]   # user_id와 서버IP주소는 []없이 자신의 것으로 입력

# 특정 OS에서 RVM 구동 시 요구되는 라이브러리 설치
rvm requirements --autolibs=enabled
</pre>

<p>원하는 버전의 루비를 설치한다. 최신 버전을 설치하려면:</p>

<pre class="terminal">
rvm install ruby
rvm --default use ruby
rvm list
</pre>

<p>특정 버전(X.X.X)을 설치하려면:</p>

<pre class="terminal">
rvm install ruby-X.X.X
rvm --default use ruby-X.X.X
rvm list
</pre>

<h2>Passenger 설치</h2>

<p>Rails Server와 SQLite는 가볍고 간편해서 개발환경에는 적합하나 대량 사용자와 트랙잭션의 서비스에는 적합하지 않다. 그러한 프러덕션 서비스 환경에서 강력한 웹서버와 애플리케이션 서버가 필요하며, Apache와 Passenger가 그 중의 하나이다.</p>

<p>Nginx와 Apache는 웹서버이며, HTTP 트랜잭션을 핸들링하고 정적 파일을 서비스한다. 그러나 루비 애플리케이션 서버가 아니어서 루비 애플리케이션을 직접 돌릴 수 없다. NignX와 Apache는 Passenger와 같은 애플리케이션 서버와 함께 사용되야 한다.</p>

<p>Passenger는 독립실행모드와 Nginx/Apache 결합모드가 있으며, 결합모드에서는 동시에 여러 앱을 호스트할 수 있다. 독립실행모드와 Nginx 결합모드가 Apache 결합모드보다 약간 빠르다.</p>

<p>이제 Passenger를 설치해보자:</p>

<pre class="terminal">
# PGP 키를 설치하고 APT HTTPS 지원을 추가한다.
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
sudo apt-get install -y apt-transport-https ca-certificates

# APT 저장소 추가
sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main > /etc/apt/sources.list.d/passenger.list'
sudo apt-get update

# Passenger + Apache 모듈 설치
sudo apt-get install -y libapache2-mod-passenger
</pre>

<p>패신저 아파치 모듈을 enable하고(이미 되어 있을 수도 있다) 아파치를 재시작한다.</p>

<pre class="terminal">
sudo a2enmod passenger
sudo apache2ctl restart
</pre>

<p>설치를 검증한다. 단 하나의 에러도 나면 안된다.</p>

<pre class="terminal">
sudo passenger-config validate-install
</pre>

<p>아파치가 패신저 코어 프로세스를 시작시켰는지 확인한다. 다음 명령어로 패신저 프로세스와 아파치 프로세스를 모두 볼 수 있어야 한다.</p>

<pre class="terminal">
sudo passenger-memory-stats

sudo apt-get update     # 업데이트는 자주!
sudo apt-get upgrade
</pre>

<h2>비트버킷을 이용하여 서버에 코드 복사</h2>

<p>비트버킷 저장소에 코드를 푸시한다. 비트버킷이나 깃허브에 사용하지 않았던 분은 <a href="https://nolboo.github.io/blog/2013/10/06/github-for-beginner/">완전 초보를 위한 깃허브</a>를 참조한다. 물론 코드를 서버에 직접 복사하는 방법도 있다.</p>

<p>로컬컴퓨터에서:</p>

<pre class="terminal">
git push
</pre>

<p>푸시한 코드를 서버에서 받기 위해서는 먼저 비트버킷의 설정에서 Deployment key를 설정해야 한다.</p>

<ul>
<li><a href="https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git">참고용 비트버킷 가이드</a></li>
</ul>

<p>우분투 서버에서:</p>

<pre class="terminal">
ssh-keygen
# 이 다음은 그냥 엔터로 답하여 기본값으로 넘어간다.
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user_/.ssh/id_rsa):
Created directory '/home/user_id/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/user_id/.ssh/id_rsa.
Your public key has been saved in /home/user_id/.ssh/id_rsa.pub.
The key fingerprint is:
.
.
.

cat ~/.ssh/id_rsa.pub
</pre>

<p>cat 명령으로 출력된 부분을 비트버킷의 Deployment 키로 등록하여 우분투 서버가 비트버킷 저장소를 읽을 수 있도록 한다.</p>

<ul>
<li><a href="https://confluence.atlassian.com/display/BITBUCKET/Use+deployment+keys">참고용 비트버킷 가이드</a><br></li>
</ul>

<pre class="terminal">
cd /var/www/
sudo git clone [https://user_id@github.com/user_id/myapp.git]   #[]은 비트버킷 저장소의 이름
cd [myapp]                                      #myapp은 []없이 자신의 앱 이름
</pre>

<ul>
<li>비트버킷 연결 프로토콜은 HTTPS를 확실히 선호하게 되었다. SSH로 시도하는 동안 계속해서 키 에러가 나서 <a href="https://confluence.atlassian.com/display/BITBUCKET/Troubleshoot+SSH+Issues">Troubleshoot SSH Issues</a>에 있는 것을 전부 시도했지만 점점 꼬여만 갈뿐이었다.</li>
</ul>

<p>Bundler 설치하고 실행하여, 앱 의존성<code>dependency</code>을 모두 설치한다.</p>

<pre class="terminal">
gem install bundler
bundle install
</pre>

<h2>MySQL과 세션 암호화 키 설정</h2>

<pre class="terminal">
sudo nano Gemfile
</pre>

<p><code>Gemfile</code>에서 프로덕션 그룹에서 사용할 데이터베이스 gem를 지정한다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;mysql2&#39;</span>
<span class="k">end</span>
</code></pre></div>
<p>mysql 명령을 실행하여 데이터베이스를 만든다. 데이터베이스 이름으로 myapp_production을 사용했으나, 자신이 선호하는 이름으로 지정할 수 있다. 단, 설정 파일에도 적어야 하니 기억은 해놓아야 한다.</p>

<pre class="terminal">
mysql -u root -pPASSWORD  # PASSWORD는 설치 시 입력하였던 루트 비밀번호
mysql> CREATE DATABASE myapp_production DEFAULT CHARACTER SET utf8;
mysql> GRANT ALL PRIVILEGES ON myapp_production.*
    ->   TO 'username'@'localhost' IDENTIFIED BY 'password';  # username과 password는 자신의 것으로 하여 사용자를 추가한다.
mysql> EXIT;
</pre>

<p>이제 루트 유저가 아닌 <code>mysql -u username -ppassword</code>로도 mysql을 실행할 수 있다. </p>

<pre class="terminal">
sudo nano config/database.yml
</pre>

<p><code>config/database.yml</code>의 프로덕션 섹션에 다음과 같이 MySQL 관련 정보를 입력한다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">production</span><span class="p">:</span>
  <span class="ss">adapter</span><span class="p">:</span> <span class="n">mysql2</span>
  <span class="ss">encoding</span><span class="p">:</span> <span class="n">utf8</span>
  <span class="ss">reconnect</span><span class="p">:</span> <span class="kp">false</span>
  <span class="ss">database</span><span class="p">:</span> <span class="n">myapp_production</span>
  <span class="ss">pool</span><span class="p">:</span> <span class="mi">5</span>
  <span class="ss">username</span><span class="p">:</span> <span class="n">username</span>
  <span class="ss">password</span><span class="p">:</span> <span class="n">password</span>
  <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</code></pre></div>
<p>username, password, database는 자신의 것으로 바꾼다.</p>

<p>레일즈에서는 세션을 암호화하기 위해 특정 시크릿 키를 필요로 한다. 이것을 <code>config/secrets.yml</code>에 저장한다. 개발과 테스트용 시크릿 키는 로컬에서 자동으로 생성되지만, 프로덕션용 시크릿 키는 수동으로 생성해야 한다.</p>

<pre class="terminal">
rake secret
698b2bfc9e8e1...    # 이 줄을 복사
</pre>

<p>생성된 시크릿 키를 복사하여 <code>config/secrets.yml</code>의 <code>&lt;%= ENV[&quot;SECRET_KEY_BASE&quot;] %&gt;</code> 부분을 지우고 붙여넣는다.</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">secret_key_base</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">698b2bfc9e8e1...</span> <span class="c1"># 여기에 값으로 붙여넣는다</span>
</code></pre></div>
<p>시스템의 다른 유저가 앱의 민감한 정보를 방해하지 못하도록 설정 디렉토리와 데이터베이스 디렉토리의 보안을 강화한다.</p>

<pre class="terminal">
chmod 700 config db
chmod 600 config/database.yml config/secrets.yml
</pre>

<p>이제 마이그레이션을 적용한다.</p>

<pre class="terminal">
rake db:setup RAILS_ENV="production"
</pre>

<p>출력된 메시지로 데이타베이스가 제대로 생성되었는지 알 수 있지만, 확인하기 위해 기본적인 SQL 명령어로 데이터베이스를 볼 수도 있다.</p>

<pre class="terminal">
mysql -u username -ppassword
mysql> SHOW TABLES;         # 생성된 테이블 목록을 본다
mysql> EXPLAIN tablename;   # 테이블 구조를 본다.
mysql> status               # 현재 상태 보기
mysql> exit
</pre>

<h2>아파치와 패신저 설정</h2>

<pre class="terminal">
passenger-config about ruby-command
passenger-config was invoked through the following Ruby interpreter:
  Command: /home/user_id/.rvm/gems/ruby-2.0.0-p643/wrappers/ruby    # 이 경로
  Version: ruby 2.0.0p643 (2015-02-25 revision 49749) [x86_64-linux]
  ...
</pre>

<p><code>Command:</code> 뒤에 나온 경로는 뒤에서 사용해야 하니 별도로 복사해 놓는다.</p>

<p>앱의 아파치 설정 파일을 만들고 버추얼 호스트가 자신의 앱을 지정하도록 설정한다.</p>

<pre class="terminal">
sudo nano /etc/apache2/sites-available/myapp.conf
</pre>

<p><code>myapp</code>은 자신의 것으로 바꾼다. 아래 설정 내용에서도 자신의 것으로 바꾼다.</p>
<div class="highlight"><pre><code class="language-apache" data-lang="apache"><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
   <span class="nb">ServerName</span> yourserver.com

   <span class="nb">DocumentRoot</span> <span class="sx">/var/www/myapp/public</span>

   <span class="nb">PassengerRuby</span> <span class="sx">/home/user_id/.rvm/gems/ruby-2.0.0-p643/wrappers/ruby</span>

   <span class="nt">&lt;Directory</span> <span class="s">/var/www/myapp/public</span><span class="nt">&gt;</span>
      <span class="nb">Allow</span> from <span class="k">all</span>
      <span class="nb">Options</span> -MultiViews
      <span class="nb">Require</span> <span class="k">all</span> granted
   <span class="nt">&lt;/Directory&gt;</span>
<span class="nt">&lt;/VirtualHost&gt;</span>
</code></pre></div>
<ul>
<li><code>ServerName</code>은 자신의 서버 호스팅 이름 또는 서버IP주소를 입력해야한다. </li>
<li><code>DocumentRoot</code>는 반드시 자신의 레일즈 앱의 <em>public</em> 디렉토리를 입력해야 한다. </li>
<li><code>PassengerRuby</code>는 위에서 복사해 놓은 루비 경로 <code>/home/user_id/.rvm/gems/ruby-2.0.0-p643/wrappers/ruby</code>를 입력한다. </li>
<li><code>Require all granted</code>는 아파치 2.4 이상에서 필요하다.</li>
</ul>

<p>더 자세한 설정은 패신저 <a href="https://www.phusionpassenger.com/library/config/apache/reference/">Configuration reference</a>을 참조한다.</p>

<p>이제 기본 아파치 서버를 내리고 자신의 레일즈앱 myapp을 올릴 순간이다.</p>

<pre class="terminal">
sudo a2dissite 000-default
sudo a2ensite myapp.conf
sudo apachectl restart
</pre>

<p>웹브라우저에 자신의 서버 주소를 입력하면 자신의 레일즈앱이 떠야 정상이다. 이 글을 쓰면서 두세번의 설치를 했는데 아래와 같은 에러가 낫다. (아래 화면은 패신저 친화적 에러 옵션을 킨 상태이고 이는 프로덕션 모드에서는 지양해야 하는 일이다. 에러가 해결되면 다시 원래대로 돌려놓아야 한다.)</p>

<h3>패신저와 아파치가 자동으로 앱을 찾는 방법</h3>

<p>버추얼 호스트 루트를 앱의 정적 에셋 디렉토리로 지정하면 Ruby, Python, Node.js 웹앱을 시작하는 방법을 패신저가 자동으로 추리한다. 그런 방식으로 &quot;convention over configuration&quot; 철학을 따른다. 루비와 루비온레일즈의 경우 앱의 루트에 <code>config.ru</code> 파일이 있는지도 체크한다. 몇 개의 환경변수 옵션으로 직접 지정하는 방법도 있다. 자세한 것은 <a href="https://www.phusionpassenger.com/library/indepth/ruby/app_autodetection/apache/">How Passenger + Apache autodetects applications</a>을 참조한다.</p>

<h3>경험한 에러와 해결</h3>

<p><img src="https://farm6.staticflickr.com/5771/19999626564_d891f6d8b4_z.jpg" alt=""></p>

<p>위와 같은 에러가 나서 로그파일을 봤더니 권한 문제가 있어서 아래와 같이 해결하였다.</p>

<pre class="terminal">
sudo chown -R username:group /var/www/myapp/
sudo apachectl restart
</pre>

<p><code>username:group /var/www/myapp/</code>은 자신의 것으로 입력한다. chown 등의 권한 관리에 익숙치 않으면 간단한 번역글 <a href="http://nolboo.github.io/blog/2015/08/18/linux-users-groups/">리눅스 사용자와 그룹</a>을 참고한다.</p>

<h2>참고링크</h2>

<ul>
<li><a href="https://www.phusionpassenger.com/library/walkthroughs/deploy/ruby/">Deploying a Ruby app with Passenger to production - Passenger Library</a></li>
<li><a href="https://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Web Development with Rails 4</a></li>
</ul>

<h2>TODO</h2>

<ul>
<li>패신저와 웹앱을 돌릴 경우에 <code>user switching</code>이라고도 알려진 <code>user account sandboxing</code>을 추천하고있다.(출처: <a href="https://www.phusionpassenger.com/library/deploy/apache/user_sandboxing.html">Sandboxing apps with Unix user accounts (user switching)</a>) 다음 번에는 이 글을 유저 스위칭으로 업그레이드하려고 한다.</li>
<li>AWS EC2에 올려본다.</li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[리눅스 사용자와 그룹 - 린노드 가이드]]></title>
            <link>/blog/2015/08/18/linux-users-groups/</link>
            <pubDate>Tue, 18 Aug 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[linux]]></category>
        
            <category><![CDATA[users]]></category>
        
            <category><![CDATA[groups]]></category>
        
            <guid>/blog/2015/08/18/linux-users-groups/</guid>
            <description>
                <![CDATA[원문 : Linux Users and Groups - Linode Guides &amp; Tutorials 원문의 &lt; &gt; 기호는 모두 [ ] 기호로 변경함. Linux Users and Groups 리눅스/유닉스가 처음이라면 권한permission 개념이 혼란스러울 것이다. 이 가이드는 권한이 무엇인지, 어떻게 작동하고, 권한을 다루는 법을 설명한다. 많은 예제가 사용자users와 그룹groups의 권한을 설정하고 변경하는 법을 설명한다. What...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>원문 : <a href="https://www.linode.com/docs/tools-reference/linux-users-and-groups">Linux Users and Groups - Linode Guides &amp; Tutorials</a></p>

<ul>
<li>원문의 &lt; &gt; 기호는 모두 [ ] 기호로 변경함.</li>
</ul>

<h1>Linux Users and Groups</h1>

<p>리눅스/유닉스가 처음이라면 권한<code>permission</code> 개념이 혼란스러울 것이다. 이 가이드는 권한이 무엇인지, 어떻게 작동하고, 권한을 다루는 법을 설명한다. 많은 예제가 사용자<code>users</code>와 그룹<code>groups</code>의 권한을 설정하고 변경하는 법을 설명한다.</p>

<h2>What are User and Group Permissions?</h2>

<p>리눅스/유닉스 운영체제는 다른 운영체제와 비슷한 방법으로 멀티태스킹한다. 그러나, 다른 운영체제에 비해 리눅스의 주요 차이점은 여러 사용자를 가질 수 있는 것이다. 리눅스는 시스템에 동시에 접근할 수 있는 여러 사용자를 허용하도록 설계되어있다. 이 멀티사용자 설계가 제대로 작동하기 위해서는 다른 사용자로부터 사용자를 보호하는 방법이 필요하다. 이것이 권한이 제 역할을 발휘하는 부분이다.</p>

<h3>Read, Write &amp; Execute Permissions</h3>

<p>권한은 파일이나 디렉토리에 작용할 수 있는 &quot;권리<code>rights</code>&quot;이다. 기본 권리는 읽기<code>read</code>, 쓰기<code>write</code>, 실행<code>execute</code>이다.</p>

<ul>
<li>읽기 - 보여지는 파일의 컨텐츠를 읽을 수 있는 권한. 디렉토리에 대한 읽기 권한은 디렉토리의 컨텐츠 항목들을 볼 수 있게 해준다.</li>
<li>쓰기 - 파일에 대한 쓰기 권한은 그 파일의  컨텐츠를 변경할 수 있게 해준다. 디렉토리의 경우 쓰기 권한은 디렉토리 컨텐츠를 편집할 수 있게 해준다. (예: 파일의 추가/삭제)</li>
<li>실행 - 파일의 경우, 실행 권한은 파일을 실행하거나 프로그램이나 스크립트를 실행할 수 있게 해준다. 디렉토리의 경우 실행 권한은 다른 디렉토리로 변경하거나 그것을 현재 작업 디렉토리로 만들 수 있게 해준다. 사용자는 보통 디폴트 그룹을 가지고 있으나 여러 추가적인 그룹에도 속할 수 있다.</li>
</ul>

<h3>Viewing File Permissions</h3>

<p>파일이나 디렉토리의 권한을 보려면, <code>ls -l [directory/file]</code> 명령어를 사용하라. <strong>[ ]</strong> 안은 실제 파일이나 디렉토리 명으로 바꿔야 한다. 아래는 <code>ls</code> 명령어의 예제 출력이다:</p>

<pre class="terminal">
-rw-r--r-- 1 root root 1031 Nov 18 09:22 /etc/passwd
</pre>

<p>처음 10개의 문자가 접근 권한을 보여준다. 첫 번째 대시(-)는 파일의 형식(d는 디렉토리, s는 특별 파일, -는 보통파일)을 나타낸다. 그다음 세 문자(<strong>rw-</strong>)는 파일에 대한 소유자의 권한을 정의한다. 이 예제에서는 파일 소유자가 읽고 쓰는 권한만을 가진다. 그다음 세 문자(<strong>r–-</strong>)는 파일 소유자와 같은 그룹의 멤버에 대한 권한이다(이 예제에서는 오직 읽을 수만 있다). 그다음 세 문자(<strong>r–-</strong>)는 다른 모든 사용자에 대한 권한을 보여주며 이 예제에서는 읽을 수만 있다.</p>

<h2>Working with Users, Groups, and Directories</h2>

<p>다음 섹션에서는 사용자 계정을 만들고, 지우고, 변경할 때 필요한 명령어로 넘어갈 것이다. 그룹이 다뤄질 것이고, 디렉토리를 만들고 지우는 명령어도 다룰 것이다. 사용자, 그룹, 디렉토리와 작업할 때 필요한 명령어와 설명도 할 것이다.</p>

<h3>Creating and Deleting User Accounts</h3>

<p>새로운 표준 사용자를 만들려면, <code>useradd</code> 명령어를 사용해라. 문법은 다음과 같다:</p>

<pre class="terminal">
useradd [name]
</pre>

<p>useradd 명령어는 다양한 변수를 활용할 수 있으며, 그중 몇 개를 아래 테이블에서 보여준다:</p>

<table><thead>
<tr>
<th>Option</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead><tbody>
<tr>
<td><code>-d [home_dir]</code></td>
<td>home_dir은 사용자의 로그인 디렉토리 값으로 사용된다</td>
<td><code>useradd [name] -d /home/[user&#39;s home]</code></td>
</tr>
<tr>
<td><code>-e [date]</code></td>
<td>계정이 만료<code>expire</code>되는 시간</td>
<td><code>user add [name]** -e &lt;yyyy-mm-dd&gt;</code></td>
</tr>
<tr>
<td><code>-f [inactive]</code></td>
<td>게정이 만료되기 전까지의 날자 수</td>
<td><code>useradd [name] -f [0 or -1]</code></td>
</tr>
<tr>
<td><code>-s [shell]</code></td>
<td>디폴트 쉘<code>shell</code> 타입을 설정한다</td>
<td><code>useradd [name] -s /bin/[shell]</code></td>
</tr>
</tbody></table>

<p><code>passwd</code> 명령어를 사용하여 새 사용자의 패스워드를 설정할 수 있다. 사용자 패스워드를 변경하려면 루트 특권<code>root privileges</code>이 필요하다. 문법은 다음과 같다:</p>

<pre class="terminal">
passwd [username]
</pre>

<p>사용자는 <code>passwd</code> 명령어를 사용하여 언제든지 자신의 패스워드를 변경할 수 있다. 하나의 예제이다:</p>

<pre class="terminal">
$ passwd
Changing password for lmartin.
(current) UNIX password:
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
</pre>

<p>처음으로 관리자가 된 사람이 더 쉽게 사용자 계정을 만드는 방법이 있다. 그러나, 새로운 패키지를 설치해야 한다. Debian/Ubuntu에서의 설치 명령어는 다음과 같다:</p>

<pre class="terminal">
apt-get install adduser
</pre>

<p>adduser 명령어는 자동으로 홈 디렉토리를 만들고 디폴트 그룹과 쉘 등을 설정한다. <code>adduser</code>로 표준 사용자를 만드는 문법은 다음과 같다:</p>

<pre class="terminal">
adduser [name]
</pre>

<p>일단 명령어를 입력하면 연속적인 프롬프트를 받을 것이다. 대부분 정보는 선택사항이다. 그러나 적어도 사용자 이름(예제에서는 cjones)과 패스워드는 입력해야한다.</p>

<pre class="terminal">
root@localhost:~# adduser cjones
  Adding user `cjones' ...
  Adding new group `cjones' (1001) ...
  Adding new user `cjones' (1001) with group `cjones' ...
  Creating home directory `/home/cjones' ...
  Copying files from `/etc/skel' ...
  Enter new UNIX password:
  Retype new UNIX password:
  passwd: password updated successfully
  Changing the user information for cjones
  Enter the new value, or press ENTER for the default
      Full Name []: Chuck Jones
      Room Number []: 213
      Work Phone []: 856-555-1212
      Home Phone []:
      Other []:
  Is the information correct? [Y/n] Y
</pre>

<p>보안<code>security</code>는 언제나 매우 심각하게 받아들여져야 한다. 각 계정에 오직 하나뿐인 패스워드를 사용할 것을 강력하게 추천한다. 절대 자신의 패스워드를 다른 사용자와 공유하거나 주지 말라.</p>

<p>사용자 계정을 제거하려면 다음 명령어를 입력한다:</p>

<pre class="terminal">
userdel [name]
</pre>

<p>위의 명령어는 사용자의 계정을 지우기만 한다. 사용자의 파일과 홈 디렉토리는 지워지지 않는다.</p>

<p>사용자와 홈 폴더와 파일을 지우려면 이 명령어를 사용하라:</p>

<pre class="terminal">
userdel -r [name]
</pre>

<h3>Understanding Sudo</h3>

<p>루트<code>root</code>는 슈퍼 사용자이며, 한 시스템에 대한 어떤 일이든 할 수 있는 능력을 갖췄다. 그러므로 잠재적 손상을 보호하기 위해 sudo는 루트에서 사용되어야 한다. sudo는 사용자와 그룹에게 그들이 일반적으로 사용할 수 없는 명령어에 접근할 수 있게 한다. sudo는 사용자가 root로 로그인하지 않고도 관리자 특권을 가질 수 있게 한다. sudo 명령어의 예제는 다음과 같다:</p>

<pre class="terminal">
sudo apt-get install <package>
</pre>

<p>sudo를 사용하기 전에 자신의 배포판에 없다면 설치하여야 한다. Debian에서의 명령어는 다음과 같다:</p>

<pre class="terminal">
apt-get install sudo
</pre>

<p>CentOS에서의 명령어는 다음과 같다:</p>

<pre class="terminal">
yum install sudo
</pre>

<p>한 사용자에게 sudo 능력을 제공하려면, 사용자 이름을 sudoers 파일에 추가하여야 한다. 이 파일은 매우 중요하며 텍스트 에디터에서 직접 편집하지 않아야 한다. sudoers 파일을 정확하게 편집하지 않으면 시스템에 접근할 수 없게 될 것이다.</p>

<p>그러므로 sudoers 파일을 편집하려면 <code>visudo</code> 명령어를 사용해야 한다. 커맨드 라인에서 시스템에 로그인하고 <code>visudo</code> 명령어를 입력해라.</p>

<p>아래는 sudoers 파일에서 sudo 접근을 할 수 있는 사용자를 보여주는 부분이다.</p>

<pre class="terminal">
# User privilege specification
root    ALL=(ALL:ALL) ALL
cjones  ALL=(ALL:ALL) ALL
kbrown  ALL=(ALL:ALL) ALL
lmartin ALL=(ALL:ALL) ALL
</pre>

<p>자신의 사용자 계정에 sudo 특권을 준 다음, sudoers 파일을 저장하고 루트에서 로그아웃한다. 이제 자신의 사용자 계정으로 로그인하여 sudo 접근할 수 있는 특권을 테스트하라. 새 사용자가 sudo 접근이 필요하다면, 이제 자신의 계정으로 아래 명령으로 sudoers 파일을 편집할 수 있다.</p>

<pre class="terminal">
sudo visudo
</pre>

<h3>Working with Groups</h3>

<p>리눅스는 그룹을 사용자들을 조직하는 방법의 하나로 사용한다. 그룹은 주로 보안 조치의 하나로서 계정들의 집합을 조직한다. 그룹 멤버십의 제어는 <code>/etc/group</code> 파일을 통해 관리한다. 모든 사용자는 디폴트<code>default</code> 또는 primary 그룹을 가진다. 사용자가 로그인하면 그룹 멤버십은 primary 그룹으로 설정된다. 이것은 사용자가 프로그램을 실행하거나 파일을 만들 때, 그 파일과 실행된 프로그램은 사용자의 현재 그룹 멤버십과 결합하는 것을 의미한다. 사용자가 다른 그룹의 멤버이고 접근 권한이 설정되어 있다면, 다른 그룹의 파일에 접근할 수 있다. 다른 그룹의 프로그램을 실행하거나 파일을 만들려면, 그 사용자는 <code>newgrp</code> 명령어를 실행하여 그 그룹으로 전환해야 한다. newgrp 명령어의 예제는 다음과 같다:</p>

<pre class="terminal">
$ newgrp [marketing]
</pre>

<p><code>/etc/group</code> 파일 안의 <strong>marketing</strong> 그룹의 멤버인 사용자가 위와 같은 명령어를 입력하면, 현재 그룹 멤버십이 변경된다. 이제부터 만들어지는 모든 파일은 사용자의 primary 그룹이 아닌 <strong>marketing</strong> 그룹과 결합한다는 것은 중요하다. 사용자는 <code>chgrp</code> 명령어를 사용하여 그들의 그룹을 변경할 수도 있다. chgrp 명령어의 예제는 다음과 같다:</p>

<pre class="terminal">
$ chgrp [newgroup]
</pre>

<h3>Creating and Removing Directories</h3>

<p>디렉토리를 만드는 명령어는:</p>

<pre class="terminal">
mkdir [directory name]
</pre>

<p>디렉토리를 만들면서 동시에 권한을 설정하려면 다음 옵션과 문법을 사용해라:</p>

<pre class="terminal">
mkdir -m a=rwx [directory name]
</pre>

<p><strong>-m</strong> 옵션은 mode의 줄임말이고, <strong>a=rwx</strong>은 모든 사용자가 디렉토리에 읽기, 쓰기, 실행 권한을 갖는다는 것을 뜻한다. mkdir 명령어의 모든 옵션의 완전한 목록을 보려면 명령어 프롬프트에서 <code>man mkdir</code>을 입력한다.</p>

<p>파일을 제거하는 명령어는:</p>

<pre class="terminal">
rm [file]
</pre>

<p>디렉토리를 제거하려면:</p>

<pre class="terminal">
rm -r [directory name]
</pre>

<p>디렉토리를 제거하면 그 안의 모든 파일도 제거된다는 것을 알아두어라.</p>

<h3>Changing Directory and File Permissions</h3>

<p>파일 권한과 파일과 디렉토리의 소유권을 보려면 <code>ls -al</code> 명령어를 사용한다. <code>a</code> 옵션은 숨겨진 파일 또는 모든 파일을 보여주는 것이고, <code>l</code> 옵션은 긴 설명의 목록<code>long listing</code>을 보여준다. 다음과 같이 출력된다:</p>

<pre class="terminal">
drwxr-xr-x 2 user user 4096 Jan  9 10:11 documents
-rw-r--r-- 1 user user  675 Jan  7 12:05 .profile
drwxr-xr-x 4 user user 4096 Jan  7 14:55 public
</pre>

<p>열 개의 문자와 대시로 된 첫 컬럼은 파일/디렉토리의 권한을 보여준다. (하나의 숫자로 된) 두번째 컬럼은 디렉토리에 포함된 파일/디렉토리의 수를 말한다. 그다음 컬럼은 소유자를 말하고, 그다음은 그룹명, 크기, 최종 접근 날짜와 시간, 마지막은 파일의 이름이다. 예를 들면, 위의 출력에서 첫번째 줄을 상세하게 설명하면 다음과 같다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">``drwxr-xr-x`` 은 권한이다.
``2`` 는 파일/디렉토리의 수이다.
``user`` 은 소유자
``user`` 은 그룹
``4096`` 은 크기
``Jan  9 10:11`` 은 최종 접근 날짜/시간
``documents`` 은 디렉토리
</code></pre></div>
<blockquote>
<h4>Note</h4>

<p>디렉토리 자체도 하나의 파일이기 때문에, 모든 디렉토리는 항상 <code>4096</code>의 크기를 보여준다. 이것은 디렉토리 컨텐츠들의 크기를 반영하지는 않는다.</p>
</blockquote>

<h3>Chmod Command</h3>

<p><code>chmod</code>는 모드 변경(change mode)의 준말이다. chmod는 파일과 디렉토리의 권한을 변경할 때 사용한다. <code>chmod</code> 명령어는 권한을 설정하기 위해 (팔진법으로 알려진) 문자나 숫자와 함께 사용된다. chmod와 함께 사용되는 문자는 아래 표와 같다:</p>

<table><thead>
<tr>
<th>Letter</th>
<th>Permission</th>
</tr>
</thead><tbody>
<tr>
<td>r</td>
<td>읽기<code>read</code></td>
</tr>
<tr>
<td>w</td>
<td>쓰기<code>write</code></td>
</tr>
<tr>
<td>x</td>
<td>실행<code>execute</code></td>
</tr>
<tr>
<td>X</td>
<td>실행<code>execute</code> (파일이 디렉토리일 경우에만)</td>
</tr>
<tr>
<td>s</td>
<td>실행할 때 사용자와 그룹 ID 설정(set)</td>
</tr>
<tr>
<td>t</td>
<td>swap 장치에 프로그램 텍스트 저장</td>
</tr>
<tr>
<td>u</td>
<td>소유자의 파일에 대한 현재 권한</td>
</tr>
<tr>
<td>g</td>
<td>같은 그룹(group)에 있는 사용자의 파일에 대한 현재 권한</td>
</tr>
<tr>
<td>o</td>
<td>그룹에 있지 않은 사용자(others)의 파일에 대한 현재 권한</td>
</tr>
</tbody></table>

<p>파일 목록의 첫 번째 컬럼의 첫 문자가 디렉토리나 파일을 나타낸다는 것은 중요하다. 나머지 9개 문자는 파일/디렉토리의 권한이다. 첫 세 문자는 사용자, 다음 세 개는 그룹, 마지막 세 개는 다른 사용자(others)에 대한 것이다. <strong>drwxrw-r–-</strong>을 예로 들어 풀면 다음과 같다:</p>

<blockquote>
<p><strong>d</strong> 는 디렉토리<br><br>
<strong>rwx</strong> 사용자가 읽기, 쓰기, 실행 권한을 가졌다<br><br>
<strong>rw-</strong> 그룹은 읽기, 쓰기 권한을 가졌다<br><br>
<strong>r–-</strong> 다른 사용자(others)는 읽기 권한만 가졌다  </p>
</blockquote>

<p>대시(-)는 권한이 제거된 것을 나타낸다. 그러므로 다른 사용자에 대한 r--은 읽기 권한만 가졌고, 쓰기와 실행 권한은 제거된 것이다.</p>

<p>반대로 플러스 사인(+)은 권한을 주는 것과 같다: <code>chmod u+r,g+x &lt;filename&gt;</code></p>

<p>위의 예제는 다음과 같이 해석한다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">u is for user
r is for read
g is for group
x is for execute
</code></pre></div>
<p>다른 말로, 그 파일에 대하여 사용자에게는 읽기 권한을 주었고 그룹에는 실행 권한을 주었다. 한 번의 설정에서 여러 권한을 줄 때는 설정 사이에 쉼표(,)를 넣어야 한다.</p>

<h3>Chmod Octal Format</h3>

<p>팔진법 형식을 사용하려면 파일이나 디렉토리 각 부분에 대한 권한을 계산해야 한다. 위에서 언급 첫 10문자는 팔진법으로 네 개의 숫자에 해당한다. 실행 권한은 숫자 (1)과 같고, 쓰기 권한은 숫자 (2)와 같고, 읽기 권한은 숫자 (4)와 같다. 그러므로 팔진법 형식을 사용할 때는 0과 7 사이의 숫자를 계산할 필요가 있다. 설명을 위해 아래 표를 제공한다:</p>

<table><thead>
<tr>
<th style="text-align: center">Octal Value</th>
<th style="text-align: center">Read</th>
<th style="text-align: center">Write</th>
<th style="text-align: center">Execute</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">7</td>
<td style="text-align: center">r</td>
<td style="text-align: center">w</td>
<td style="text-align: center">x</td>
</tr>
<tr>
<td style="text-align: center">6</td>
<td style="text-align: center">r</td>
<td style="text-align: center">w</td>
<td style="text-align: center">-</td>
</tr>
<tr>
<td style="text-align: center">5</td>
<td style="text-align: center">r</td>
<td style="text-align: center">-</td>
<td style="text-align: center">x</td>
</tr>
<tr>
<td style="text-align: center">4</td>
<td style="text-align: center">r</td>
<td style="text-align: center">-</td>
<td style="text-align: center">-</td>
</tr>
<tr>
<td style="text-align: center">3</td>
<td style="text-align: center">-</td>
<td style="text-align: center">w</td>
<td style="text-align: center">x</td>
</tr>
<tr>
<td style="text-align: center">2</td>
<td style="text-align: center">-</td>
<td style="text-align: center">w</td>
<td style="text-align: center">-</td>
</tr>
<tr>
<td style="text-align: center">1</td>
<td style="text-align: center">-</td>
<td style="text-align: center">-</td>
<td style="text-align: center">x</td>
</tr>
<tr>
<td style="text-align: center">0</td>
<td style="text-align: center">-</td>
<td style="text-align: center">-</td>
<td style="text-align: center">-</td>
</tr>
</tbody></table>

<p>팔진법 형식이 이해하기 어려운 것 같으나, 일단 요점을 익히면 사용하기 쉽니다. 그러나 r, w, x로 권한을 설정하는 것이 더 쉽다. 아래는 권한을 설정할 때 문자와 팔진법 형식을 사용하는 예제들이다.</p>

<blockquote>
<p>Sample syntax: <code>chmod [octal or letters] [file/directory name]</code><br>
Letter format: <code>chmod go-rwx Work</code> (그룹과 others에게 rwx 권한을 취소)</p>
</blockquote>

<p>위의 chmod 명령어 이후의 <code>ls -al</code>의 출력은 다음과 같이 보일 것이다:</p>

<pre class="terminal">
dr-------- 2 user user 4096 Dec 17 14:38 Work
</pre>

<p>팔진법 형식: <code>chmod 444 Work</code></p>

<p>chmod 명령어 이후의 <code>ls -al</code>의 출력은 다음과 같이 보일 것이다:</p>

<pre class="terminal">
dr--r--r-- 2 user user 4096 Dec 17 14:38 Work
</pre>

<p>아래 팔진법 테이블은 권한에 해당하는 숫자를 보여준다.</p>

<table><thead>
<tr>
<th style="text-align: left">Permission string</th>
<th style="text-align: center">Octal code</th>
<th>Meaning</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left">rwxrwxrwx</td>
<td style="text-align: center">777</td>
<td>모든 사용자에게 읽기/쓰기/실행 권한.</td>
</tr>
<tr>
<td style="text-align: left">rwxr-xr-x</td>
<td style="text-align: center">755</td>
<td>모든 사용자에게 읽기/실행 권한. 소유자는 쓰기 권한도.</td>
</tr>
<tr>
<td style="text-align: left">rwxr-x---</td>
<td style="text-align: center">750</td>
<td>소유자와 그룹에 읽기/실행 권한. 소유자는 쓰기 권한도. 소유자나 그룹의 멤버가 아닌 사용자는 접근 불가능.</td>
</tr>
<tr>
<td style="text-align: left">rwx------</td>
<td style="text-align: center">700</td>
<td>소유자만 읽기/쓰기/실행 권한. 다른 사용자는 접근 불가능.</td>
</tr>
<tr>
<td style="text-align: left">rw-rw-rw-</td>
<td style="text-align: center">666</td>
<td>모든 사용자에게 읽기/쓰기 권한. 누구도 실행 불가능.</td>
</tr>
<tr>
<td style="text-align: left">rw-rw-r--</td>
<td style="text-align: center">664</td>
<td>소유자와 그룹에 읽기/쓰기 권한. 다른 사용자는 읽기 권한만.</td>
</tr>
<tr>
<td style="text-align: left">rw-rw----</td>
<td style="text-align: center">660</td>
<td>소유자와 그룹에 읽기/쓰기 권한. 다른 사용자는 접근 불가능.</td>
</tr>
<tr>
<td style="text-align: left">rw-r--r--</td>
<td style="text-align: center">644</td>
<td>소유자에게 읽기/쓰기 권한. 다른 사용자는 읽기 권한만.</td>
</tr>
<tr>
<td style="text-align: left">rw-r-----</td>
<td style="text-align: center">640</td>
<td>소유자에게 읽기/쓰기 권한. 그룹은 읽기 권한만. 다른 사용자는 접근 불가능.</td>
</tr>
<tr>
<td style="text-align: left">rw-------</td>
<td style="text-align: center">600</td>
<td>소유자에게 읽기/쓰기 권한. 다른 사람 모두 접근 불가능</td>
</tr>
<tr>
<td style="text-align: left">r--------</td>
<td style="text-align: center">400</td>
<td>소유자에게 읽기 권한. 다른 사람 모두 접근 불가능.</td>
</tr>
</tbody></table>

<h3>Additional File Permissions</h3>

<p>가장 일반적인 읽기/쓰기/실행 파일 권한에 더하여, 유용하다고 볼만한 몇 가지 추가적인 모드가 있다. 특히, <em>+t</em> 모드(<em>sticky bit</em>)와 <em>+s</em> 모드(<em>setuid bit</em>) 등은 멀티유저 상황에서 파일과 실행자들을 설명한다.</p>

<p>파일이나 디렉토리를 <em>sticky bit</em>이나 <em>+t</em> 모드로 설정하면 소유자(혹은 root)만 파일을 지울 수 있다는 것을 뜻한다, 사용자가 그룹 멤버십이나 오너십으로 이 파일에 쓰기 접근을 가지고 있음에도 불구하고. 이것은 많은 사용자가 파일들에 쓰기 접근을 공유하고 있는 그룹이 소유하고 있는 파일이나 디렉토리의 경우에 유용하다.</p>

<p><code>/root/sticky.txt</code>라는 파일에 sticky bit을 설정하려면 다음 명령을 내린다:</p>

<pre class="terminal">
chmod +t /root/sticky.txt
</pre>

<p>파일에서 sticky bit을 제거하려면, <code>chmod -t</code> 명령어를 사용해라. sticky bit을 변경하려면 root 거나 파일 소유자이어야 한다는 것에 주의해라. root 사용자는 sticky bit의 상태와 관계없이 파일을 지울 수 있다.</p>

<p><em>setuid</em> bit나 <em>+s</em>는, 사용자들이 소유자 권한으로 파일을 실행할 수 있도록 설정하는 경우이다. 예를 들면, <code>root</code> 사용자와 <code>marketing</code> 그룹이 <code>work</code> 파일을 소유하고 있다면, <code>marketing</code> 그룹은 마치 그들이 root 사용자인 것처럼 <code>work</code> 프로그램을 실행할 수 있다. 이것은 어떤 경우에는 잠재적인 보안 위험을 일으킬 수 있으며, 실행자들은 <code>+s</code> 플래그를 주기 전에 적절하게 평가해야 한다. <code>/usr/bin/work</code>라는 파일에 <code>+s</code> bit을 설정하는 명령어는 다음과 같다:</p>

<pre class="terminal">
chmod g+s /usr/bin/work
</pre>

<p>파일의 오너십에 대한 <em>+s</em> 모드와 대비하여, 디렉토리에 대한 <em>+s</em> 모드의 효과는 약간 다르다. <em>+s</em> 디렉토리에 생성된 파일은 - 파일을 생성한 사용자와 그들의 디폴트 그룹의 오너십이 아닌 - 디렉토리 사용자와 그룹의 오너십을 받는다. 디렉토리에 <em>setguid</em> (group id) 옵션을 설정하려면 다음 명령어를 사용한다:</p>

<pre class="terminal">
chmod g+s /var/doc-store/
</pre>

<p><code>/var/doc-store</code>라는 디렉토리에 <em>setuid</em> (user id)를 설정하려면 다음 명령을 내린다:</p>

<pre class="terminal">
chmod o+s /var/doc-store/
</pre>

<h3>Changing File Ownership</h3>

<p>기본적으로 모든 파일은 그것을 만든 사용자와 그 사용자의 디폴트 그룹에 의해 &quot;소유된다&quot;. 파일의 오너십을 변경하려면 <code>chown user:group /path/to/file</code> 형식으로 <code>chown</code> 명령어를 사용한다. 다음 예제에서는, &quot;list.html&quot; 파일의 오너십이 &quot;marketing&quot; 그룹의 &quot;cjones&quot;로 변경된다.</p>

<pre class="terminal">
chown cjones:marketing list.html
</pre>

<p>디렉토리와 그 안의 모든 파일의 오너십을 변경하려면, <code>-R</code> 플래그로 recursive 옵션을 사용해라. 다음 예제에서는, <code>/srv/smb/leadership/</code>의 오너십을 &quot;marketing&quot; 그룹의 &quot;cjones&quot;로 변경한다.</p>

<pre class="terminal">
chown -R cjones:marketing /srv/smb/leadership/
</pre>

<h2>Leveraging Users and Groups</h2>

<p>많은 경우에 사용자 권한은 자신의 시스템에 어떤 직접적인 상호작용 없이 더 훌륭한 보안을 제공하곤 한다. 많은 운영체제는 설치 과정 동안 다른 패키지에 대한 특정 시스템 사용자 계정을 만든다.</p>

<p>Best practice는 각 사용자에게 여러분의 시스템에 대한 그들 각각의 로그인을 주는 것이다. 이것은 각각의 사용자의 파일을 다른 모든 사용자로부터 보호한다. 게다가 사용자에게 특정 계정을 사용하는 것은 - 특히, <code>sudo</code>와 같은 툴과 결합할 경우 - 더 정확한 시스템 로깅을 할 수 있다. 최대의 보안을 위해서 한 명 이상이 한 사용자 계정의 패스워드를 아는 상황을 피하는 것을 권한다.</p>

<p>대비하여, 그룹은 여러 독립 사용자 계정이 협업하고 파일을 공유할 수 있게 한다. 일반적인 업무 기준(예: 웹 에디터, 공헌자, 컨텐츠 제출자, 지원자)으로 시스템에 그룹을 만들려면, 관련 그룹에 관련 사용자를 추가하라. 이 사용자들은 - 파일을 공유하지 않고도 - 같은 설정의 파일들을 편집하고 실행할 수 있다. 770과 740 파일 권한과 함께 <code>chown</code> 명령어를 사용하면 이 목표를 달성할 수 있다.</p>

<h2>More Information</h2>

<p>You may wish to consult the following resources for additional information on this topic. While these are provided in the hope that they will be useful, please note that we cannot vouch for the accuracy or timeliness of externally hosted materials.</p>

<ul>
<li><a href="http://www.cae.wisc.edu/cae-account-management/">User Account and Group Management @ UWISC’s Center for Computer Aided Engineering</a></li>
<li><a href="http://www.debianadmin.com/users-and-groups-administration-in-linux.html">Users and Groups Administration in Linux @ DebianAdmin</a></li>
<li><a href="http://www.onlineconversion.com/html_chmod_calculator.htm">Online Chmod Calculator</a></li>
</ul>

<p>This guide is published under a <a href="http://creativecommons.org/licenses/by-nd/3.0/us/">CC BY-ND 3.0</a> license.</p>

<h2>역자 참고 링크</h2>

<ul>
<li><a href="http://root.so/archives/51">리눅스 파일 퍼미션 | Linux System Engineer&#39;s Blog</a></li>
<li><a href="http://www.linuxfocus.org/Korean/January1999/article77.html">리눅스포커스 : 파일접근권한</a></li>
<li><a href="http://bit.ly/1Kvjtga">리눅스 - 소유권과 허가권 알아보기</a> : SetUID(4),SetGID(2),sticky bit(1)에 대한 설명이 명확함.</li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[훌륭한 자바스크립트 개발자 되는 법]]></title>
            <link>/blog/2015/06/18/great-js-developer/</link>
            <pubDate>Thu, 18 Jun 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[javascript]]></category>
        
            <category><![CDATA[learning]]></category>
        
            <category><![CDATA[resource]]></category>
        
            <guid>/blog/2015/06/18/great-js-developer/</guid>
            <description>
                <![CDATA[목차 원문 : How to Become a Great JavaScript Developer 몇가지 참고할 것이 있어서 메모하다보니 조금 길어져서 포스팅합니다. 전체 내용은 아니니 흥미가 가시는 분은 원문을 보시길 바랍니다. Read Books 웹기술의 전문가가 되려면 책을 읽어라. 웹은 혼란스러운 미디어다. 자바스크립트 바이블인 JavaScript: The Good Parts를 읽기 시작해라. JavaScript: The Definitive Guide도 필수이고...]]>
            </description>
            <content:encoded>
                <![CDATA[<div id="toc"><p class="toc_title">목차</p></div>

<p>원문 : <a href="http://blog.ustunozgur.com/javascript/programming/books/videos/2015/06/17/how_to_be_a_great_javascript_software_developer.html">How to Become a Great JavaScript Developer</a></p>

<p>몇가지 참고할 것이 있어서 메모하다보니 조금 길어져서 포스팅합니다. 전체 내용은 아니니 흥미가 가시는 분은 원문을 보시길 바랍니다.</p>

<h2>Read Books</h2>

<p>웹기술의 전문가가 되려면 책을 읽어라. 웹은 혼란스러운 미디어다.</p>

<p>자바스크립트 바이블인 <a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript: The Good Parts</a>를 읽기 시작해라. <a href="http://shop.oreilly.com/product/9780596805531.do">JavaScript: The Definitive Guide</a>도 필수이고 참고서로 가지고 있어야 할 것이다. JQuery 만든 존 레식의 <a href="http://www.manning.com/resig/">Secrets of the JavaScript Ninja</a>도 뛰어나다. 온라인에서 무료 공개되는 좋은 책을 찾는다면 <a href="https://leanpub.com/javascript-allonge/">JavaScript Allongé</a>, <a href="https://github.com/getify/You-Dont-Know-JS">You Dont Know JS</a>, <a href="http://eloquentjavascript.net/">Eloquent JavaScript</a>를 봐라. 책은 아니지만 모질라 재단의 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide">JavaScript Guide</a>도 좋다.</p>

<h2>Learn, Use and Read Libraries</h2>

<p>책이 언어를 읽는 법을 가르쳐 준다면 라이브러리는 말하는 법을 가르쳐준다. 라이브러리와 함께 할 수 있는 두 가지 중요한 것은 라이브러리를 사용하는 것과 그 소스코드를 읽는 것이다.</p>

<p>라이브러리를 사용하려면 jQuery, Backbone, underscore 그리고 React, Angular, Ember 중 하나와 숙지해라. 이 라이브러리들을 사용해야 한다는 것이 아니라 괜츈한 자바스크립트 개발자는 적어도 이것들을 어느 정도 경험하고 있다.</p>

<p>두번째 중요한 소스코드 읽기는 아름답게 쓰여진 Backbone과 underscore을 추천한다. underscore를 읽고 이해하는 것은 functional programming 스킬을 향상시킬 것이다. 난 경험이 없지만 여러 개발자가 추천하는 것 중에서는 mootols이다.</p>

<p>React, Ember와 같은 것을 이해하는 것은 더 어렵지만 노력할 가치가 있다. 훑어봐서 코드 베이스 구조와 패턴을 알아볼 필요가 있다. 다른 사용하고 읽어볼 유명한 라이브러리는 d3, highcharts, moment.js 등이 있다.</p>

<h2>Do Exercises and Ask Questions to Yourself</h2>

<p>좋은 자바스크립트 개발자가 되는 다음 단계는 많은 연습을 하는 것이다. 이상적으로 이 연습들은 DOM이 아닌 언어에 초첨을 맞추는 것이다. 작게 하고, node.js에서 충분한 연습을 하라. Do katas and go through different ways of using JavaScript: closures, prototypes, array-extras (map, filter) etc. 연습하면서 항상 자바스크립의 기초 아이디어의 목록을 염두에 둬야 한다.</p>

<p>내 친구 책도 괜찮다. <a href="http://www.apress.com/9781590599082">Pro JavaScript Design Patterns - Apress IT eBooks</a></p>

<p>다음과 같은 질문에 답해보라: How does prototypal inheritance work? What defines a closure? How does the meaning of this keyword change? How does one use apply/bind/map/filter/call?</p>

<p>“What if?” 시나리오를 시도해보라. 예를 들면 “What is the meaning of “this” if I use bind twice? How does jQuery make sure that the this keyword refers to the jQuery object and not the global object? How does this library achieve a certain feature?”</p>

<h2>Learn the standards</h2>

<p>다음 단계는 EcmaScript 표준에 대해 더 파고드는 것이다. 동시에 자바스크립트의 곧 나올 기능에 대해서도 공부해봐라. 요즘엔 promises, modules, generators, comprehensions와 같은 새로운 기능이 밀려들고 있다. <a href="https://leanpub.com/understandinges6">Understanding ECMAScript 6</a>, <a href="http://exploringjs.com/">Exploring ES6</a>이 도움될 것이다.</p>

<h2>Use Resources on the Web</h2>

<p>처음에 웹을 사용하는 위험에 대해 말했지만 마지막 추천은 웹에서 베스트 리소스를 얻는 법이다. 해커뉴스는 좋은 소스지만 계속 쫓아가기엔 시간이 많이 들고, 노이즈 비율도 높다. 대신 JavaScript Weekly와 같은 주간 뉴스 다이제스트를 겨냥해라. 영향력있는 자바스크립트 개발자의 트위터 계정을 팔로해라. Tuts+의 <a href="http://code.tutsplus.com/articles/33-developers-you-must-subscribe-to-as-a-javascript-junkie--net-18151">팔로할만한 33 자바스크립트 개발자</a>가 좋은 시작점이 될 것이다. 다른 웹 리소스는 <a href="http://www.toptal.com/section/front-end">Toptal</a>, <a href="http://rmurphey.com/">Adventures in JavaScript Development</a>, <a href="http://rmurphey.com/blog/2015/03/23/a-baseline-for-front-end-developers-2015/">A Baseline for Front-End [JS] Developers: 2015</a>, <a href="http://www.nczonline.net/">NCZOnline</a> 등이다.</p>

<p>또 다른 중요한 웹 리소스는 컨퍼런스 동영상과 교육 동영상이다. 컨퍼런스는 JSConf 시리즈가 고퀄이다. 교육 동영상은 Pluralsight를 강력히 추천한다.(그 사이트와 관련없다.)</p>

<p>이 글에 대한 토론은 <a href="https://news.ycombinator.com/item?id=9731230">How to Become a Great JavaScript Developer | Hacker News</a>에서 볼 수 있다.</p>

<h2>추가 링크</h2>

<ul>
<li><a href="https://item4.github.io/2015-10-12/How-to-Become-a-Great-JavaScript-Developer.html">훌륭한 JavaScript 개발자가 되는 법</a> : 저는 요약 번역을 했는데 풀 번역을 하신 분들이 생겼네요.</li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[코드캐더미로 배우는 레일즈 기초 3부]]></title>
            <link>/blog/2015/05/23/rails-codecademy-3/</link>
            <pubDate>Sat, 23 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[codecademy]]></category>
        
            <category><![CDATA[course]]></category>
        
            <category><![CDATA[rails]]></category>
        
            <category><![CDATA[ruby]]></category>
        
            <guid>/blog/2015/05/23/rails-codecademy-3/</guid>
            <description>
                <![CDATA[코드캐더미로 배우는 레일즈 기초 2부에서 두 개의 모델을 사용하여 데이터를 저장하는 앱을 만들었다. 데이터 간에 one-to-many 관계를 만들기 위해 has_many / belongs_to 를 사용하였다. MovieApp 영화는 배역을 맡은 많은 배우가 있고, 각 배우는 역시 출연한 많은 영화가 있다. 이러한 데이터를 모델링하기 위해서는 many-to-many 관계가 필요하다. 영화 웹사이트를 위한 레일즈앱을 만들어...]]>
            </description>
            <content:encoded>
                <![CDATA[<p><a href="http://nolboo.github.io/blog/2015/05/17/rails-codecademy-2/">코드캐더미로 배우는 레일즈 기초 2부</a>에서 두 개의 모델을 사용하여 데이터를 저장하는 앱을 만들었다. 데이터 간에 one-to-many 관계를 만들기 위해 <code>has_many</code> / <code>belongs_to</code> 를 사용하였다.</p>

<h2>MovieApp</h2>

<p>영화는 배역을 맡은 많은 배우가 있고, 각 배우는 역시 출연한 많은 영화가 있다. 이러한 데이터를 모델링하기 위해서는 many-to-many 관계가 필요하다. 영화 웹사이트를 위한 레일즈앱을 만들어 보자.</p>

<pre class="terminal">
    rails new MovieApp
    cd MovieApp
    bundle install
</pre>

<h3>Model</h3>

<p>Movie, Actor, Part 모델을 제너레이트한다.</p>

<pre class="terminal">
    rails generate model Movie
    rails generate model Actor
    rails generate model Part
</pre>

<p><code>app/models/movie.rb</code>에 다음 매서드를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">has_many</span> <span class="ss">:parts</span> 
<span class="n">has_many</span> <span class="ss">:actors</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:parts</span>
</code></pre></div>
<p><code>Movie</code> 모델과 <code>Actor</code> 모델을 <code>Part</code> 모델을 통해서 연결하기 위해 <code>has_many :through</code>를 사용한다. <code>has_many :through</code>가 영화와 배우 간의 many-to-many 관계를 만든다.</p>

<p><code>app/models/actor.rb</code>에 다음 매서드를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">has_many</span> <span class="ss">:parts</span> 
<span class="n">has_many</span> <span class="ss">:movies</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:parts</span>
</code></pre></div>
<p><code>app/models/part.rb</code>에 다음 매서드를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">belongs_to</span> <span class="ss">:movie</span> 
<span class="n">belongs_to</span> <span class="ss">:actor</span>
</code></pre></div>
<p><img src="http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/has-many-through.svg" alt=""></p>

<p>계속해서 <code>db/migrate/</code> 안의 movies 테이블을 위한 마이그레이션 파일에 다음 컬럼을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:title</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:image</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:release_year</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:plot</span>
</code></pre></div>
<p>actors 테이블을 위한 마이그레이션 파일에 다음 컬럼을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:first_name</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:last_name</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:image</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:bio</span>
</code></pre></div>
<p>parts 테이블을 위한 마이그레이션 파일에 다음을 추가하여 영화와 배우 테이블을 가리키는 foreign keys를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:movie</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span> 
<span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:actor</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span>
</code></pre></div>
<p>세 가지 테이블로 데이터베이스를 업데이트한다:</p>

<pre class="terminal">
    rake db:migrate
    rake db:migrate:status // 세 모델이 만들어졌는지 상태를 확인할 수 있다.
</pre>

<p><a href="https://github.com/nolboo/rails-codecademy-MovieApp/blob/master/db/seeds.rb">미리 준비된 seed.rb</a>로 영화와 배우에 대한 데이터를 공급한다:</p>

<pre class="terminal">
    rake db:seed
</pre>

<h3>Route</h3>

<pre class="terminal">
    rails generate controller Movies
</pre>

<p>라우터 파일 <code>config/routes.rb</code>에 <code>/movies</code> URL을 Movies 컨트롤러의 index 액션을 매핑한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/movies&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;movies#index&#39;</span>
</code></pre></div>
<p>Movies 컨트롤러 안에 모든 영화를 보여주는 <code>index</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@movies</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">all</span>
<span class="k">end</span>
</code></pre></div>
<p><code>app/views/movies/index.html.erb</code>를 만들고 뷰에 해당하는 코드를 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Interstellar<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;p&gt;</span>Former NASA pilot Cooper (Matthew McConaughey) and a team of researchers travel across the galaxy to find out which of three planets could be mankind&#39;s new home.<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Read More<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>Popular Films<span class="nt">&lt;/h2&gt;</span>

    <span class="err">&lt;</span>% @movies.each do |m| %&gt;
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;movie&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>%= image_tag m.image %&gt;
      <span class="nt">&lt;h3&gt;</span><span class="err">&lt;</span>%= m.title %&gt;<span class="nt">&lt;/h3&gt;</span>
      <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= m.release_year %&gt;<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>스타일링을 위해 <a href="https://github.com/nolboo/rails-codecademy-MovieApp/blob/master/app/assets/stylesheets/application.css">applcation.css</a>를 입력한다.</p>

<p>이제 <code>http://localhost:3000/movies</code>을 방문하면 아래와 같은 멋진 앱이 뜬다.</p>

<p><img src="https://c1.staticflickr.com/9/8869/17703985109_63e7ed1ae9_b.jpg" alt=""></p>

<p>라우트 파일에 <code>/movies/1</code>과 같은 URL에 대한 요청을 Movie 컨트롤러의 <code>show</code> 액션으로 보내고, 이 라우트를 &quot;movie&quot;라고 부른다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/movies/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;movies#show&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:movie</span>
</code></pre></div>
<p>Movies 컨트롤러 파일에 특정 영화와 그 배우들을 보여주는 <code>show</code> 액션을 추가한다.</p>

<ul>
<li><code>id</code>로 영화를 찾기 위해 <code>Movie.find</code>를 먼서 사용하고,</li>
<li>영화에 속한 모든 배우를 가져와서, <code>@actors</code>에 저장한다:</li>
</ul>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">show</span>
  <span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
  <span class="vi">@actors</span> <span class="o">=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">actors</span>
<span class="k">end</span>
</code></pre></div>
<p><code>app/view/movies/show.html.erb</code>를 만들고 다음을 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main movie-show&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;movie&quot;</span><span class="nt">&gt;</span>

      <span class="c">&lt;!-- Display the movie&#39;s info here --&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;info&quot;</span><span class="nt">&gt;</span>
        <span class="err">&lt;</span>%= image_tag @movie.image %&gt;
        <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;movie-title&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @movie.title %&gt;<span class="nt">&lt;/h3&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;movie-release-year&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @movie.release_year %&gt;<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;movie-plot&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @movie.plot %&gt;<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;h2&gt;</span>Cast<span class="nt">&lt;/h2&gt;</span>
    <span class="err">&lt;</span>% @actors.each do |actor| %&gt;
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actor&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>%= image_tag actor.image %&gt;
      <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;actor-name&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= actor.first_name %&gt; <span class="err">&lt;</span>%= actor.last_name %&gt;<span class="nt">&lt;/h3&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;actor-bio&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= actor.bio %&gt;<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><code>app/views/movies/index.html.erb</code>의 movie&#39;s plot 밑에 <code>link_to</code>를 이용하여 &quot;Learn more&quot; 텍스트 링크를 만들고, <code>show</code> 라우트를 &quot;movie&quot;로 명명하였기 때문에 레일즈가 만들어주는 <code>movie_path</code> 헬퍼 매서드를 사용하여 각 영화의 패스로 URL을 제너레이트해주는 것을 이용한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= movie.plot %&gt;<span class="nt">&lt;/p&gt;</span>
<span class="err">&lt;</span>%= link_to &quot;Learn more&quot;, movie_path(movie) %&gt;
</code></pre></div>
<ul>
<li>여기서 <code>m</code> 변수를 <code>movie</code> 변수로 갑자기 바꿨는데, 가독성이 좀 더 나은 것 같아서 그대로 다 변경하였다.</li>
</ul>

<p>이제 &quot;Learn more&quot;를 클릭하면 영화 정보와 배우들의 정보를 볼 수 있다:</p>

<p><img src="https://c4.staticflickr.com/8/7695/17998355281_896652d302_b.jpg" alt=""></p>

<p>이제 배우가 출연한 모든 영화를 볼 수 있도록 해보자.</p>

<p>&quot;Actors&quot;라는 컨트롤러를 제너레이트한다:</p>

<pre class="terminal">
  rails generate controller Actors
</pre>

<p>라우트 파일에 <code>/actors</code> URL을 Actors 컨트롤러의 <code>index</code> 액션에 매팅하는 라우트를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="n">get</span> <span class="s1">&#39;/actors&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;actors#index&#39;</span>
</code></pre></div>
<p>컨트롤러에 모든 배우 목록을 보여주는 <code>index</code> 액션을 추가한다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">index</span>
  <span class="vi">@actors</span> <span class="o">=</span> <span class="no">Actor</span><span class="o">.</span><span class="n">all</span>
<span class="k">end</span>
</code></pre></div>
<p><code>app/views/actors/index.html.erb</code>를 만들고 다음을 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main actor-index&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>% @actors.each do |actor| %&gt;
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actor col-xs-2&quot;</span><span class="nt">&gt;</span>
         <span class="err">&lt;</span>%= image_tag actor.image %&gt;
         <span class="nt">&lt;h3&gt;</span><span class="err">&lt;</span>%= actor.first_name + &quot; &quot; + actor.last_name %&gt;<span class="nt">&lt;/h3&gt;</span>
        <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= actor.bio %&gt;<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>라우트 파일로 돌아가서 <code>/actors/1</code>과 같은 URL에 대한 요청을 Actors 컨트롤러의 <code>show</code> 액션으로 보내주는 라우트를 추가하고, &quot;actor&quot;로 명명한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/actors/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;actors#show&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:actor</span>
</code></pre></div>
<p>그리고 컨트롤러에 각 배우와 출연한 영화를 보여주는 <code>show</code> 액션을 추가한다. id로 배우를 먼저 찾고, 배우가 출연한 모든 여와를 보여준다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">show</span>
  <span class="vi">@actor</span> <span class="o">=</span> <span class="no">Actor</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
  <span class="vi">@movies</span> <span class="o">=</span> <span class="vi">@actor</span><span class="o">.</span><span class="n">movies</span>
<span class="k">end</span>
</code></pre></div>
<p><code>app/views/actors/show.html.erb</code>를 만들고 다음을 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main actor-show&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- Display an actor&#39;s info here --&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actor&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>%= image_tag @actor.image %&gt;
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;info&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;actor-name&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @actor.first_name + &quot; &quot; + @actor.last_name %&gt;<span class="nt">&lt;/h3&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;actor-bio&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @actor.bio %&gt;<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;h2&gt;</span>Movies<span class="nt">&lt;/h2&gt;</span>
    <span class="c">&lt;!-- Display each movie&#39;s info here --&gt;</span>
    <span class="err">&lt;</span>% @movies.each do |movie| %&gt;
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;movie&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>%= image_tag movie.image %&gt;
      <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;movie-title&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= movie.title %&gt;<span class="nt">&lt;/h3&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;movie-release-year&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= movie.release_year %&gt;/p&gt;
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;movie-plot&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= movie.plot %&gt;<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>마지막으로 <code>app/views/actors/index.html.erb</code>를 만들고 &quot;Learn more&quot; 이름의 링크를 <code>link_to</code>를 사용하여 만들고 <code>actor_path</code>를 이용한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="err">&lt;</span>%= link_to &quot;Learn more&quot;, actor_path(actor) %&gt;
</code></pre></div>
<p>소스코드의 위치와 내용을 <a href="https://github.com/nolboo/rails-codecademy-MovieApp">깃허브</a>에 올려놓았다.</p>

<p>배우와 영화가 many-to-many 관계를 사용하여 모델링할 수 있다 레일즈에서는 <code>has_many:through</code>를 사용하는 것도 제공된다. <code>has_many:through</code> 관계는 세번째 모델을 이용하여 두 모델을 조인한다.</p>

<p>축하한다! 코드캐더미 레일즈 코스를 다 마친 것이다.</p>

<h2>맺음말</h2>

<p>코드캐더미의 레일즈 강좌는 레일즈의 MVC 속성을 쉬운 앱부터 시작하여 여러 형태의 앱을 반복해서 만들어 볼 수 있다. 비슷한 코드를 계속해서 입력하게 하기 때문에 나름대로 처음 접한 MVC의 이해도를 높을 수 있었다. 그런데 3개의 글을 그냥 읽기만하는 블로그 독자에게는 매우 지루한 일일수도 있을 것 같다는 생각이 든다. 직접 강좌를 하면서 참고용으로 삼기 바란다=3=3=3</p>

<h2>추천 링크</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=MrGYKo50Dqg&amp;list=PLSXDqiI4sC5PsASjJy7dBncALnhjud2fx">Ruby/Rails 4.0 - Lecture 1/29 - Intro to Rails - YouTube</a>: 
여기저기 기웃거리다가 괜찮은 동영상을 만났다. 설명도 자세한 편이고 무엇보다 실수를 많이 하면서(때론 유도하면서) 그걸 해결하는 것을 직접 보여주는 것이 익살스럽다. 총 29개의 비디오로 구성되어 있으며 23번째를 보기 시작하면서 추천하는 것이다.</li>
<li><a href="http://www.insightbook.co.kr/books/programming-insight/%EB%A0%88%EC%9D%BC%EC%8A%A4%EC%99%80-%ED%95%A8%EA%BB%98-%ED%95%98%EB%8A%94-%EC%95%A0%EC%9E%90%EC%9D%BC-%EC%9B%B9-%EA%B0%9C%EB%B0%9C-%EA%B0%9C%EC%A0%95%ED%8C%90">레일스와 함께 하는 애자일 웹 개발 개정판 | 도서출판 인사이트</a> - 원본 : <a href="http://www.amazon.com/Agile-Development-Rails-Facets-Ruby/dp/1937785564/ref=sr_1_1?ie=UTF8&amp;qid=1434097925&amp;sr=8-1&amp;keywords=agile-web-development-with-rails-4">Agile Web Development with Rails 4 (Facets of Ruby): Sam Ruby, Dave Thomas, David Heinemeier Hansson</a></li>
<li><a href="https://www.railstutorial.org/book">Ruby on Rails Tutorial (3rd Ed.)</a></li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[코드캐더미로 배우는 레일즈 기초 2부]]></title>
            <link>/blog/2015/05/17/rails-codecademy-2/</link>
            <pubDate>Sun, 17 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[codecademy]]></category>
        
            <category><![CDATA[course]]></category>
        
            <category><![CDATA[rails]]></category>
        
            <category><![CDATA[ruby]]></category>
        
            <guid>/blog/2015/05/17/rails-codecademy-2/</guid>
            <description>
                <![CDATA[코드캐더미로 배우는 레일즈 기초 1부에 이어서 두 개의 모델을 가진 TravelApp을 만들어본다. TravelApp 한 가지 종류 이상의 데이터를 가진 앱을 만들고 싶을 때 다른 컬럼을 갖기 때문에 하나의 모델로 기술하기에는 혼란스러울 수 있다. 대신 두 개 이상의 모델로 기술할 수 있다. 새로운 TravelApp앱을 만든다: rails new TravelApp cd TravelApp Model...]]>
            </description>
            <content:encoded>
                <![CDATA[<p><a href="http://nolboo.github.io/blog/2015/05/13/rails-codecademy/">코드캐더미로 배우는 레일즈 기초 1부</a>에 이어서 두 개의 모델을 가진 TravelApp을 만들어본다.</p>

<h2>TravelApp</h2>

<p>한 가지 종류 이상의 데이터를 가진 앱을 만들고 싶을 때 다른 컬럼을 갖기 때문에 하나의 모델로 기술하기에는 혼란스러울 수 있다. 대신 두 개 이상의 모델로 기술할 수 있다.</p>

<p>새로운 TravelApp앱을 만든다:</p>

<pre class="terminal">
    rails new TravelApp
    cd TravelApp
</pre>

<h3>Model</h3>

<p>Tag와 Destination이라는 두 개의 모델을 만든다:</p>

<pre class="terminal">
    rails generate model Tag
    rails generate model Destination
</pre>

<p>두 개의 모델 사이의 관계를 정의한다.</p>

<p><code>app/models/tag.rb</code>에:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">has_many</span> <span class="ss">:destination</span>
</code></pre></div>
<p><code>app/models/destination.rb</code>에</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">belongs_to</span> <span class="ss">:tag</span>
</code></pre></div>
<p><code>has_many</code>/<code>belongs_to</code> 쌍은 일대다 관계를 정의하기 위해 자주 쓰인다. 몇 가지를 예로 들면:</p>

<ul>
<li>a Library has many Books; a Book belongs to a Library : 책과 도서관</li>
<li>an Album has many Photos; a Photo belongs to an Album : 사진과 앨범</li>
<li>a Store has many Products; a Product belongs to a Store : 상품과 상점</li>
</ul>

<p><code>db/migrate</code> 안의 tags 테이블에 <code>title</code>과 <code>image</code>란 string 컬럼들을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:title</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:image</span>
</code></pre></div>
<p>destinations 테이블에 <code>name</code>, <code>image</code>, <code>descripton</code>이란 string 컬럼을 추가하고, <br>
tags 테이블에 foreign key pointing을 추가하기위해 <code>t.references :tag</code>를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:image</span>
<span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:description</span>
<span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:tag</span>
</code></pre></div>
<pre class="terminal">
    rake db:migrate
</pre>

<p><code>db/seeds.rb</code>에 <a href="">데이터를 입력</a>한다.</p>

<pre class="terminal">
    rake db:seed
</pre>

<h3>controller, route, view</h3>

<p><code>Tags</code> 컨트롤러를 제너레이트한다.</p>

<pre class="terminal">
    rails generate controller Tags
</pre>

<p><code>config/routes.rb</code>에 <code>/tags</code> 요청을 <code>Tags</code> 컨트롤러의 <code>index</code> 액션에 매핑하는 새로운 라우트를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/tags&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tags#index&#39;</span>
</code></pre></div>
<p><code>app/controllers/messages_controller.rb</code>에 모든 태그 목록을 보여주는 <code>index</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@tags</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">all</span>
<span class="k">end</span>
</code></pre></div>
<p>뷰를 만들기 위해서 <code>app/views/tags/index.html.erb</code>를 만들고, 다음을 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1tm.svg&quot;</span> <span class="na">width=</span><span class="s">&quot;80&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>BokenjiKan<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tags&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cards row&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>% @tags.each do |t| %&gt;
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;card col-xs-4&quot;</span><span class="nt">&gt;</span>
        <span class="err">&lt;</span>%= image_tag t.image %&gt;
        <span class="nt">&lt;h2&gt;</span><span class="err">&lt;</span>%= t.title %&gt;<span class="nt">&lt;/h2&gt;</span>
        <span class="err">&lt;</span>%= link_to &quot;Learn more&quot;, tag_path(t) %&gt;
      <span class="nt">&lt;/div&gt;</span>
      <span class="err">&lt;</span>% end %&gt;
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><code>app/assets/stylesheets/application.css</code>에 CSS를 입력한다:<a href="">github</a></p>

<p>이제 <code>http://localhost:8000/tags</code>을 방문해서 TravelApp에 웹페이지를 요청한다.</p>

<p><img src="https://c1.staticflickr.com/9/8742/17537708420_0e2dfb0165_b.jpg" alt=""></p>

<p>이제 특정 태그를 보여주는 액션을 추가해보자. <a href="http://www.codecademy.com/articles/standard-controller-actions">7가지 표준 컨트롤러 액션 문서</a>를 참조하고, 라우트 화일에 다음 라우트를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/tags/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tags#show&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:tag</span>
</code></pre></div>
<p><strong>이 라우트를 &quot;tag&quot;라고 부르기 위해 <code>as:</code>를 사용하였다.</strong></p>

<p><code>app/views/tags/show.html.erb</code>을 만든다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1tm.svg&quot;</span> <span class="na">width=</span><span class="s">&quot;80&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>BokenjiKan<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tag&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span><span class="err">&lt;</span>%= @tag.title %&gt;<span class="nt">&lt;/h2&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cards row&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>% @destinations.each do |d| %&gt;
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;card col-xs-4&quot;</span><span class="nt">&gt;</span>
        <span class="err">&lt;</span>%= image_tag d.image %&gt;
        <span class="nt">&lt;h2&gt;</span><span class="err">&lt;</span>%= d.name %&gt;<span class="nt">&lt;/h2&gt;</span>
        <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= d.description %&gt;<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="err">&lt;</span>% end %&gt;
    <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><code>app/views/tags/index.html.erb</code>에 다음을 추가한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="err">&lt;</span>%= link_to &quot;Learn more&quot;, tag_path(t) %&gt;
</code></pre></div>
<p><strong>위에서 라우트에 &quot;tag&quot;라는 이름을 주었기 때문에, 레일즈는 <code>tag_path</code>라는 헬퍼 매서드를 자동으로 만든다. <code>tag_path(t)</code>는 특정 태그의 패스(예를 들면 <code>/tag/1</code>)로 URL을 제너레이트한다.</strong></p>

<pre class="terminal">
    rails generate controller Destinatins
</pre>

<p>라우트 파일에 다음 라우트를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/destinations/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;destinations#show&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:destination</span>
</code></pre></div>
<p>Destinations 컨트롤러 파일에 <code>show</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">show</span> 
  <span class="vi">@destination</span> <span class="o">=</span> <span class="no">Destination</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>뷰 파일 <code>app/views/destinations/show.html.erb</code>을 만들고, 목적지의 사진, 이름, 소개를 보여주도록 한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1tm.svg&quot;</span> <span class="na">width=</span><span class="s">&quot;80&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>BokenjiKan<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;destination&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-12&quot;</span><span class="nt">&gt;</span>
        <span class="err">&lt;</span>%= image_tag @destination.image %&gt;
        <span class="nt">&lt;h2&gt;</span><span class="err">&lt;</span>%= @destination.name %&gt;<span class="nt">&lt;/h2&gt;</span>
        <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= @destination.description %&gt;<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span> 
</code></pre></div>
<p>마지막으로 <code>app/views/tags/show.html.erb</code>에 다음을 추가한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= link_to &quot;See more&quot;, destination_path(d) %&gt;<span class="nt">&lt;/p&gt;</span>
</code></pre></div>
<ul>
<li>&quot;See more&quot;를 링크 텍스트로 준다.</li>
<li><code>show</code> 라우트를 &quot;destination&quot;는 이름을 주었기 때문에, 레일즈는 <code>destination_path</code>라는 헬퍼 매서드를 자동으로 만든다. 특정 목적지의 패스를 URL로 제너레이트하기 위해 <code>destination_path</code>를 사용한다.</li>
</ul>

<p>이제 앱이 특정 목적지를 보여준다. 목적지의 이름과 설명을 업데이트하는 액션을 추가해보자. <a href="http://www.codecademy.com/articles/standard-controller-actions">7가지 표준 컨트롤러 액션 문서</a>을 참조하면 <code>edit</code>과 <code>update</code>를 사용해야한다.</p>

<p>라우트 파일에 다음 라우트를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/destinations/:id/edit&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;destinations#edit&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:edit_destination</span> 
<span class="n">patch</span> <span class="s1">&#39;/destinations/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;destinations#update&#39;</span>
</code></pre></div>
<p>Destinations 컨트롤러의 <code>show</code> 액션 밑에 <code>edit</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">edit</span> 
  <span class="vi">@destination</span> <span class="o">=</span> <span class="no">Destination</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span> 
<span class="k">end</span>
</code></pre></div>
<p><code>edit</code> 액션 밑에 <code>destination_params</code>라는 private 매서드를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> 
  <span class="k">def</span> <span class="nf">destination_params</span> 
    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:destination</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:description</span><span class="p">)</span> 
  <span class="k">end</span>
</code></pre></div>
<p><code>edit</code> 액션과 private 매서드 사이에 <code>update</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">update</span> 
  <span class="vi">@destination</span> <span class="o">=</span> <span class="no">Destination</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span> 
  <span class="k">if</span> <span class="vi">@destination</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">destination_params</span><span class="p">)</span> 
    <span class="n">redirect_to</span><span class="p">(</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;show&#39;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@destination</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> 
  <span class="k">else</span> 
    <span class="n">render</span> <span class="s1">&#39;edit&#39;</span> 
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p><code>app/views/destinations/edit.html.erb</code>를 만들고 다음 코드를 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1tm.svg&quot;</span> <span class="na">width=</span><span class="s">&quot;80&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>BokenjiKan<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;destination&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="err">&lt;</span>%= image_tag @destination.image %&gt;

    <span class="err">&lt;</span>%= form_for(@destination) do |f| %&gt;
      <span class="err">&lt;</span>%= f.text_field :name %&gt;
      <span class="err">&lt;</span>%= f.text_field :description %&gt;
      <span class="err">&lt;</span>%= f.submit &quot;Update&quot;, :class =&gt; &quot;btn&quot; %&gt;
    <span class="err">&lt;</span>% end %&gt;

  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>마지막으로 <code>app/views/destinations/show.html.erb</code>에 <code>edit_destination_path</code>와 <code>link_to</code>를 이용하여 링크를 만든다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="err">&lt;</span>%= link_to &quot;Edit&quot;, edit_destination_path(@destination) %&gt;
</code></pre></div>
<p>소스코드의 위치와 내용을 깃허브의 <a href="https://github.com/nolboo/rails-codecademy-TravelApp/commit/3ea65d4068a7abf58375cf19725cbb08ffd02945">커밋 페이지</a>에서 자세하게 볼 수 있게 올려놓았다.</p>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[코드캐더미로 배우는 레일즈 기초 1부]]></title>
            <link>/blog/2015/05/13/rails-codecademy/</link>
            <pubDate>Wed, 13 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[codecademy]]></category>
        
            <category><![CDATA[course]]></category>
        
            <category><![CDATA[rails]]></category>
        
            <category><![CDATA[ruby]]></category>
        
            <guid>/blog/2015/05/13/rails-codecademy/</guid>
            <description>
                <![CDATA[코드캐더미 강좌는 볼 때마다 친절하게 잘 짜여져 있다는 생각이 든다. 레일즈 기초 강좌도 앞서 포스팅한 코세라 강좌인 루비 온 레일즈로 블로그 만들기를 들을 때 이해하지 못한(들을 때는 이해한 듯 했지만;;) 부분까지 잘 설명해준다. 이에 필받아서 Learn Ruby on Rails | Codecademy 강좌를 오프라인에서도 따라할 수 있게 좀 더 자세하게 풀어서...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>코드캐더미 강좌는 볼 때마다 친절하게 잘 짜여져 있다는 생각이 든다. 레일즈 기초 강좌도 앞서 포스팅한 코세라 강좌인 <a href="http://nolboo.github.io/blog/2015/05/05/web-application-architecture/">루비 온 레일즈로 블로그 만들기</a>를 들을 때 이해하지 못한(들을 때는 이해한 듯 했지만;;) 부분까지 잘 설명해준다. 이에 필받아서 <a href="http://www.codecademy.com/learn/learn-rails">Learn Ruby on Rails | Codecademy</a> 강좌를 오프라인에서도 따라할 수 있게 좀 더 자세하게 풀어서 설명한다.</p>

<p>루비를 모른다면 <a href="http://www.codecademy.com/tracks/ruby">Ruby | Codecademy</a>를 먼저 하길 권한다.</p>

<p>코드캐더미에서는 모든 것이 웹브라우저에서 인터렉티브하게 진행되기 때문에 레일즈의 설치와 기본 디렉토리 구조는 <a href="http://nolboo.github.io/blog/2015/05/05/web-application-architecture/">루비 온 레일즈로 블로그 만들기</a>의 &quot;루비온 레일즈 설치&quot; 부분을 참조하는 것으로 대치한다.</p>

<h2>MySite</h2>

<pre class="terminal">
    rails new MySite
    cd MySite
    bundle install
    rails server
</pre>

<p>웹브라우저 주소창에 <code>http://localhost:3000</code>을 입력하면 레일즈 앱을 볼 수 있다.</p>

<ul>
<li><code>rails new</code> 명령은 모든 레일즈 프로젝트의 시작점이다.</li>
<li><code>bundle install</code> 명령은 새로운 레일즈 앱에 필요한 모든 소프트웨어 패키지를 설치한다. 소프트웨어 패키지를 gem이라고 부르며, <code>Gemfile</code> 파일 안에 나열된다.</li>
<li><code>rails server</code> 명령은 레일즈 개발 서버를 시작한다. 이 개발 서버는 <code>WEBrick</code>이다.</li>
</ul>

<h3>request/response cycle</h3>

<p><code>http://localhost:3000</code>을 방문하면 어떠한 일이 발생하는가?</p>

<ol>
<li>브라우저가 <code>http://localhost:3000</code> URL에 요청<code>request</code>한다.</li>
<li>요청은 <code>config/routes.rb</code> 안의 레일즈 라우터를 hit한다. 라우터는 URL을 인식하고 컨트롤러에 요청을 보낸다.</li>
<li>컨트롤러가 요청을 받고 처리한다.</li>
<li>컨트롤러가 뷰<code>view</code>에 요청을 넘긴다.</li>
<li>뷰는 HTML 페이지를 렌더링한다.</li>
<li>컨트롤러가 사용자가 보고 있는 브라우저에 HTML을 다시 보낸다.</li>
</ol>

<p>request/response cycle을 보려면 레일즈앱을 만드는 세 부분이 필요하다: 컨트롤러, 라우트, 뷰</p>

<p>먼저 컨트롤러를 만들자.</p>

<h3>Controller</h3>

<pre class="terminal">
    rails generate controller Pages
</pre>

<p>위의 명령은 <code>Pages</code>라는 새로운 컨트롤러를 제너레이트하며, <code>app/controllers/pages_controller.rb</code> 파일을 만들어 준다.</p>

<p><code>app/controllers/pages_controller.rb</code>을 열고 <code>PagesController</code> 클래스 안에 <code>home</code> 매서드를 추가한다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">home</span>
<span class="k">end</span>
</code></pre></div>
<p>레일즈에서 매서드는 컨트롤러 액션<code>action</code>으로 불리기도 한다. <code>Pages</code> 컨트롤러에 <code>home</code> 액션을 추가한 것이다.</p>

<h3>Route</h3>

<p>이제 컨트롤러를 가졌으니, request/response cycle의 두 번째 부분으로 넘어가서 라우트를 만들자.<br>
<code>config/routes.rb</code> 파일을 열고 다음을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;welcome&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#home&#39;</span>
</code></pre></div>
<p>이제 <code>http://localhost:3000/welcome</code> 방문했을 때 위의 라우트가 레일즈에게 <code>Pages</code> 컨트롤러의 <code>home</code> 액션으로 이 요청을 보내라고 말한다.</p>

<h3>View</h3>

<p>컨트롤러와 라우트를 가졌으니, request/response cycle의 세 번째 부분으로 넘어가서 뷰를 만들자. <code>app/views/pages/home.html.erb</code>을 만들고 다음 HTML을 입력한다. 자신의 이름으로 채워라.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Hello my name is Nolboo Kim<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>I make Rails apps.<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><code>app/assets/stylesheets/pages.css.scss</code>에 CSS를 입력할 수 있다. 파일명을 <code>pages.scss</code>로 하여도 결과는 같다.</p>

<ul>
<li>미리 준비된 <a href="https://github.com/nolboo/rails-codecademy-static/blob/master/app/assets/stylesheets/pages.scss">CSS</a>를 입력하여야 제대로 된 페이지를 볼 수 있다.</li>
</ul>

<h3>워크플로우 정리</h3>

<p>지금까지가 <a href="http://www.codecademy.com/articles/request-response-cycle-static">Request-Response Cycle</a>를 가이드로 한, 레일즈 앱을 만들때 일반적인 워크플로우이다.</p>

<ol>
<li>새 레일즈 앱을 제너레이트한다.</li>
<li>컨트롤러를 제너레이트하고 액션을 추가한다.</li>
<li>라우트를 만들고 컨트롤러 액션에 URL을 매핑한다.</li>
<li>HTML, CSS로 뷰를 만든다.</li>
<li>로컬 웹서버를 실행하고 브라우저에서 앱을 미리보기한다.</li>
</ol>

<p>정적<code>static</code> 페이지를 가진 레일즈앱을 만들었으며, 컨트롤러, 라우트, 뷰를 사용하였다. 정적 페이지를 가진 레이즈 앱은 모든 사용자가 같은 화면을 보게 된다. </p>

<ul>
<li>전체 소스를 <a href="https://github.com/nolboo/rails-codecademy-static">깃허브 저장소</a>에 올려놓았다.</li>
</ul>

<h2>메신저 앱</h2>

<p>이제 데이타베이스와 함께 정보를 저장하는 앱을 만들어 보자. 데이타베이스에 맞는 Request-Response Cycle은 다음과 같다. 다이어그램은 <a href="http://www.codecademy.com/articles/request-response-cycle-dynamic">Request-Response Cycle II</a>을 참조한다.</p>

<ol>
<li>브라우저에 <code>http://localhost:3000/welcome</code>를 입력하면 브라우저가 <code>/welcome</code> URL을 위한 요청을 만든다.</li>
<li>요청은 레일즈 라우터를 hit한다.</li>
<li>라우터는 요청을 핸들링하기위해 그 URL을 컨트롤러 액션에 매핑한다.</li>
<li>컨트롤러 액션은 요청을 받고, 데이터베이스에서 데이터를 불러오도록 모델<code>model</code>에게 요청한다.</li>
<li>모델은 컨트롤러 액션에게 데이터를 리턴한다.</li>
<li>컨트롤러 액션은 뷰에 데이터를 넘긴다.</li>
<li>뷰가 HTML 페이지를 렌더링한다.</li>
<li>컨트롤러서 HTML을 브라우저에게 보낸다.</li>
</ol>

<pre class="terminal">
    rails new MessengerApp
    cd MessengerApp
    bundle install
    rails server
</pre>

<p>MessengerApp이라는 레일즈 앱을 만들었다. </p>

<p><a href="http://www.codecademy.com/articles/request-response-cycle-dynamic">Request-Response Cycle II</a>를 보라. 레일즈을 만드는 네 부분이 필요하다 - 모델, 라우트, 컨트롤러, 뷰</p>

<h3>Model</h3>

<p>모델을 만들자. 터미널에서 다음 명령어로 <code>Message</code>라는 새로운 모델을 제너레이트한다.</p>

<pre class="terminal">
    rails generate model Message
</pre>

<p>이러면 레일즈는 두 개의 파일을 만든다.</p>

<ol>
<li><code>app/models/message.rb</code>라는 모델 파일. 데이터베이스의 테이블을 기술한다.</li>
<li><code>db/migrate/</code>안의 마이그레이션 파일. 마이그레이션은 데이터베이스를 업데이트하는 방법이다.
<br /></li>
</ol>

<h4>마이그레이션</h4>

<p>메시지 테이블을 위해 <code>db/migrate/</code> 안의 마이그레이션 파일을 연다. 마이그레이션 파일명은 생성일시  timestamp로 시작된다. <code>change</code> 매서드 안의 line4에 다음을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</code></pre></div>
<p><code>change</code> 메서드는 데이터베스에 무엇을 변경할 것인가를 레일즈에게 말해준다. 여기서는 데이터베이스에 메시지를 저장할 새로운 테이블을 만들기 위해 <code>create_table</code>을 이용한다. </p>

<p><code>create_table</code> 안에 <code>t.text :content</code>추가한 것은 메시지 테이블 안에 <code>content</code>라는 텍스트 컬럼을 만든 것이다.</p>

<p>마지막 줄 <code>t.timestamps</code>는 메시지 테이블에 <code>create_at</code>과 <code>update_at</code>이라는 두개의 컬럼을 만드는 레일즈 명령어이다. 이 컬럼들은 메시지가 만들어지고 업데이트될 때 자동으로 설정된다.</p>

<pre class="terminal">
    rake db:migrate
</pre>

<p><code>rake db:migrate</code> 명령어는 새로운 메시지 데이터 모델을 데이터베이스에 업데이트한다.</p>

<p><code>rake db:seed</code> 명령어는 <code>db/seeds.rb</code>로부터 샘플 데이터를 공급<code>seed</code>해준다. 먼저 <code>db/seeds.rb</code>에 샘플 데이터를 다음과 같이 데이터를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">m1</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">content</span><span class="p">:</span> <span class="s2">&quot;We&#39;re at the beach so you should meet us here! I make a mean sandcastle. :)&quot;</span><span class="p">)</span>

<span class="n">m2</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">content</span><span class="p">:</span> <span class="s2">&quot;Let&#39;s meet there!&quot;</span><span class="p">)</span>
</code></pre></div>
<p>입력된 후의 모습은 <a href="https://github.com/nolboo/rails-codecademy-MessengerApp/blob/d2e00afb030d938230f60bd873ed78190922f757/db/seeds.rb"><code>db/seeds.rb</code></a>에서 확인할 수 있다.</p>

<p>다음 명령어로 샘플 데이터를 seed한다:</p>

<pre class="terminal">
    rake db:seed
</pre>

<h3>Controller</h3>

<p>이제 모델을 가졌으니 request/response cycle의 두번째와 세번째 부분으로 넘어가서 컨트롤러와 라우트를 만들자.</p>

<pre class="terminal">
    rails generate controller Messages
</pre>

<p><code>config/routes.rb</code> 파일을 열고 다음을 추가하여 <code>/messages</code> URL을 Messages 컨트롤러의 <code>index</code> 액션에 매핑하는 라우트를 만든다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/messages&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;messages#index&#39;</span>
</code></pre></div>
<p><code>app/controllers/messages_controller.rb</code>에 <code>index</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@messages</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">all</span>
<span class="k">end</span>
</code></pre></div>
<p>Messages 컨트롤러의 액션명을 <code>index</code>로 한 이유는? <a href="http://www.codecademy.com/articles/standard-controller-actions">Standard Controller Actions</a>를 참조하라. 레일즈는 데이터를 일반적으로 조작하기 위한 7가지의 표준 컨트롤러 액션을 제공한다.(<code>index</code>, <code>show</code>, <code>new</code>, <code>create</code>, <code>edit</code>, <code>update</code>, <code>destroy</code>) 여기서는 모든 메시지의 목록을 보여주길 원해서 <code>index</code> 액션을 사용했다.</p>

<p>이제 사용자가 <code>http://localhost:3000/messages</code>를 방문하면 라우트 파일은 이 요청을 Messages 컨트롤러의 <code>index</code> 액션으로 매핑한다. <code>index</code> 액션은 데이터베이스의 모든 메시지를 가져와 <code>@messages</code> 변수에 저장한다.</p>

<h3>View</h3>

<p><code>@messages</code> 변수는 뷰로 넘겨지고 뷰는 각각의 메시지를 보여줘야 한다.</p>

<p><code>app/views/messages/index.html.erb</code>를 만들고, 다음을 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1m.svg&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Messenger<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>

    <span class="err">&lt;</span>% @messages.each do |message| %&gt; 
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span> 
          <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= message.content %&gt;<span class="nt">&lt;/p&gt;</span> 
          <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;time&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= message.created_at %&gt;<span class="nt">&lt;/p&gt;</span> 
        <span class="nt">&lt;/div&gt;</span> 
    <span class="err">&lt;</span>% end %&gt;

  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><code>index.html.erb</code>은 일종의 웹 템플릿<code>template</code>이다. 웹 템플릿은 변수와 컨트롤 플로우 선언을 포함하는 HTML 파일이다. 각 메시지를 반복해서 같은 HTML을 쓰는 대신에 데이터베이스에서 데이터를 루핑하여 보여주기 위해 웹 템플릿을 사용할 수 있다.</p>

<ol>
<li><code>&lt;% @messages.each do |message| %&gt;</code>는 <code>@messages</code> 배열의 각각의 메시지를 반복하여 실행한다. 우린 Messages 컨트롤러의 <code>index</code> 액션에서 <code>@messages</code>를 만들었었다.</li>
<li>각각의 메시지에 대하여, 메시지 내용와 만들어진 시간을 보여주기 위해 <code>&lt;%= message.content %&gt;</code>와 <code>&lt;%= message.created_at %&gt;</code>를 사용했다.</li>
</ol>

<p>스타일링을 위해서 <a href="https://github.com/nolboo/rails-codecademy-MessengerApp/blob/d2e00afb030d938230f60bd873ed78190922f757/app/assets/stylesheets/messages.scss"><code>/app/assets/stylesheets/messages.scss</code></a>를 보고 CSS 코드를 입력한다.</p>

<p>이제 <code>rails server</code>를 실행하고 <code>http://localhost:3000/messages</code>를 방문하면 메시지앱을 볼 수 있다.</p>

<p><img src="https://c2.staticflickr.com/6/5348/17405198039_6ca59aa12a_b.jpg" alt="메시지앱 실행화면"></p>

<h3>Route</h3>

<p>지금까지 메시지를 데이터베이스에서 로드하고 뷰에서 보여주었다. 그럼 어떻게 새로운 메시지를 만들고 그것을 데이터베이스에 저장할까? <a href="http://www.codecademy.com/articles/standard-controller-actions">Standard Controller Actions</a>를 참조하면, <code>new</code>와 <code>create</code> 액션을 사용할 필요가 있다.</p>

<p>라우트 파일 <code>config/routes.rb</code>에 <code>message/new</code> 요청을 Message 컨트롤러의 <code>new</code> 액션과 매핑하는 라우트를 만들어 준다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">get</span> <span class="s1">&#39;/messages/new&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;messages#new&#39;</span>
</code></pre></div>
<p>Messages 컨트롤러 <code>app/controllers/messages_controller.rb</code>에 <code>index</code> 액션 밑에 <code>new</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span>
<span class="k">end</span>
</code></pre></div>
<p>라우트 파일 <code>config/routes.rb</code>에 다음 라우트를 추가하여 Messages 컨트롤러의 <code>create</code> 액션에 요청을 매핑한다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">post</span> <span class="s1">&#39;messages&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;messages#create&#39;</span>
</code></pre></div>
<p>Messages 컨트롤러 <code>app/controllers/messages_controller.rb</code>에 <code>new</code> 액션 밑에 <code>message_params</code>라는 개인<code>private</code> 매서드를 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> 
  <span class="k">def</span> <span class="nf">message_params</span> 
    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:content</span><span class="p">)</span> 
  <span class="k">end</span>
</code></pre></div>
<p><code>new</code> 액션과 개인 매서드 사이에 <code>create</code> 액션을 추가한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@message</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span> 
  <span class="k">if</span> <span class="vi">@message</span><span class="o">.</span><span class="n">save</span> 
    <span class="n">redirect_to</span> <span class="s1">&#39;/messages&#39;</span> 
  <span class="k">else</span> 
    <span class="n">render</span> <span class="s1">&#39;new&#39;</span> 
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<h3>Form</h3>

<p>다음에 <code>app/views/messages/new.html.erb</code>를 만들고 다음을 입력한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1m.svg&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Messenger<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;create&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>

    <span class="err">&lt;</span>%= form_for(@message) do |f| %&gt;  
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span> 
        <span class="err">&lt;</span>%= f.label :message %&gt;<span class="nt">&lt;br&gt;</span> 
        <span class="err">&lt;</span>%= f.text_area :content %&gt; 
      <span class="nt">&lt;/div&gt;</span> 
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span> 
        <span class="err">&lt;</span>%= f.submit &quot;Create&quot; %&gt; 
      <span class="nt">&lt;/div&gt;</span> 
    <span class="err">&lt;</span>% end %&gt;

  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>마지막으로 <code>app/views/messages/index.html.erb</code>의 <code>&lt;% @messages.each do |message| %&gt;...&lt;% end %&gt;</code> 블록 밑에 다음을 추가한다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="err">&lt;</span>%= link_to &#39;New Message&#39;, &quot;messages/new&quot; %&gt;
</code></pre></div>
<p><code>http://localhost:3000/messages</code>를 방문하여 New Message를 클릭하여 자신만의 메시지를 만들어 보자.</p>

<h3>Workflow</h3>

<p><a href="http://www.codecademy.com/articles/request-response-cycle-forms">Request-Response Cycle III</a>를 가이드 삼아 사용자 요청이 앱 전체에 걸쳐 어떻게 흐르는지 살펴보라.</p>

<p>새 메시지를 만들기위해서 <code>http://localhost:3000/messages/new</code>를 방문했을 때 request/response cycle의 첫번째 turn이 트리거<code>trigger</code> 된다.</p>

<ol>
<li>브라우저가 <code>/messages/new</code> URL을 위한 HTTP GET 요청을 만든다.</li>
<li>레일즈 라우터가 이 URL을 Messages 컨트롤러의 <code>new</code> 액션으로 매핑한다. <code>new</code> 액션은 새로운 <code>Message</code> 객체 <code>@message</code>를 만들고 <code>app/views/messages/new.html.erb</code>의 뷰로 넘긴다.</li>
<li>뷰에서 <code>form_for</code>가 <code>@message</code> 객체의 필드들로 폼을 만든다.</li>
</ol>

<p>폼을 다 채우고 Create를 누르면 request/response cycle의 두번째 turn이 트리거<code>trigger</code> 된다.</p>

<ol>
<li>브라우저가 <code>/messages</code> URL에 대한 HTTP POST 요청을 통해 레일즈 앱에 데이터를 보낸다.</li>
<li>이번에는 레일즈 라우터가 이 URL을 <code>create</code> 액션에 매핑한다.</li>
<li><code>create</code> 액션은 폼에서 데이터를 안전하게 모으고 데이터베이스를 업데이트하기 위해 <code>message_param</code>을 사용한다.</li>
</ol>

<p>여기서 <code>/messages/new</code>로의 링크를 만들기 위해 <code>link_to</code>를 사용했다. <code>&lt;a&gt;</code> 엘리먼트를 하드코딩하는 대신 링크를 제너레이트하기위해 <code>link_to</code>를 사용할 수 있다:</p>

<ul>
<li>첫번째 패러미터는 링크 텍스트이다.</li>
<li>두번째 패어미터는 URL이다.</li>
</ul>

<p>축하한다! 메시지를 저장하기위해 데이터베이스를 사용하는 메시징앱을 만들었다. 여기까지 일반화할 수 것은 무엇인가?</p>

<ul>
<li>모델은 데이터베이스 안의 테이블을 기술한다.</li>
<li>마이그레이션은 새로운 테이블로 데이터베이스를 업데이트하거나 기존의 테이블을 변경하는 방법이다.</li>
<li>레일즈는 데이터를 보여주거나 만드는 등의 그런 일반적인 일을 하기위해 <a href="http://www.codecademy.com/articles/standard-controller-actions">7가지 표준 컨트롤러 액션</a>을 제공한다.</li>
<li>데이터는 ERB 웹 템플레이팅을 사용하여 뷰에서 보여질 수 있다.</li>
<li><p>데이터는 웹 폼을 이용하여 데이터베이스 안에 저장될 수 있다.</p></li>
<li><p>MessageApp 전체 소스는 <a href="https://github.com/nolboo/rails-codecademy-MessengerApp">깃허브 저장소</a>에 올려놓았다.</p></li>
</ul>

<h2>맺음말</h2>

<p>일단 포스트가 길어져서 50% 진도 부분만을 먼저 포스팅한다. 뒷부분은 배우는 대로 포스팅할 예정이다.</p>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[맥 설치와 환경 설정을 최대한 자동화하기]]></title>
            <link>/blog/2015/05/07/mac-setup/</link>
            <pubDate>Thu, 07 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[mac]]></category>
        
            <category><![CDATA[macbook]]></category>
        
            <category><![CDATA[setup]]></category>
        
            <guid>/blog/2015/05/07/mac-setup/</guid>
            <description>
                <![CDATA[맥을 맥답게 사용하자. 윈도 기기와 달리 맥은 유닉스 기반의 OS(현재는 OS X)를 탑재하고 있다. 터미널 명령어만으로도 많은 부분을 설치하고 설정하고 실행할 수 있다. 그리고 그것이 크게 변경되지 않아 한번 익혀두면 몇년 또는 몇 십년을 동일하게 써먹을 수 있다. 윈도를 사용할 때는 뒤에 붙은 버전 숫자만큼 설치해야 한다는 우스개 소리가 있었을...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>맥을 맥답게 사용하자. 윈도 기기와 달리 맥은 유닉스 기반의 OS(현재는 OS X)를 탑재하고 있다. 터미널 명령어만으로도 많은 부분을 설치하고 설정하고 실행할 수 있다. 그리고 그것이 크게 변경되지 않아 한번 익혀두면 몇년 또는 몇 십년을 동일하게 써먹을 수 있다. 윈도를 사용할 때는 뒤에 붙은 버전 숫자만큼 설치해야 한다는 우스개 소리가 있었을 정도로 재설치도 자주 해야 했고, 독자적인 터미널 명령어를 따로 사용해야 했다. 지금 생각해도 참 멍청한 짓을 많이 했다.</p>

<p>윈도를 사용할 때의 버릇도 있고 이것저것 많은 앱을 설치하고 지우고하는 경우가 많아 맥에서도 시스템이 조금 이상하거나 느려지면 OS X를 깨끗이 재설치하는 방법을 택한다. 그나마 맥이니까 그 빈도는 많아야 6개월에 한번 정도다. 윈도 때는 정기적으로 3개월에 한번은 재설치를 하였다. 하긴 그 덕분에 클라우드 사용을 누구보다 열심히 하게되었지만..</p>

<p>각설하고 맥 설치와 환경 설정을 최대한 자동화하는 방법을 살펴보자. 실제로 맥을 재설치할 때 따르는 순서대로 포스팅하려고 하였다.</p>

<p>OS X를 재설치하기 전에 먼저 환경설정을 백업한다.</p>

<h2>환경설정 백업(Mackup)</h2>

<p><a href="http://j.mp/108GOMQ">Mackup</a>을 이용하여 기존 맥 OS X와 맥앱의 설정을 드랍박스에 저장한다. Homebrew로 설치하고 설정을 저장한다:</p>

<pre class="terminal">
brew install Mackup
mackup backup
</pre>

<p>Mackup은 맥 OS X 환경설정과 주요 앱들의 환경설정 파일을 드랍박스나 구글 드라이브의 mackup 디렉토리에 백업(복사)한 후 나중에 각 환경설정 디렉토리에 심링크를 생성하는 방식이다. 거의 모든 환경설정을 한방에 복원해주어서 한번 써보고 나서는 계속 쓰지 않을 수 없었다.</p>

<p>nvALT, Sublime Text, WebStorm, IntelliJIDEA, Emacs, Vim 등의 주요 에디터와 ITerm2, Oh My Zsh와 같은 터미널 관련 앱, Flux, VLC 등의 유틸리티, Filezilla, Git, Heroku, IPython, Dash와 같은 프로그래밍 관련 앱과 더불어 Fantastical, OmniFocus, PopClip과 같은 유무료 앱들의 환경설정 백업과 복원을 지원하다. 지원되는 앱들의 리스트는 <a href="https://github.com/lra/mackup#supported-applications">여기</a>에서 볼 수 있다.</p>

<p>이제 환경설정을 백업했으니 OS X를 새로 설치한다.</p>

<h2>매버릭스 설치</h2>

<p>부팅시 cmd+option+r로 복구모드에 들어가면 재설치하거나 디스크유틸리티를 사용하여 데이타 전체를 지우고 매버릭스를 클린 설치한다. <a href="http://bugbear5.tumblr.com/post/98292553121/osx">디스크 데이터를 지우지 않고도 가능하다</a>는 이야기가 있는데 난 실패했다.</p>

<p><strong>이젠 요세미티가 안정적으로 동작하여 업그레이드한 상태이다.</strong></p>

<h2>드랍박스 설치 및 동기화</h2>

<ol>
<li><p>커맨드 라인에서 설치를 원활히 하기 위해서는 앱스토어에서 <a href="https://itunes.apple.com/kr/app/xcode/id497799835?mt=12">Xcode</a>를 미리 설치한다.</p></li>
<li><p>Mackup 설정화일과 설치와 관련한 문서가 들어있으니 제일 먼저 드랍박스를 설치한다. <a href="https://www.dropbox.com/">Dropbox 공식 사이트</a>에서 맥용 프로그램을 다운로드하여 설치하고 바로 동기화 시작한다. <code>getmacapps.com</code>이나 <code>brew cask</code>로도 설치할 수 있으나 번거롭거나 매우 느리다.</p></li>
</ol>

<h2>시스템 환경설정</h2>

<p>OS X 환경설정 중 일단 하지 않으면 답답한 부분부터 먼저 하고 글 후반에 다시 설명한다.</p>

<h3>키보드 조합키의 변경 및 윈도우 관련 유틸리티 설치</h3>

<p>독의 환경설정을 우클릭하여 트랙패드와 키보드에서 다음과 같이 설정한다.(OS X 기본 설정을 좋아하는 사람은 하지 않아도 된다.)</p>

<ol>
<li>트랙패드 &gt; 탭하여 클릭하기를 선택한다.</li>
<li><p>키보드 &gt; 키보드탭 &gt; 조합키를 다음과 같이 변경한다.</p>

<p>Caps Lock &gt; Control<br>
Option &gt; Command<br>
Command &gt; Option</p></li>
<li><p><a href="http://spectacleapp.com/">Spectacle</a>을 설치한다. 앱스토어에서 <a href="https://itunes.apple.com/kr/app/window-tidy/id456609775?mt=12">Window Tidy</a> 설치 후 10x10 그리드 추가한 후 자주 쓰는 가로 2와 가로 8 화면을 설정한다.</p></li>
</ol>

<h3>한영 변환</h3>

<p><a href="http://gureum.io/">구름 입력기</a>를 주로 애용하였으나 시스템 충돌이 날 경우가 있다. 그럴 경우에는 <a href="http://j.mp/IdJkjh">Shift + Space로 변경</a>을 그대로 따라한다. <a href="https://itunes.apple.com/kr/app/ishud/id484757536?mt=12">isHUD</a>를 이용하여 우측 <code>CMD</code>키를 추가하고 한영전환을 화면 정가운데에서 크게 볼 수 있게 한다.</p>

<h2>기초앱 자동설치(Get Mac Apps)</h2>

<p><a href="http://getmacapps.com/">Get Mac Apps - Install Multiple Apps With Ease</a>에서 원하는 앱을 선택한 후 설치 스크립트를 터미널에서 실행하면 10개 정도의 앱은 10분이면 설치한다. 크롬, 파이어폭스, VLC, Sublime Text 3, iterm2, flux, Alfred, Gimp, FileZilla, Github 등을 설치한다.</p>

<p>자세하게 설명하면, 원하는 앱들을 체크한 후에 제일 밑에 있는 <code>Install These</code> 버튼을 클릭하면 다음과 같은 터미널 명령어가 만들어진다. 그대로 복사한 후에 터미널에서 실행하면 차례대로 설치된다:</p>

<pre class="terminal">
curl -s http://www.getmacapps.com/raw/w6htssb0n6p | sh
</pre>

<ul>
<li>위의 명령어는 임시 디렉토리를 만들고 선택한 앱의 압축화일을 풀고 애플리케이션 디렉토리로 프로그램을 설치한 후, 마지막으로 필요없는 파일을 제거해주는 커맨드 명령어들을 실행한다. <a href="http://www.getmacapps.com/raw/w6htssb0n6p">http://www.getmacapps.com/raw/w6htssb0n6p</a>에서 실행되는 명령어들을 미리 볼 수도 있다.</li>
</ul>

<h2>웹브라우저</h2>

<p>예전에는 크롬을 주로 사용하였으나 메모리를 너무 많이 잡아먹는 현상때문에 크롬 개발자 도구를 사용할 때 외에는 파이어폭스를 주로 사용한다.</p>

<p>파이어폭스와 크롬 자체의 동기화 기능을 이용하여 북마크와 확장, 히스토리 등을 동기화한다. 애용하는 확장이나 북마클릿은 <a href="http://nolboo.github.io/blog/2015/05/02/browser-extension-bookmarklet/">애용하는 웹브라우저 확장과 북마클릿</a>란 별도의 글로 분리했다.</p>

<h2>cask</h2>

<h3>Homebrew 설치</h3>

<p>OS X 용 패키지 관리자인 <a href="http://brew.sh/index_ko.html">Homebrew</a>를 설치한다:</p>

<pre class="terminal">
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</pre>

<p>Xcode를 설치하지 않았다면 설치한다.</p>

<pre class="terminal">
brew doctor
</pre>

<p>로 시스템을 준비한다.</p>

<h3><a href="http://caskroom.io/">Homebrew Cask</a>로 앱 설치</h3>

<p><a href="http://caskroom.io/">Cask</a>를 설치한다.</p>

<pre class="terminal">
brew install caskroom/cask/brew-cask
</pre>

<p>node.js를 검색하고 설치한다.</p>

<pre class="terminal">
brew cask search telegram
brew cask install telegram
</pre>

<p>위와 같은 방식으로 원하는 글 쓰는 현재 2489의 앱을 설치할 수 있고, <code>~/Caskfile</code>라는 dotfiles을 이용하여 여러 개의 앱을 연이어 설치할 수 있다. 위의 <a href="http://getmacapps.com/">Get Mac Apps</a>의 대부분도 설치할 수 있으니 속도를 신경쓰지 않는다면 Cask로 통합할 수도 있다.</p>

<h2>주로 사용하는 맥앱과 웹앱</h2>

<p>포스트가 너무 길어져 <a href="http://nolboo.github.io/blog/2015/05/06/mac-web-app/">주로 사용하는 맥앱과 웹앱</a>란 별도의 글로 분리했다.</p>

<h2>드랍박스 동기화 완료 후</h2>

<p>Dropbox 안의 <code>도큐멘트</code> 디렉토리의 모든 화일을 루트의 <code>도큐멘트</code> 디렉토리로 먼저 이동시킨다.</p>

<p>다시 도큐멘트 디렉토리가 드랍박스와 동기화되도록 다음 명령어로 심볼릭 링크를 만든다.</p>

<pre class="terminal">
ln -s /Users/nb/Documents ~/Dropbox/
</pre>

<ul>
<li>참고 : <a href="http://www.dropboxwiki.com/tips-and-tricks/sync-other-folders">Sync Folders Outside of the Dropbox Folder With Dropbox</a></li>
</ul>

<p>위키와 블로그 글을 작성할 때 nvALT와 서브라임을 주로 이용하는데 nvALT는 검색 기능이 탁월하고 빠르나 서브 디렉토리가 지원되지 않는다. 위키 디렉토리와 블로그 글을 한 번에 검색할 때는 서브라임의 검색 기능 <code>CMD+Shift+F</code>을 이용한다. 이를 위해서 위키 디렉토리에 지킬 블로그의 <code>_post</code>의 심볼릭 링크를 만들어 준다:</p>

<pre class="terminal">
ln -s /Users/nb/Documents/지킬블로그/_post ~/Dropbox/위키디렉토리
</pre>

<p><code>지킬블로그</code>와 <code>위키디렉토리</code>는 각자의 환경에 맞게 입력하여야 한다. 필자의 경우는 정확히 <code>ln -s /Users/nb/Documents/nolboo.github.io/_post ~/Dropbox/wiki</code>이다.</p>

<h3>mackup 복원</h3>

<p><a href="http://j.mp/108GOMQ">Mackup</a>을 설치하고 드랍박스에 미리 저장된 설정을 복원한다:</p>

<pre class="terminal">
brew install Mackup
mackup restore
</pre>

<p>위의 명령어로 전부 복원된다. 간단하다.</p>

<h2>시스템 환경설정 나머지</h2>

<ul>
<li><p>대시보드 없애기: Option+F3으로 &quot;Dashboard를 작업 공간으로 보기&quot;를 체크 해제한다. 잘 쓰지 않는 대쉬보드는 F12로 보는 것이 더 낫다. 데스크탑 보기는 F11이다. 추가로 핫코너에서 네 구석의 마우스 동작을 설정한다.</p></li>
<li><p><a href="https://github.com/ttscoff/MMD-QuickLook">멀티마크다운 퀵룩</a>나 <a href="http://moss.io/blog/support-for-markdown-in-osx-quicklook/">QLMarkdown</a>을 다운로드하고, <code>~/Library/QuickLook/</code> (없으면 만든다)에 복사한 후 터미널에서 <code>qlmanage -r</code>으로 퀵룩 제너레이터 목록을 재로딩한다. 이제 파인더에서 마크다운을 스페이스 키로 바로 볼 수 있다.</p></li>
<li><p><a href="http://peterdowns.com/posts/open-iterm-finder-service.html">파인더에서 iTerm 열기</a>의 마지막 예제대로 iTerm 실행앱을 오토메이터로 만들어 응용프로그램 디렉토리에 저장한다. cmd 키를 누른 상태로 파인더의 메뉴 아이콘 영역에 드래그앤드랍하여 아이콘을 등록한다. 이제 원클릭으로 현재 디렉토리에서 iTerm을 실행할 수 있다.</p></li>
<li><p><a href="http://ohmyz.sh/">Oh My Zsh</a>를 설치하여, 터미널을 좀더 편하고 아름답게 사용한다:</p></li>
</ul>

<pre class="terminal">
curl -L http://install.ohmyz.sh | sh
</pre>
<div class="highlight"><pre><code class="language-text" data-lang="text">- [zsh 갖고 놀기](http://coding-korea.blogspot.kr/2012/09/zsh.html)
- [zsh 꿀팁 / 자주 쓰는 기능](http://blog.subicura.com/zsh-tip/)
</code></pre></div>
<blockquote>
<p><a href="https://github.com/sorin-ionescu/prezto">prezto</a>가 <a href="http://docs.likejazz.com/clean-install-yosemite/">좋다고 해서</a> 테스트 예정이다.</p>
</blockquote>

<h2>돗파일(dotfiles)</h2>

<p>사실 이 부분 때문에 이 포스팅을 계속 마무리 짓지 못했다. 유명한 돗파일을 살펴봤는데 전부 설정하는 부분만 있고, 다시 복원하는 부분은 수동으로 검색을 해야했다. 돗파일은 맥 시스템의 환경설정 자동화를 위해 꼭 필요하지만 사용자마다 호불호가 갈리는 부분이 많다. 복원하는 명령어를 코멘트 형태라도 제공하지 못한다면 호기심으로라도 돗파일을 실행하는 사람들은 다시 복원하는 데에 애를 먹게 되고, 심하면 OS X를 새로 깔아야 한다. 사용자마다 자신만의 돗파일을 만들고 다른 돗파일을 참조하여 원하는 명령어를 추가하는 것이 나을 것이다. 그래서 유명한 돗파일을 소개하는 정도로만 포스팅하기로 했다.</p>

<p>깃허브에서도 돗파일에 대한 관심이 많아 유명한 돗파일을 모아놓은 페이지를 별도로 서브도메인까지 주어서 운영하고 있다. <a href="http://dotfiles.github.io/">GitHub does dotfiles - dotfiles.github.io</a>에서 추천하는 <a href="https://github.com/holman/dotfiles">Zach Holman&#39;s dotfiles</a>과 <a href="https://mths.be/dotfiles">Mathias Bynens&#39; dotfiles</a>만 봐도 재미있는 부분이 많다. 특히 마티아스의 돗파일 중 <code>.osx</code> 부분은 전설적이라고 소개하고 있다. 위에서 설명한 brew와 Cask에 관심있는 분들은 <code>~/Brewfile</code> 파일과 <code>~/Caskfile</code> 파일을 살펴보면 도움이 많이 될 것이다.</p>

<p>OS X 환경설정 툴인 <a href="http://bit.ly/Re69bI">osxc</a>도 있으나 아직 테스트해보지는 못했다. 설치와 환경설정 부분을 제대로 테스트해보려면 다시 깔고 설치하고 환경설정하는 것을 반복해야 하는 등의 시간과 수고가 많아서 아직 엄두가 나지 않았다. 일단 소개만 하는 것으로 퉁친다.ㅎㅎ</p>

<ul>
<li><a href="https://github.com/herrbischoff/awesome-osx-command-line">herrbischoff/awesome-osx-command-line</a></li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[주로 사용하는 맥앱과 웹앱]]></title>
            <link>/blog/2015/05/06/mac-web-app/</link>
            <pubDate>Wed, 06 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[macapp]]></category>
        
            <category><![CDATA[webapp]]></category>
        
            <guid>/blog/2015/05/06/mac-web-app/</guid>
            <description>
                <![CDATA[현재 주로 사용하고 있는 맥앱과 웹앱을 한 곳에 정리한다. 관심은 있으나 아직 많이 사용하지 않은 앱도 포함하였으며, 지속적으로 업데이트하면서 관리할 예정이다. 여러 앱과 환경설정을 자동화하는 방법은 이 포스트에 별도로 정리하였다. Sublime Text 3 패키지 컨트롤 설치 터미널에서 subl . 등으로 편하게 사용하기 위해 단축키를 지정한다. 상세 참조 : subl 터미널...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>현재 주로 사용하고 있는 맥앱과 웹앱을 한 곳에 정리한다. 관심은 있으나 아직 많이 사용하지 않은 앱도 포함하였으며, 지속적으로 업데이트하면서 관리할 예정이다.</p>

<p>여러 앱과 환경설정을 자동화하는 방법은 이 <a href="http://nolboo.github.io/blog/2015/05/07/mac-setup/">포스트</a>에 별도로 정리하였다.</p>

<h2><a href="http://www.sublimetext.com/3">Sublime Text 3</a></h2>

<ul>
<li><a href="https://sublime.wbond.net/installation">패키지 컨트롤 설치</a></li>
<li>터미널에서 <code>subl .</code> 등으로 편하게 사용하기 위해 단축키를 지정한다. 상세 참조 : <a href="http://blog.outsider.ne.kr/867">subl 터미널 명령어 설정</a></li>
</ul>

<pre class="terminal">
ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/subl
</pre>

<p>mackup으로 환경설정을 복원했다면 이 때 아래 패키지들이 한꺼번에 설치되는 것을 경험할 수 있다. Mackup에 관해서는 <a href="http://nolboo.github.io/blog/2015/05/07/mac-setup/">맥 설치와 환경 설정을 최대한 자동화하기</a>에서 설명하였다.</p>

<h3>Markdown 패키지</h3>

<p>서브라임에서의 자세한 방법을 알고 싶은 분은 <a href="http://nolboo.github.io/blog/2014/04/15/how-to-use-markdown/">놀부의 마크다운 사용법 - 무료 툴을 중심으로 한 워크플로우</a>를 참조하기 바란다.</p>

<ul>
<li><a href="https://github.com/SublimeText-Markdown/MarkdownEditing">MarkdownEditing</a></li>
<li><a href="https://github.com/timonwong/OmniMarkupPreviewer">OmniMarkupPreviewer</a></li>
<li><a href="https://github.com/noahcoad/open-url">Open URL</a></li>
<li><a href="https://github.com/vkocubinsky/SublimeTableEditor">Table Editor</a></li>
</ul>

<h3>웹 디자인 패키지</h3>

<ul>
<li><a href="https://github.com/Monnoroch/ColorHighlighter">ColorHighlighter</a></li>
<li><a href="https://sublime.wbond.net/packages/BracketHighlighter">BracketHighlighter</a></li>
<li><a href="https://sublime.wbond.net/packages/Emmet">Emmet</a></li>
<li><a href="https://sublime.wbond.net/packages/Emmet%20Css%20Snippets">Emmet Css Snippets</a></li>
<li><a href="https://sublime.wbond.net/packages/LiveReload">LiveReload</a></li>
<li><a href="https://sublime.wbond.net/packages/SCSS">SCSS</a></li>
<li><a href="https://sublime.wbond.net/packages/TrailingSpaces">TrailingSpaces</a></li>
</ul>

<h3>Git 패키지</h3>

<ul>
<li><a href="https://github.com/bgreenlee/sublime-github">GitHub</a></li>
<li><a href="https://sublime.wbond.net/packages/Gist">Gist</a></li>
</ul>

<h3>참고할만한 글</h3>

<ul>
<li><a href="https://medium.com/design-notes/a-designers-sublime-text-setup-e3963f8d79da">A Designer’s Sublime Text Setup — Design Notes — Medium</a></li>
<li><a href="http://josephralph.co.uk/my-sublime-text-3-development-setup/">My Sublime Text 3 Development Setup</a></li>
<li><a href="http://proletariat.com/2014/12/02/zen-sublime-text-configuration/">The Zen of Sublime Text Configuration</a></li>
<li><a href="http://likejazz.com/post/102824813705/sublime-text">Sublime Text</a></li>
<li><a href="http://editorconfig.org/">EditorConfig</a></li>
</ul>

<h2>개발관련 맥앱</h2>

<ul>
<li><a href="https://itunes.apple.com/us/app/dash/id458034879?ls=1&amp;mt=12">Dash - API Docs &amp; Snippets</a></li>
<li><a href="https://www.jetbrains.com/ruby/">RubyMine</a></li>
<li><a href="http://www.jetbrains.com/webstorm/">WebStorm</a></li>
<li><a href="https://www.python.org/download">Download Python</a></li>
<li><a href="https://www.sourcetreeapp.com/">SourceTree</a>

<ul>
<li><a href="https://mac.github.com/">GitHub for Mac</a></li>
</ul></li>
<li><a href="http://anvilformac.com/">Anvil for Mac - Run your sites locally</a> </li>
<li><p><a href="http://pow.cx/">Pow: Zero-configuration Rack server for Mac OS X</a>를 GUI로 간단하게 사용할 수 있도록 루트디렉토리.dev </p>

<ul>
<li>locally 설치 : <code>npm install -g locally</code></li>
<li><a href="http://xip.io/">xip.io: wildcard DNS for everyone</a>를 <a href="http://amoeba.192.168.0.6.xip.io/">http://amoeba.192.168.0.6.xip.io/</a></li>
<li>터미널에서 간단히 웹서버 띄우는 방법 2가지

<ul>
<li>python -m SimpleHTTPServer 8000</li>
<li>ruby -run -e httpd . -p 8000</li>
</ul></li>
</ul></li>
<li><p><a href="http://macnews.tistory.com/2018">Sip</a> : 화면에서 색상 코드를 추출할 수 있는 인기 맥용 컬러피커 프로그램. </p>

<ul>
<li>기본적인 컬러피커 패널에 <a href="http://download.panic.com/picker/">Developer Color Picker</a>도 추가해놓는다. 다운로드한 후에 <code>~/Library/ColorPickers</code>로 앱을 이동한다. 디렉토리가 없으면 만든다.</li>
</ul></li>
<li><p><a href="https://imageoptim.com/">ImageOptim — better Save For Web</a></p></li>
<li><p><a href="http://www.pingendo.com/">Pingendo</a>: 부트스트랩 프로토타이핑</p></li>
</ul>

<h2>맥앱</h2>

<ul>
<li><a href="http://smoothmouse.com/">SmoothMouse</a></li>
<li><a href="http://www.freemacsoft.net/appcleaner/">AppCleaner</a></li>
<li><a href="http://www.alfredapp.com/">Alfred</a></li>
<li><a href="https://code.google.com/p/macosx-nosleep-extension/">nosleep</a></li>
<li><a href="http://www.shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock">Day-O</a> : 기본 날자 아이콘을 숨기고 날짜 형식을 <code>h:mm</code>으로 설정하여 보여준다.</li>
<li><a href="http://www.macbartender.com/">Bartender</a> : 메뉴바 정리 앱</li>
<li><a href="http://bahoom.com/hyperswitch/">HyperSwitch</a>: <a href="http://macnews.tistory.com/1022">OS X 앱 전환 방식의 불편함을 완벽히 보완해주는 HyperSwitch</a></li>
<li><a href="http://www.rugarciap.com/turbo-boost-switcher-for-os-x/">Turbo Boost Switcher</a>: <a href="http://macnews.tistory.com/3393">CPU 터보 부스트를 강제로 비활성화 시켜 맥북 배터리 더 오래 사용하기</a> </li>
<li><a href="https://itunes.apple.com/app/optopt/id989799277?mt=12">OptOpt</a>: <a href="http://macnews.tistory.com/3330">프로그램마다 단축키를 지정할 수 있는 응용 프로그램 전환기</a></li>
<li><a href="http://ankisrs.net/">Anki</a>: 플래시 카드</li>
<li><a href="https://itunes.apple.com/kr/app/noizio/id928871589?mt=12">Noizio</a>: <a href="http://macnews.tistory.com/2703">[추천 무료앱] 이제 소음도 섞어서 듣자? 상황에 따른 8가지 소리를 자유롭게 조합할 수 있는 집중력 향상 앱 &#39;Noizio&#39;</a></li>
<li><p><a href="https://itunes.apple.com/kr/app/commander-one-free-dual-pane/id1035236694?mt=12">Commander One - free dual-pane file manager</a></p></li>
<li><p><a href="http://www.gimp.org/downloads/">GIMP</a></p></li>
<li><p><a href="http://ridibooks.com/support/app/download">리디북스</a>: 전자책 뷰어</p></li>
<li><p><a href="http://www.videolan.org/vlc/download-macosx.html">VLC media player</a></p></li>
<li><p><a href="http://gom2.gomtv.com/release/gom_player_mac.htm">곰플레이어</a></p></li>
<li><p><a href="https://www.literatureandlatte.com/download_mac.php">Scrivener</a>: <a href="http://macnews.tistory.com/2494">Scrivener 튜토리얼 가이드 한글번역본</a></p></li>
</ul>

<h3>앱스토어</h3>

<h4>유료</h4>

<ul>
<li><a href="https://itunes.apple.com/us/app/boom-experience-best-audio/id415312377?mt=12">Boom</a>: 맥프레를 홈시어터로 바꿔주는 사운드 향상 앱</li>
<li><a href="https://itunes.apple.com/app/id451557061?mt=12">Kuvva wallpapers</a></li>
<li><a href="https://itunes.apple.com/kr/app/window-tidy/id456609775?mt=12">Window Tidy</a></li>
<li><a href="http://www.macbartender.com/">Bartender</a></li>
<li><a href="https://itunes.apple.com/kr/app/pomodoroapp-simple-pomodoro/id705103149?mt=12">PomodoroApp</a></li>
<li><a href="https://itunes.apple.com/us/app/fun-math-games/id876540291?mt=12">Copy&#39;em Paste</a></li>
<li><a href="http://smilesoftware.com/TextExpander">TextExpander 4</a></li>
<li><a href="https://itunes.apple.com/kr/app/autokeyboard/id908553210?mt=12">AutoKeyboard</a>: <a href="http://macnews.tistory.com/2606">응용 프로그램을 전환할 때 입력기를 자동으로 전환해주는 편리한 유틸리티</a></li>
<li><a href="https://itunes.apple.com/app/id796275163?mt=12">Total Manager</a></li>
<li><a href="https://itunes.apple.com/kr/app/scapple/id568020055?mt=12">Scapple</a> 

<ul>
<li><a href="http://reinia.net/916">Scapple 사용기(1) - Scapple의 특징, 구매, 설치까지</a></li>
</ul></li>
<li><a href="http://toketaware.com/">iThoughtsX | toketaWare</a></li>
<li><p><a href="https://flexibits.com/fantastical">Fantastical</a></p>

<ul>
<li><a href="http://macnews.tistory.com/3023">[추천 무료앱] OS X 메뉴 막대에 깔끔한 달력을 달아 드립니다 &#39;Itsycal&#39;</a></li>
<li><a href="http://macnews.tistory.com/2480">1년치 일정을 한눈에 살펴보고 관리할 수 있는 &#39;popCalendar&#39;</a></li>
</ul></li>
<li><p><a href="https://itunes.apple.com/us/app/popclip/id445189367?mt=12">PopClip</a></p></li>
</ul>

<p>bitly, Todoist, Dash, Pocket 확장 등을 설치하고, 단디 한글 맞춤법 검사기 확장은 <a href="http://soooprmx.com/wp/archives/3863">숩님이 제작하신 것</a>을 자주 사용했지만, 최근엔 <a href="https://twitter.com/seoulrain/statuses/541397266066440193">미남이님이 제작하신 것</a>을 주로 사용한다.(두 분 모두 고맙습니다!)</p>

<ul>
<li><a href="https://itunes.apple.com/kr/app/mubiseuteu/id461788075?mt=12">무비스트</a></li>
<li><a href="https://itunes.apple.com/app/daisydisk/id411643860?mt=12&amp;ign-mpt=uo%3D4">DaisyDisk</a>: 하드디스크 분석과 삭제, 뛰어난 그래픽으로 한눈에 디스크를 정리할 수 있다.</li>
<li><a href="https://itunes.apple.com/kr/app/day-one-ilgi-daieoli/id422304217?mt=12">Day One</a>: 일기 다이어리 작성</li>
<li><a href="https://itunes.apple.com/kr/app/id623795237?mt=12">Ulysses</a>: 마크다운 에디터앱</li>
<li><a href="https://itunes.apple.com/app/airmail/id573171375?mt=12">Airmail</a></li>
</ul>

<h4>무료</h4>

<ul>
<li><a href="https://justgetflux.com/">f.lux</a>: 자동 화면 밝기 조절</li>
<li><a href="https://todoist.com/macApp">Todoist</a>: 최고의 무료 맥 할일 목록 및 작업 목록 관리 앱</li>
<li><a href="https://desktop.telegram.org/">Telegram Desktop</a>: 최고의 메시징 앱</li>
<li><a href="https://itunes.apple.com/en/app/id545578261">mysms</a>: SMS 문자 보내기와 동기화</li>
<li><a href="https://itunes.apple.com/us/app/janetter-for-twitter/id478844335?ls=1&amp;mt=12">Janetter for Twitter</a></li>
<li><a href="https://www.monosnap.com/welcome">Monosnap</a> : Free Screenshot Tool</li>
<li><a href="https://itunes.apple.com/us/app/simplenote/id692867256?ls=1&amp;mt=12">Simplenote</a></li>
<li><a href="http://www.laplock.co/">laplock</a>: 맥북 잠금 앱. 현재 배포 중단이며 앱스토어에 올린다고 한다.</li>
</ul>

<h3>참고할만한 글</h3>

<ul>
<li><a href="http://www.labnol.org/software/essential-mac-utilities/9479/">The Best Mac Apps and Utilities for Mac OS x</a></li>
<li><a href="https://github.com/iCHAIT/awesome-osx">Awesome OS X</a></li>
</ul>

<h2>웹앱</h2>

<ul>
<li><a href="https://www.inoreader.com/">inoreader</a>: 하루 한 두번은 사용하는 RSS 리더. 안드/iOS 앱도 있다.</li>
<li><a href="https://getpocket.com/">Pocket</a></li>
<li><a href="http://bit.ly/UDCz17">Workflowy</a>: 최고의 아웃라이너 앱!</li>
<li><a href="https://trello.com/">Trello</a></li>
</ul>

<h2>검토용 앱</h2>

<ul>
<li><a href="http://zoommyapp.com/">Zoommy</a>: ALL FREE STOCK PHOTOS IN ONE PLACE</li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[루비 온 레일즈로 블로그 만들기]]></title>
            <link>/blog/2015/05/05/web-application-architecture/</link>
            <pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[Coursera]]></category>
        
            <category><![CDATA[ruby]]></category>
        
            <category><![CDATA[rails]]></category>
        
            <category><![CDATA[ror]]></category>
        
            <category><![CDATA[blog]]></category>
        
            <guid>/blog/2015/05/05/web-application-architecture/</guid>
            <description>
                <![CDATA[뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌인 Web Application Architectures를 수강한 내용을 정리해 보았다. 루비도 잘 모르고, 레일즈도 잘 모르는 상황에서 기록을 위해 정리했고, 번역에 시간을 들일 상황이 없어서 그냥 영문으로 남겨버린 경우도 많아서 읽는 분들한테는 좋은 포스팅이 되지는 않는 것 같다. 지송ㅎㅎ 간략하게 살펴보고 위 강좌의 링크에서 직접 강연을...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌인 <a href="https://class.coursera.org/webapplications-003">Web Application Architectures</a>를 수강한 내용을 정리해 보았다. 루비도 잘 모르고, 레일즈도 잘 모르는 상황에서 기록을 위해 정리했고, 번역에 시간을 들일 상황이 없어서 그냥 영문으로 남겨버린 경우도 많아서 읽는 분들한테는 좋은 포스팅이 되지는 않는 것 같다. 지송ㅎㅎ 간략하게 살펴보고 위 강좌의 링크에서 직접 강연을 듣는 것이 좋을 것 같다. 대체적으로 강의 내용이 쉽고 친절하게 진행되기 때문에 루비와 레일즈 초보자에게는 괜찮은 강좌라고 생각된다.</p>

<p>루비 언어에 대한 부분은 글이 너무 길어져 며칠 전 <a href="http://nolboo.github.io/blog/2015/05/03/ruby-basic/">루비 언어 기초</a>로 별도 정리하였다.</p>

<h2>Design Pattern</h2>

<p>디자인 패턴이란 특별한 맥락 안에 있는 일반적인 디자인 문제를 풀기위해 객체와 클래스의 상호작용에 대해 설명하는 것이다.</p>

<p>디자인 패턴은 계속해서 재사용할 수 있는 추상적인 템플릿이다.</p>

<h3>3-Tier Architecture</h3>

<ul>
<li><strong>Presentation tier</strong> : User’s web browser.</li>
<li><strong>Application (logic) tier</strong> : The web server and logic associated with
generating dynamic web content, e.g., collecting and formatting the
results of a search.</li>
<li><strong>Data tier</strong> : A database.</li>
</ul>

<h3>6-Tier Web Application Architecture</h3>

<p>The <strong>Application tier</strong> is often subdivided into two tiers:<br>
- <em>Business logic tier</em> : Models the business objects associated with the<br>
application, e.g., accounts, inventories, etc., and captures the business<br>
rules and workflows associated with how these processes can be<br>
processed and manipulated.<br>
- <em>Data access tier</em> : Responsible for accessing data, and passing it to the<br>
business logic tier, e.g., account balances, transactions, etc.</p>

<p>The <strong>Presentation tier</strong> is often subdivided into two tiers:<br>
- <em>Client tier</em> : client-side user interface components.<br>
- <em>Presentation logic tier</em> : server-side scripts for generating web pages.</p>

<p>Finally, the web server is often separated out into its own <strong>Web tier</strong>.</p>

<p><img src="https://farm9.staticflickr.com/8716/16377332113_de304045b0_o.jpg" alt=""></p>

<h2>루비온 레일즈 설치</h2>

<p>강좌에서 <a href="http://railsapps.github.io/installing-rails.html">Install Rails</a>를 바로 링크하고 있다. 꼼꼼하고 친절하게 작성된 문서이며, 덕분에 쉽게 설치할 수 있었다. 맥에서 설치하였으며 간단히 그 과정을 요약했다. 잘 안될 경우에는 <a href="http://railsapps.github.io/installrubyonrails-mac.html">Install Ruby on Rails 4.2 · Mac OS X</a>의 자세한 설명을 참고한다.</p>

<p>Xcode가 이미 설치되어 있는지 확인한다.</p>

<pre class="terminal">
xcode-select -p
/Applications/Xcode.app/Contents/Developer
</pre>

<ul>
<li>만약 결과가 <code>/Applications/Apple Dev Tools/Xcode.app/Contents/Developer</code>로 나타난다면 Xcode를 지우고 다시 설치해야한다.</li>
</ul>

<p>RVM은 Homebrew를 요구하므로 Homebrew를 먼저 설치한다.</p>

<pre class="terminal">
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</pre>

<p>RVM을 설치한다.</p>

<pre class="terminal">
\curl -L https://get.rvm.io | bash -s stable --ruby
</pre>

<ul>
<li>RVM 설치 관련 한글 추천글: <a href="http://bit.ly/1Fc8SDT">멘붕없이 RVM과 루비 설치하기</a> </li>
</ul>

<p>RVM을 최신판으로 업데이트하고 Ruby를 설치한다.</p>

<pre class="terminal">
rvm get stable --autolibs=enable
rvm install ruby
rvm --default use ruby-2.2.0
</pre>

<p>RubyGems의 버전을 체크하고 업데이트 한다.</p>

<pre class="terminal">
gem -v
gem update --system
</pre>

<p>빠른 Gem 설치를 위해 도큐먼트를 설치하지 않게 할 수 있다.</p>

<pre class="terminal">
echo "gem: --no-document" >> ~/.gemrc
</pre>

<p>Nokogiri를 설치한다.</p>

<pre class="terminal">
gem install nokogiri
</pre>

<p>최신 안정판 Rails를 설치한다.</p>

<pre class="terminal">
rvm use ruby-2.2.0@rails4.2 --create
gem install rails
rails -v
</pre>

<p>프로젝트 디렉토리에 gemset를 만들고 레일즈를 설치하고 새 앱을 만드는 방법은 다음과 같다:</p>

<pre class="terminal">
mkdir myapp
cd myapp
rvm use ruby-2.2.0@myapp --ruby-version --create
gem install rails
rails new .
</pre>

<ul>
<li><code>--ruby-version</code> 옵션은 루트 디렉토리에 <code>.ruby-version</code>과 <code>.ruby-gemset</code> 화일을 만든다. RVM이 앱의 루트 디렉토리에 있는 이 파일을 인식하고 Ruby 버전과 gemset을 로드한다. 초보자에게 추천되는 <code>rails new myapp</code> 명령보다는 이런 접근이 더 쉽다.(그러나 설치 문서와 달리 본 강의에서는 <code>rails new myapp</code>으로 가르친다:;)</li>
</ul>

<p>잘 작동하는지 점검하기 위해 smoke test를 한다.</p>

<pre class="terminal">
rake -T
</pre>

<p>RVM을 사용하면 <code>rake</code> 대신 <code>bundle exec rake</code>를 실행할 필요가 없다.</p>

<p>웹서버를 실행하고:</p>

<pre class="terminal">
rails server
</pre>

<p>웹브라우저에서 <code>http://localhost:3000</code>를 열면 레일즈 초기 화면이 등장한다.</p>

<h3>레일즈 기본 디렉토리 구조</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">.   RAILS.root
├── app         : Model/View/Controller 코드
├── bin         : Helper 스크립트(bundle, rails, rake)
├── config      : App, database, route 환경설정
├── db          : Database schema and migration
├── *Gemfile*   : 요구되는 gem을 지정 
├── lib         : 
├── log         : 앱 로그
├── public      : 앱의 웹루트
├── test        : 테스트
├── tmp         :
└── vendor      :
</code></pre></div>
<h3>참고 링크</h3>

<ul>
<li><a href="https://www.ruby-lang.org/ko/documentation/installation/">루비 설치하기</a></li>
<li><a href="http://bigmatch.i-um.net/2013/12/%EB%A9%98%EB%B6%95%EC%97%86%EC%9D%B4-rvm%EA%B3%BC-%EB%A3%A8%EB%B9%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/">멘붕없이 RVM과 루비 설치하기 | Bigmatch</a></li>
<li><a href="https://www.youtube.com/watch?v=lBnO2xvwO0k">Install Rails On Mac OS</a>: 국내 RoRLab 동영상</li>
</ul>

<h2>블로그 만들기</h2>

<p>동작하는 블로그를 만들기 위해서는 다음 명령어를 순서대로 입력하면 된다:</p>

<pre class="terminal">
rails new blog
cd blog
bundle install
rails generate scaffold post title:string body:text
rails generate scaffold comment post_id:integer body:text
rake db:migrate
rake routes
rails server
</pre>

<p><code>http://localhost:3000/posts#index</code>에서 첫번째 포스트를 입력한다. <code>http://localhost:3000/comments</code>에서 댓글을 입력할 수 있다.</p>

<p>블로그 데이타 베이스가 생성되었는지 살펴보는 툴을 소개한다:</p>

<ul>
<li><a href="http://sourceforge.net/projects/sqlitebrowser/">DB Browser for SQLite</a></li>
<li><a href="https://addons.mozilla.org/en-Us/firefox/addon/sqlite-manager/">SQLite Manager :: Add-ons for Firefox</a></li>
</ul>

<h3>CRUD</h3>

<p>– Create<br>
– Read<br>
– Update<br>
– Destroy</p>

<h3>Rails philosophy is based upon three principles:</h3>

<ul>
<li>Convention over Configuration : Common aspects of a web
application are provided (i.e., preconfigured) for you, so use them,
rather than fight against them!
Ideally, the developer should only have
to specify the unconventional aspects of the application.</li>
<li>Don’t Repeat Yourself (DRY) : Every piece of information should
have a single, unambiguous, authoritative representation within a
system. Duplication of code fragments throughout an application can
lead to logical contradictions, and in general make the application
more difficult to maintain.</li>
<li>Agile Development : Software development methodologies based on
iterative and incremental development, where requirements and code
evolve with minimal planning through self-organizing, cross-functional
teams</li>
</ul>

<p>레일즈에 대한 더 자세한 설명은 공식문서 <a href="http://rubykr.github.io/rails_guides/">Ruby on Rails 가이드</a>를 살펴보는 것도 좋다.</p>

<h2>Git</h2>

<p><img src="https://farm9.staticflickr.com/8774/16852966429_23481ee4d4_o.jpg" alt=""></p>

<pre class="terminal">
git init
</pre>

<p>위의 깃 초기화 명령을 실행하면 깃에서 레일즈 디렉토리를 인식해서 다음과 같이 제외할 파일을 미리 설정해준다.(오떰!)</p>

<pre class="terminal">
# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*
!/log/.keep
/tmp
</pre>

<p>변경 사항을 추가하고 커밋한다.</p>

<pre class="terminal">
git add .
git commit -m "2nd commit"
</pre>

<p>위의 두 명령어를 한번에 실행할 수도 있다.</p>

<pre class="terminal">
git commit -a -m "2nd commit"
</pre>

<p>깃에 대한 내용은 제 블로그의 <a href="http://nolboo.github.io/blog/2013/10/06/github-for-beginner/">완전 초보를 위한 깃허브</a>를 참조한다.</p>

<h2>Relational Database</h2>

<ul>
<li><strong>schema</strong> : The structure/organization of the tables in a database</li>
<li><strong>entity-relationship model</strong> is a common way of abstractly capturing
a database schema</li>
</ul>

<p><a href="https://www.mysql.com/products/workbench/">MySQL Workbench</a>와 같은 툴 등을 이용하여 EER Diagram(enhanced entity relationship diagram)에 익숙해질 필요가 있다.</p>

<h3>Rails Databases</h3>

<ul>
<li>Development</li>
<li>Test</li>
<li>Production</li>
</ul>

<p><code>rails server</code> 명령은 개발자 모드에서 레일즈를 실행한다. 다른 모드로 실행하려면:</p>

<pre class="terminal">
rails server -e production
</pre>

<p>레일즈에 포함된 인기있는 프로덕션 데이타베이스는 <strong>PostgreSQL</strong>와 <strong>MySQL</strong>이다.</p>

<p>각각의 모드에서 사용하는 레일즈 데이터베이스는 <code>db/database.yml</code>에서 지정한다.</p>

<h4>Active Record Design Pattern</h4>

<p>Active Record pattern은 관계형 데이터베이스에 저장된 데이터를 접근할 때 사용된다. 특정 데이터베이스(SQLite, MySQL, PostgreSQL, SQL Server, Oracle 등)에 대한 걱정없이 CRUD 작업을 수행한다.</p>

<ul>
<li><p><strong>There’s a big problem</strong>: The classes and objects associated with an OO language are incompatible with the structure of relational databases.</p></li>
<li><p><strong>Active Records to the Rescue</strong>: This design pattern encapsulates that<br>
notion an object-relational mapping (ORM), i.e., a mapping between OO language constructs and relational databases constructs.</p></li>
</ul>

<p>The ORM provided by Active Records automatically converts object into constructs that can be stored in a database (and converts them back upon retrieval).</p>

<p>This creates, in effect, a “virtual object database” that can be used<br>
from within an OO language</p>

<h4>Active Records in Ruby</h4>

<p>The Active Record design pattern is provided in a Ruby module called <code>ActiveRecord</code>.</p>

<p>Using the functionality provided by this module you can:<br>
– Establish a connection to a database.<br>
– Create database tables.<br>
– Specify associations between tables that correspond to associations between the Ruby classes.<br>
– Establish an ORM between Ruby classes/objects/attributes and the tables/rows/columns in the underlying database.<br>
– Peform CRUD operations on Ruby ActiveRecord objects.</p>

<p><strong>The <code>ActiveRecord</code> module is built into Rails</strong> – the functionalities above are utilized when you create a Rails app and run scaffold and model generators.</p>

<p>The <code>ActiveRecord::Base.establish_connection</code> method uses the information in <code>./conifg/database.yml</code> in order to connect a Rails application to a database.</p>

<p>The <code>ActiveRecord::Migration</code> object is used to incrementally evolve your database schema over time – migrations update the <code>./db/schema.rb</code> file.</p>

<p>The <code>ActiveRecord::Schema.define</code> method, in <code>./db/schema.rb</code>, is created by inspecting the database and then expressing its structure programmatically using a portable (database-independent) DSL. This can be loaded into any database that <code>ActiveRecord</code> supports</p>

<h4><code>ActiveRecord</code> Module</h4>

<p>If you create a new class by inheriting <code>ActiveRecord::Base</code>, and call it <code>Post</code>, it is assumed a database table will exist that is called <code>posts</code>. I.e., it pluaralizes the name of the class, and then looks for a table with that name.</p>

<p>The <code>Base</code> class in the <code>ActiveRecord</code> module will inspect the <code>posts</code> database, and determine that it has <code>title</code> and <code>body</code> fields, and it will automatically add member variables (and accessors) with these same names in the<br>
<code>Post</code> class. I.e., it takes care of the ORM!</p>

<p>Furthermore, a query interface is also provided – in most cases, <code>ActiveRecord</code> insulates you from the need to use SQL.<br>
Ex.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Post.all
Post.first
Post.find_by(1)
Post.find_by_title(&quot;My First Post&quot;)
</code></pre></div>
<h4>Associations</h4>

<table><thead>
<tr>
<th>Relationship</th>
<th>Model with no foreign key</th>
<th>Model with foreign key</th>
</tr>
</thead><tbody>
<tr>
<td>one-to-one</td>
<td>has_one</td>
<td>belongs_to</td>
</tr>
<tr>
<td>many-to-one</td>
<td>has_many</td>
<td>belongs_to</td>
</tr>
<tr>
<td>many-to-many</td>
<td>has_and_belongs_to_many</td>
<td>*</td>
</tr>
</tbody></table>

<p><code>/models/post.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">has_many :comments, dependent: :destroy
</code></pre></div>
<p><code>/models/comments.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">belongs_to :post
</code></pre></div>
<p>를 추가하여 두 개의 모델을 연결하고, 포스트가 지워지면 댓글도 지워지도록 한다.</p>

<p><code>rails console</code>을 실행한 후:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">p = Post.all
p[0].comments
p[0].comments.size

Comment.all
p[1].destory
Comment.all
Post.all
</code></pre></div>
<p><code>rake routes</code>로 현재의 URL을 확인해보면 포스트와 댓글이 따로 되어있다. 포스트 다음에 댓글이 오도록 하려면:</p>

<p><code>/config/routes.rb</code>에서 다음과 같이 변경한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:comments</span>
  <span class="n">resources</span> <span class="ss">:posts</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:comments</span>
  <span class="k">end</span>
</code></pre></div>
<p>이제 <code>rake routes</code>로 확인해보면 <code>post_id/comments</code>와 같이 URL이 생성된다.</p>

<h4>Data Validation</h4>

<p>Data Validation은 사용자의 유효한 입력을 유도하기 위해서도 필요하지만, 일반적인 웹앱의 보안 약점인 SQL injection, cross-site scripting, buffer overflow attacks 등을 피하기 위해서도 필요하다.</p>

<h4>ActiveRecord Callbacks</h4>

<p><code>ActiveRecord</code> 객체는 라이프 사이클의 다양한 국면에서 integrity를 확실하게 하도록 호출 매서드를 갖는다.<br>
Ex.<br>
– Don’t create a new user object if the user already exists in the<br>
database.<br>
– Ensure that all of an object’s attributes are valid before allowing it to<br>
be saved to the database.<br>
– When destroying an object, destroy all of the objects that depend on it</p>

<p>Callbacks은 객체의 변화가 있을 때 작용되는 매서드이며, 일종의 훅이다.</p>

<h4>ActiveRecord Validations</h4>

<p><strong>Validations</strong>는 <code>ActiveRecord</code> 콜백의 하나이며, model에서 정의된다. <br>
예를 들면:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="n">validates_presence_of</span> <span class="ss">:name</span>
<span class="n">validates_numericality_of</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:only_integer</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="n">validates_</span> <span class="n">confirmation_of</span> <span class="ss">:email</span>
<span class="n">validates_length_of</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:in</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="o">.</span><span class="n">.</span><span class="mi">20</span>
</code></pre></div>
<p><code>/models/post.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">validates_presence_of :title
validates_presence_of :body
</code></pre></div>
<p><code>/models/comment.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">validates_presence_of :post_id
validates_presence_of :body
</code></pre></div>
<p>를 삽입하고, <code>rails server</code>를 실행하여, 확인한다.</p>

<h2>Ruby</h2>

<p><a href="http://nolboo.github.io/blog/2015/05/03/ruby-basic/">루비 언어 기초</a>에 별도로 정리하였다.</p>

<h2>Middleare</h2>

<p>미들웨어는 클라이언트-서버 구조에서 OS와 앱 사이의 소프트웨어 접착제이다.</p>

<p>레일즈 미들웨어는 일종의 미들웨어 스택인 <strong>Rack</strong>이다. Rack은 웹서버(Mongrel, Thin, Phusion, Apache 등)와 대화할 수 있는 간결하고 통일된 인터페이스를 제공한다. 즉, Rack은 HTTP 요청과 응답을 핸들링한다. <code>Rack::Builder</code>는 웹앱에서 사용하는 스택과 같은 구조를 만든다. 레일즈 앱에 설치된 미들웨어를 보려면 앱의 루트에서 다음 명령어를 친다:</p>

<pre class="terminal">
rake middleware
</pre>

<p>Sinatra 같은 다른 루비 프레임워크도 Rack 기반이다. 시내트라는 데이타베이스 백엔드 지원이 필요없을 경우 좋은 선택이다.</p>

<p><code>rails server</code>를 실행하면 <code>Rack::Server</code> 객체가 만들어지고 웹서버(기본적으로 WEbrick)가 로드되며, 뒤이어 미들웨어 부분이 로드된다. <code>Rack::Server#start</code> 매서드는 웹서버를 가동하기 시작하고 HTTP 요청을 지정된 포트에서 기다린다.</p>

<h2>The Hypertext Transfer Protocol (HTTP)</h2>

<h3>HTTP - Client Side</h3>

<p>HTTP/1.1 request 메시지는 세 부분으로 구성된디:</p>

<ol>
<li>Request line </li>
<li>Header </li>
<li>Message body</li>
</ol>

<p><br /></p>

<h4>Request Line</h4>

<p>request line은 리소스를 지정하고, 적용될 액션(또는 request, verb, method로 불린다)이 뒤따른다. 리소스는 Universal Resource Identiﬁer (URI)로 지정한다. 주석: Uniform Resource Locator (URL)는 URI의 특정 형태이다.</p>

<p>아홉 가지의 request 형태가 있다.</p>

<ol>
<li>HEAD - the response the resource would supply to a GET request, but without the response body. </li>
<li>GET – return a representation of the resource. </li>
<li>POST – submit data (e.g., from an HTML form) to the resource, where the data is supplied in the body of the request, and the result may be the creation of a new resource, or the update of an existing one. </li>
<li>PUT – submit a representation of the resource. </li>
<li>DELETE – delete the resource. </li>
<li>TRACE – Echoes back the received requested (the client can use this to see if any changes were made by intermediate servers). </li>
<li>OPTIONS – returns the HTTP methods that the server supports for the speciﬁed resource. </li>
<li>CONNECT – converts the request connection to a transparent TCP/IP tunnel (usually to facilitate SSL through HTTPS). </li>
<li>PATCH – apply partial modiﬁcations to a resource.</li>
</ol>

<p>HEAD, GET, OPTIONS, TRACE는 안전 매서드로 불린다. 안전 매서드는 서버에 다른 영향을 미치지 않는다. 즉, 이 매서드들은 정보 검색만을 의도하며 서버 상태를 변화시키지 않는다.</p>

<p>주석: 안전한 방법으로 GET 매서드가 적용될 때에는 브라우저는 웹앱의 상태에 대한 걱정 없이 임의의 GET 요청을 만들 수 있다. 게다가 그것들은 캐시된다.</p>

<p>POST, PUT, DELETE 매서드는 서버 상태에 영향을 준다. PUT과 DELETE 매서드는 멱등<code>idempotent</code>이어야 한다. 이것은 여러 동일한 요청이 한번의 요청과 같은 효과를 가져야 한다는 것을 의미한다.</p>

<p>안전 매서드도 서버 상태를 변경시키지 않기 때문에 멱등이다.</p>

<h4>Header</h4>

<p>HTTP 메시지 헤더는 HTTP 요청의 첫번째 부분이다. It contains the operating parameters of an HTTP request. Header ﬁelds start with the ﬁeld name, followed by a colon, and then the ﬁeld value. E.g., the Accept ﬁeld speciﬁes the content types that are acceptable to the client. <br>
Ex. Accept: text/plain </p>

<p>The Accept-Language header speciﬁes the languages that are acceptable to the client. <br>
Ex. Accept-Language: en-US </p>

<p>Field names and values may be any application-speciﬁc strings, but a core set of ﬁelds is standardized by the Internet Engineering Task Force (IETF). </p>

<p>HTTP 메시지 헤더는 메시지 바디와 공란으로 나누어져야 한다.</p>

<h4>Message Body</h4>

<p>메시지 바디는 선택적이다. 메시지 요청에서 메시지 바디는 대체로 유저가 입력한 데이터나 서버로 업로드하는 화일이다. </p>

<p>바디가 있는 HTTP 요청은 헤더 라인에 바디를 기술한다.<br>
Ex. <br>
<code>The Content-Type</code>: speciﬁes the MIME-type of the data in the message body, such as <code>text/html</code> or <code>image/gif</code>. </p>

<p>The Content-Length: speciﬁes the number of bytes in the message body.</p>

<h3>HTTP - Server Side</h3>

<p>HTTP/1.1 응답 메시지는 요청 메시지와 비슷하고, 다음 세 부분으로 이루어진다:</p>

<ol>
<li>Response line </li>
<li>Header </li>
<li>Message body </li>
</ol>

<p>After delivering the response, the server closes the connection (the default behavior with HTTP 0.9 and 1.0). With HTTP 1.1, a persistent connection is assumed by default.</p>

<p><br /></p>

<h4>Response Line</h4>

<p>서버가 제공하는 응압의 첫번째 줄이며, <strong>status line</strong>이라고 불린다. status line은 세부분으로 이루어진다:</p>

<ol>
<li>The HTTP version, in the same format as in the message request, e.g., HTTP/1.1. </li>
<li>A response status code that provides the result of the request. </li>
<li>An English reason phrase describing the status code. </li>
</ol>

<p>Ex. </p>

<p>HTTP/1.1 200 OK <br>
HTTP/1.1 404 Not Found</p>

<p>The status codes associated with the status line belong to done of ﬁve categories: <br>
1. 1xx (Provisional Response) - A provisional response that requires the requestor to take additional action in order to continue. e.g., 100, the Continue status code, indicates that the requester should continue with the request. 101, the Switching Protocols status code, the requestor has asked the server to switch protocols (e.g., HTTPS) and the server is acknowledging that it will do so. <br>
2. 2xx (Successful) - The server successfully processed the request. <br>
3. 3xx (Redirected) - Further action is needed to fulﬁll the request. Often, these status codes are used for redirection. <br>
4. 4xx (Request Error) - There was likely an error in the request which prevented the server from being able to process it. <br>
5. 5xx (Server Error) - The server had an internal error when trying to process the request. </p>

<h4>Header</h4>

<p>The header ﬁelds in the response allow the server to pass additional information about the response which cannot be placed in the status line. </p>

<p>These header ﬁelds have the same format as in the request, and give information about the server and about further access to the resource identiﬁed by the request URI. </p>

<p>Example response ﬁelds in the header include: </p>

<p>Accept-Ranges – Allows the server to indicate its acceptance of range requests for a resource. <br>
Age – Sender’s estimate of the amount of time since the response was generated at the origin server. <br>
Location – Used to redirect the recipient to a location other than the request URI for completion of the request or identiﬁcation of a new resource. <br>
Proxy-Authenticate – Allows the client to identify itself (or its user) to a proxy which requires authentication.</p>

<h4>Message Body</h4>

<p>The message body in the response must also be preceded by a blank line. </p>

<p>The response to a HEAD request does not include a message body. All other responses do include a message body, although it may be of zero length. </p>

<p>The requested resource, e.g., the actual HTML, is included in the message body of the response.</p>

<h3>HTTP Secure</h3>

<p>The HTTP Secure protocol (HTTPS) is a combination of the HTTP and SSL/TLS protocols. Thus, it makes use of the public key infrastructure. </p>

<p>HTTPS enhances the HTTP protocol by providing encrypted communication and secure web server identiﬁcation. </p>

<p>The HTTPS protocol is often used for processing payments in web applications, or for handling other sensitive transactions. </p>

<p>The trust associated with HTTPS is based on the major certiﬁcate authorities, whose software comes pre-installed in the browser. I.e., what is really happening is that your browser must trust some certiﬁcate authority (e.g. VeriSign/Microsoft/etc.) so that it can tell your browser whom it should trust. </p>

<p>HTTPS URLs begin with “https://...&quot; and uses port 443 by default.</p>

<ul>
<li><a href="http://smallbiztrends.com/2015/04/changing-from-http-to-https.html">What You Need to Know About Changing From Http to Https</a></li>
</ul>

<h3>The Model-View-Controller Design Pattern</h3>

<p>미들웨어에 적용되는 MVC 아키텍처 다자인 패턴은 많은 웹앱 프레임워크에서 사용되며, 최근 웹앱의 복잡함을 다루는 방법으로 소개되어 왔다:<br>
– Decouples data (model) and presentation (view). <br>
– A controller handles requests, and coordinates between the model and the view. <br>
– More robust applications, easier to maintain.</p>

<p>The MVC design pattern is an architecture-level design pattern that is actually a collection of design patterns: </p>

<p>Model – The domain-speciﬁc representation of the data over which the application operates, with domain logic that adds “meaning” to raw data. A database is often used to store the data. </p>

<p>View – Renders the model in a view suitable for interaction, typically via a user interface. Multiple views can be created for a single model, each serving diﬀerent purposes. </p>

<p>Controller – Mediates between the model and the view.</p>

<p>Although there are diﬀerent varieties of MVC, the control ﬂow is generally: </p>

<ol>
<li>The user interacts with the user interface in some way (for example, by pressing a button). </li>
<li>The controller handles the input event from the user interface, often via a registered handler or callback, and converts the event into an appropriate user action, understandable for the model. </li>
<li>The controller notiﬁes the model of the user action, possibly resulting in a change in the model’s state. E.g., the controller may update the user’s account information. </li>
<li>A view queries the model in order to generate an appropriate user interface (e.g., the user’s account information). The view gets its own data from the model. In some implementations, the controller may issue an instruction to the view to render itself. In others, the view is automatically notiﬁed by the model of changes in state (Observer design pattern) that require a screen update. </li>
<li>The user interface waits for further user interactions, which restarts the control ﬂow cycle.</li>
</ol>

<h3>Rails Controllers–Request Handling</h3>

<h4>Action Pack</h4>

<p>레일즈 안에 있는 루비 <code>ActiveRecord</code> 모듈에 의해 모델(MVC에서 &#39;M&#39;)이 지원되는 방법에 대해 이미 검토해 보았다.</p>

<p>레일즈에서 뷰와 컨트롤러는 <code>Action Pack</code>으로 지원되는데, 다음 세 가지 루비 모듈로 구성된다: <code>ActionDispatch</code>, <code>ActionController</code> and <code>ActionView</code>.</p>

<p>컨트롤러는 레일즈 앱의 심장이다. – when a user connects to your Rails application, they do it by asking the application to execute a controller action. How does Rails determine the controller action it will execute? </p>

<h5>Dispatcher</h5>

<p>When an HTTP request is made to a Rails application, the ActionDispatch module is used to map that request to a particular controller action. </p>

<p>Requests are mapped to controller actions via the <code>routes</code> deﬁned in <code>./config/routes.rb</code> ﬁle. </p>

<p>We already seen that you can view the routes deﬁned in your application by executing: <br>
    $ rake routes </p>

<p>To connect a request to a controller action, you add a route to <code>./config/routes.rb</code>. </p>

<p>Examples of the various ways you can do this are provided as comments in that ﬁle.</p>

<p>Ex. Adding the following to <code>./config/routes.rb</code>: <br>
    get ’products/:id’ =&gt; ’catalog#view’ <br>
다음 URL을 사용하는 GET 요청을 매핑한다: <br>
    <a href="http://localhost:3000/products/10">http://localhost:3000/products/10</a><br>
to the view method in the CatalogContoller class, assigning the value 10 to the params[:id] hash that will be made available to all methods in that class. </p>

<p>This doesn’t look like the syntax used by the scaﬀold generator to create the routes for our posts and comments: <br>
    resources :posts <br>
    resources :comments</p>

<h5>RESTful Controllers</h5>

<p>By default, Rails controllers are <strong>RESTful</strong> and therefore use <strong>resource routing</strong>. </p>

<p>REST stands for <strong>Representational State Transfer</strong>. </p>

<p>The fundamental philosophy behind REST is that clients should communicate with servers through stateless connections, where: <br>
– Long term state is kept on the server side by maintaining a set of identiﬁable <strong>resources</strong>, <code>posts</code> and <code>comments</code> in our case. <br>
– The client can access these resources (perform CRUD operations on them) through a highly limited but uniform interface (a set of URLs in our case). <br>
– Computation proceeds by identifying the resource and the CRUD operation you’d like to perform on it.</p>

<p>A REST-based web application can be contrasted to a RPC(remote procedure call)-based web application. <br>
– In RPC-based applications, clients send requests to servers, asking them to execute a speciﬁed procedure (available on the server) using the supplied parameters. The server must advertise the services it oﬀers. SOAP is a protocol, developed by Microsoft, that supports this approach. <br>
– REST assumes a simple set of verbs (controller actions/methods) that can operate over a rich set of nouns (resources). <br>
– RPC allows for arbitrary complexity on the server side. </p>

<p>The constraints imposed by REST can lead to web applications that easier-to-write and maintain. Rather than implementing remotely accessible services, a simple interface for performing CRUD operations on resources is provided. </p>

<p>The Programmable Web, which treats the WWW as a vast collection of addressable resources, is greatly facilitated by REST.</p>

<h5>Resourceful Routes</h5>

<p>The statement in <code>./config/routes.rb</code>: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">resources :posts 
</code></pre></div>
<p>produces seven diﬀerent routes in your application, all mapping to methods in the <code>PostsController</code> class: </p>

<table><thead>
<tr>
<th>HTTP Verb</th>
<th>Path</th>
<th>Method</th>
<th>Purpose</th>
</tr>
</thead><tbody>
<tr>
<td>GET</td>
<td>/posts</td>
<td>index</td>
<td>dispaly all posts</td>
</tr>
<tr>
<td>GET</td>
<td>/posts/new</td>
<td>new</td>
<td>return form for creating a post</td>
</tr>
<tr>
<td>POST</td>
<td>/posts</td>
<td>create</td>
<td>create a new post</td>
</tr>
<tr>
<td>GET</td>
<td>/posts/:id</td>
<td>show</td>
<td>display a speciﬁc post</td>
</tr>
<tr>
<td>GET</td>
<td>/posts/:id/edit</td>
<td>edit</td>
<td>return form for editing a post</td>
</tr>
<tr>
<td>PATCH/PUT</td>
<td>/posts/:id</td>
<td>update</td>
<td>update a speciﬁc post</td>
</tr>
<tr>
<td>DELETE</td>
<td>/posts/:id</td>
<td>destroy</td>
<td>delete a speciﬁc post</td>
</tr>
</tbody></table>

<h3>Rails Controllers — Request Processing</h3>

<p>In the last lecture we say how the dispatcher routes a request to a particular controller action (method). Ex. The HTTP GET request <br>
    <a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a> <br>
will route to the show method in the <code>PostsController</code> class, passing params[:id] with a value of 1 to the controller. Note: this class is deﬁned in the ﬁle: <br>
    <code>./app/contollers/posts_controller.rb</code></p>

<p>Next, the show method will use the <code>ActiveRecord#find</code> method to retrieve the post with id=1 from the database, and assign it to the instance variable <code>@post</code>. </p>

<p>Finally, the controller will pass @post to the view, i.e., to the template ﬁle: <br>
    <code>./app/views/posts/show.html.erb</code><br>
and this will be used to create the HTML that will be sent to the browser.</p>

<h4>Filters</h4>

<p>The PostsController#show method is deﬁned as follows: <br>
<code>ruby<br>
    # GET /posts/1 <br>
    # GET /posts/1.json <br>
    def show <br>
    end <br>
</code><br>
It doesn’t retrieve the post! </p>

<p>The desired post is actually retrieved from the database using a <strong>ﬁlter</strong> called <code>set_post</code>. </p>

<p><code>Filters</code> allow controllers to run shared pre and post processing code over their methods.</p>

<h4>Sessions</h4>

<p>In general, the “state” of an application which needs to persist across requests should be stored in the database. E.g., posts and comments are persisted in the database. </p>

<p>There are times when data needs to be persisted diﬀerently. E.g., the current contents of a shopping cart. </p>

<p>Whenever a user connects to a Rails application, a <strong>session</strong> is created. </p>

<p>Session data is stored in Rails using a hash structure that persists across requests, and can be accessed by controllers. <br>
Ex. <code>session[:current_user] = user.id</code> </p>

<p>A <strong>ﬂash</strong> hash is part of the session that is cleared with each request (its value is made to the next request). A controller can use this to send a message that can be displayed to the user on the next request. <br>
Ex. <br>
    ﬂash[: notice] = &#39;Post was successfully created.&#39;</p>

<h4>Response – Rendering HTML or JSON</h4>

<p>The request: <br>
    <a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a> <br>
assumes that HTML will be returned. I.e., it’s the same as: <br>
    <a href="http://localhost:3000/posts/1.html">http://localhost:3000/posts/1.html</a> </p>

<p>Rails can return other formats, e.g., JSON(Javascript Object Notation) capabilities are also provided by default. </p>

<p>Ex. The following request, will be routed to the same controller method as before: <br>
    <a href="http://localhost:3000/posts/1.json">http://localhost:3000/posts/1.json</a> <br>
However, it will be rendered using the ﬁle: <br>
    <code>./app/views/posts/show.json.builder</code> <br>
and JSON will be returned to the client.</p>

<h4>Response Format</h4>

<p>One last look at rake routes: </p>

<table><thead>
<tr>
<th>Preﬁx</th>
<th>Verb</th>
<th>URI Pattern</th>
<th>Controller#Action</th>
</tr>
</thead><tbody>
<tr>
<td>posts</td>
<td>GET</td>
<td>/posts(.:format)</td>
<td>posts#index</td>
</tr>
<tr>
<td></td>
<td>POST</td>
<td>/posts(.:format)</td>
<td>posts#create</td>
</tr>
<tr>
<td>new_post</td>
<td>GET</td>
<td>/posts/new(.:format)</td>
<td>posts#new</td>
</tr>
<tr>
<td>edit_post</td>
<td>GET</td>
<td>/posts/:id/edit(.:format)</td>
<td>posts#edit</td>
</tr>
<tr>
<td>post</td>
<td>GET</td>
<td>/posts/:id(.:format)</td>
<td>posts#show</td>
</tr>
<tr>
<td></td>
<td>PATCH</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>PUT</td>
<td>/posts/:id(.:format)</td>
<td>posts#update</td>
</tr>
<tr>
<td></td>
<td>DELETE</td>
<td>/posts/:id(.:format)</td>
<td>posts#destroy</td>
</tr>
</tbody></table>

<h4>Redirects</h4>

<p>Rails may also respond to an HTTP request using the <code>redirect_to</code> method. </p>

<p>This method actually tells the browser to send a new request for a diﬀerent URL. <br>
Ex. <code>redirect_to ’www.example.com’</code> </p>

<p>Rails has shortcuts for URLs within your application – they’re the preﬁx listed when you view routes: <br>
Ex. <code>redirect_to posts_url</code> <br>
will redirect to the index method in the PostsController. </p>

<p>Ex. You can assign a ﬂash message as a part of a redirection: <br>
<code>redirect_to @post, notice: ’Post was successfully created.’</code></p>

<h3>MVC Implementation in Rails</h3>

<p>In Rails, the following classes support the MVC design pattern: </p>

<p><strong>Model</strong> – The ActiveRecord class, described previously, implements object-relational mappings (ORM). </p>

<p><strong>View</strong> – Views and controllers are actually bundled together in Rails in Action Pack. Dynamic content is generated by templates containing embedded Ruby (ERb) code supported by the ActionView class. </p>

<p><strong>Controller</strong> – The ActionController class is the core of a web request in Rails. It consists of one or more actions that are executed on request and then either render a template or redirect to another action. An action is deﬁned as a public method on the controller, which will automatically be made accessible to the web-server through Rails Routes.</p>

<h4>MVC Interactions in Rails</h4>

<ol>
<li>The browser sends a request to the web server. </li>
<li>The web server processes the request, determines which route it belongs to and dispatches that request to the corresponding controller method. </li>
<li>The controller asks the model layer for all of the information needed to complete the request. </li>
<li>The model layer collects the requested information and returns it to the controller.</li>
<li>The controller gives the appropriate information to the view, requesting a particular format.</li>
<li>The view renders the information in that format and gives it back to the controller.</li>
<li>The controller assembles the total page&#39;s html and gives it to the web server.</li>
<li>The web server returns the page to the browser.</li>
</ol>

<p><img src="https://farm9.staticflickr.com/8783/17045751247_f69158209b_o.jpg" alt=""></p>

<h2>Add post&#39;s comments, new comment form, authentication</h2>

<p>자세한 소스는 비트버킷의 <a href="https://bitbucket.org/nolboo/blog/commits/7bfe88a918e40ece587f560b254b73bad0a5fbcb">해당 커밋 부분</a>을 참조한다.</p>

<blockquote>
<p><strong>HTML, CSS, Javascript에 대한 개략적인 강의 부분은 블로그를 만들기 위한 직접적인 부분을 제외하고는 이 글에선 모두 생략하였다.</strong></p>
</blockquote>

<h2>HTML – Forms</h2>

<p>완성된 폼을 제출하면(<code>submit</code>), 브라우저에서 돌아가는 <strong>user agent</strong>에서 먼저 처리된 후 서버 쪽의 <strong>processing agent</strong>(웹 서버나 메일 서버)에 제출된다.</p>

<p><code>form</code> 엘리먼트의 기본 구조는 다음과 같다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://www.example.com/log&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
<span class="c">&lt;!-- form controls and other HTML markup --&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Log In&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div>
<p><code>action</code> 속성은 폼에서 수집되는 데이터를 받을 서버 사이드의 <strong>processing agent</strong>의 URL을 지정한다.<br>
<code>method</code> 속성은 데이터를 보내기 위해 사용될 <strong>user agent</strong>의 HTTP 요청 매서드를 지정한다. HTML user agent는 다음을 지원해야 한다:<br>
1. GET – in which case the form data must be sent as part of the URL,<br>
i.e., the data is URL-encoded, and appended to the request URL.<br>
2. POST – in which case the form data must be included in the HTTP<br>
message request body.</p>

<h3>Form Submission – GET Request</h3>

<p>URL encoding works as follows — the form data is separated from the URI<br>
by a “?”, each name/value pair is separated by “&amp;”, and each name is<br>
separated from its value by a “=” (“unsafe” characters, e.g., “/” and “&amp;”,<br>
are escaped).</p>

<p>Ex.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://www.example.com&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;label&gt;</span>
    First name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;firstname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;label&gt;</span>
    Last name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;lastname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit Form&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div>
<p>Ex. 폼이 제출될 때 웹브라우저 주소창에 일어나는 것:<br>
    <code>www.example.com/?firstname=Carol&amp;lastname=Codegood</code></p>

<p>GET 매서드는 폼이 멱등일 때 사용되어야 한다. 민감한 데이터를 보낼 때는 사용하지 말아야 한다. 폼 데이터가 크거나 아스키 문자가 아니거나 바이너리 데이터일 때도 사용하지 말아야 한다. 파일은 URL로 건넬 수 없기 때문에 파일 업로드 컨트롤을 포함한 폼에서도 사용하지 말아야 한다.</p>

<h3>Form Submission – POST Request</h3>

<p>서버 사이드 처리가 결합된 폼은 데이터베이스를 변경하거나 서비스 구독 등의 side effect를 일으키기 때문에 POST 매서드를 사용해야 한다. 폼 데이터가 민감하면 HTTPS 프로토콜을 사용해야 한다.</p>

<p>Ex. 매서드 외에는 앞의 예제와 같다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://www.example.com&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;label&gt;</span>
    First name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;firstname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;label&gt;</span>
    Last name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;lastname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit Form&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div>
<p>POST 매서드인 경우 폼이 제출될 때 주소창의 URL이 변함없고(no URL encoding), 메시지 바디에 매개변수가 포함된다.(크롬 개발자 도구 등을 사용하여 네트워크 트래픽으로 볼 수 있다)</p>

<h3>Form Submission Process</h3>

<p>The user agent running in the browser identifies the successful controls, and builds a form data set — a sequence of control-name/current-value pairs for the successful controls.</p>

<p>The form data set is encoded by the user agent according to the <code>content type</code> specified in the <code>enctype</code> attribute of the <code>form</code> element.<br>
    – <code>application/x-www-form-urlencoded</code> — this is the default, form data is encoded as name-value pairs.<br>
    – <code>multipart/form-data</code> — form data is encoded as a message, with a separate part for each control.<br>
    – <code>text/plain</code> — form data is encoded as plain text.</p>

<p>The user agent submits the encoded data set to the processing agent running on the server side using the HTTP protocol method specified by the action attribute in the form.</p>

<h3>Form Controls</h3>

<p>Users interact with forms through named form controls.</p>

<p>Form controls are specified using an <code>input</code> or <code>select</code> element that must appear in the content section of the <code>form</code> element, i.e., between the <code>&lt;form&gt;</code> and <code>&lt;/form&gt;</code> tags.</p>

<p>The name of a control is specified using the <code>name</code> attribute.</p>

<p>A control has an <strong>initial value</strong> and a <strong>current value</strong>, both of which are character strings. The current value is first set to the initial value, but may change according to user supplied input.</p>

<p>Available form controls include: text, date, buttons, checkboxes, radio buttons, select boxes (drop-down lists), file select boxes, hidden controls, etc.</p>

<h4>Form Controls – Buttons</h4>

<p><strong>Button controls</strong> are specified using either the <code>button</code> element or the <code>input</code> element.<br>
The <code>type</code> attribute, which should always be specified (as different browsers have different defaults for the type), has three possible values:<br>
    - <code>submit</code> – Causes the form to be submitted.<br>
    - <code>reset</code> – Causes the form to be reset, i.e. all controls are assigned their initial values.<br>
    - <code>button</code> – Creates a push button, that typically has a client-side script associated with it through the <code>event</code> attribute. When the button is pressed and released, the associated script is executed.</p>

<p>With the <code>input</code> element, the <code>type</code> attribute may be specified as image. This creates a graphical submit button. The <code>src</code> attribute specifies the URL of the image file that will decorate the button.</p>

<p>Button controls have numerous attributes that support <strong>event-driven programming</strong>.</p>

<p>This programming style supports interactivity in browsers, i.e., you click a button (an event), the event is processed (typically by running a script) and something happens in the browser window.</p>

<p>Some of the events attributes that can be specified for a button include: <code>onblur</code>, <code>onfocus</code>, <code>onclick</code>, <code>ondblclick</code>, <code>onmousedown</code>, <code>onmouseup</code>, <code>onmouseover</code>, <code>onkeypress</code>, <code>onkeydown</code>, <code>onkeyup</code>, <code>onreset</code>.</p>

<p>For each of these attributes, the value supplied is the script that should run when the corresponding events occurs.</p>

<h4>Form Controls – Checkboxes, Radio Buttons</h4>

<p><strong>Checkboxes</strong> and <strong>radio buttons</strong> are specified using the <code>input</code> element.</p>

<ul>
<li>These are essentially “on/off” switches that can be toggled by the user.</li>
<li>Several of these controls can share the same control name.</li>
<li>A switch is “on” when the control element’s <code>checked</code> attribute is set.</li>
<li>When a form is submitted, only the “on” checkbox and radio button controls are treated as successful.</li>
<li>If several radio button controls share the same name, they are treated as mutually exclusive. I.e., when one is switched “on” all of the others with the same name are switched “off.”</li>
<li>Multiple checkboxes with the same name may simultaneously be switched “on” in a form.</li>
</ul>

<h4>Form Controls – Text Input and File Select</h4>

<p>There are two types of <strong>text controls</strong>, both of them use the <code>input</code> element, and are specified using the <code>type</code> attribute:<br>
- <code>text</code> – creates a single line text input control.<br>
- <code>textarea</code> – creates a multi-line text input control.<br>
The <strong>file select control</strong> also uses theinputelement, and the <code>type</code> attribute has the value <code>file</code>. This control allows a user to select a file, whose contents will be submitted with the form.</p>

<p>The <strong>password input control</strong> uses the <code>input</code> element, and the <code>type</code> attribute has the value <code>password</code>.<br>
With this control, user input is shown in the browser as dots or asterisks.</p>

<h4>Form Controls – Select Boxes</h4>

<p>Drop-down <strong>select boxe</strong>s are specified using the <code>select</code> element.</p>

<ul>
<li>Each choice offered by the menu is represented by an <code>option</code> element, and each <code>select</code> element must contain at least one <code>option</code> element.
The <code>optgroup</code> element allows several of the menu choices to be grouped together. These must appear directly within the select element, i.e., groups in general may not be nested.</li>
</ul>

<p>Ex.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;selColor&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">selected=</span><span class="s">&quot;selected&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Select color<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;red&quot;</span><span class="nt">&gt;</span>Red<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;green&quot;</span><span class="nt">&gt;</span>Green<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;blue&quot;</span><span class="nt">&gt;</span>Blue<span class="nt">&lt;/option&gt;</span>
<span class="nt">&lt;/select&gt;</span>
</code></pre></div>
<h2>Dynamic Content, Templates and Layouts</h2>

<h3>Controllers and Views</h3>

<p>The controller and view in the MVC design pattern are tightly coupled—controllers supply data to views, and controller actions are typically the targets of the links provided in views.</p>

<p>In Rails, a controller makes every instance variable it creates available to the associated view files.<br>
Ex.<br>
    – All post are retrieved in the <code>PostsController#index</code> method, and stored in the <code>@posts</code> array.<br>
    – In the <code>app/views/index.html.erb</code> file this array is accessed using an iterator:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="err">&lt;</span>% @posts.each do |post| %&gt;
<span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.title %&gt;<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.body %&gt;<span class="nt">&lt;/td&gt;</span>
...
<span class="nt">&lt;/tr&gt;</span>
<span class="err">&lt;</span>% end %&gt;
</code></pre></div>
<h3>Dynamic HTML with ERb</h3>

<p>In Rails, dynamic content is generated using templates, and the most common templating framework is <strong>Embedded Ruby (ERb)</strong>.</p>

<p>ERb is a <strong>filter</strong> that takes a <code>.html.erb</code> template file as input and transforms it into an HTML output file as follows:<br>
    – Normal HTML content is passed through the filter without modification.<br>
    – Content between <code>&lt;%=</code> and <code>%&gt;</code> is interpreted as Ruby code and executed, with the results substituted back into the file as a string in place of the <code>&lt;%= ::: %&gt;</code> string.<br>
    – Content between <code>&lt;%</code> and <code>%&gt;</code> (no equal sign) is interpreted as Ruby code and executed, but the results are <em>not</em> substituted back into the output file.</p>

<h3>Proper Use of ERb</h3>

<p>Although ERb allows you to insert Ruby code into your view, as a matter of good design, use it sparingly!</p>

<p>E.g., in a RESTful architecture, the HTML code in ERb templates should specify the structure of the document, and the Ruby code should be used to provide (dynamic) information specific to particular<br>
resources.</p>

<p>Application-level functionality and business logic should <strong>never</strong> be found in ERb templates.</p>

<p>For generating HTML elements and formatting data in the view, there are numerous Rails helper methods – use them.</p>

<h3>Layouts</h3>

<p>In order to generate the final HTML file that will be supplied to the browser, a <strong>layout</strong> file is invoked, passing the template to it as a block.</p>

<p>By default the <code>app/views/layouts/application.html.erb</code> is used. This file is automatically created whenever you create a new Rails application.</p>

<p><strong>Advantage of layouts</strong>: By editing one file, and its associated stylesheet, we can change the look and feel of the entire site.</p>

<p>If you want to have different layouts for the different parts of a site, create a layout file that has the same name as the controller you want to associate it with, and place it in the layouts folder.</p>

<p>Ex.     <code>app/views/layouts/posts.html.erb</code></p>

<p>The <code>app/views/layouts/application.html.erb</code> file (note the yield statement):</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Blog<span class="nt">&lt;/title&gt;</span>
    <span class="err">&lt;</span>%= stylesheet_link_tag &quot;application&quot;, ... %&gt;
    <span class="err">&lt;</span>%= javascript_include_tag &quot;application&quot;, ... %&gt;
    <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="err">&lt;</span>%= yield %&gt;

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<h3>Helper Methods</h3>

<p>There are numerous helper methods that are intended to be used in ERb templates. We saw a few in the <code>application.html.erb</code> file.</p>

<ul>
<li>The <code>stylesheet_link_tag()</code> helper method generates HTML <code>&lt;link&gt;</code> tags to the application’s CSS stylesheets.</li>
<li>The <code>javascript_include_tag()</code> does the same for the application’s scripts.</li>
<li>The <code>csrf_meta_tags(</code>) method is included to prevent cross-site scripting attacks.</li>
</ul>

<p><a href="http://api.rubyonrails.org/">Ruby on Rails API</a>에서 <em>actionview:helpers</em>로 검색하여 자세한 설명을 볼 수 있다.</p>

<h2>JavaScript and Browser Security</h2>

<p>Client-side JavaScript opens up the possibility for authors to deliver malicious scripts to the browser.</p>

<p>Browsers guard against this using two strategies:</p>

<p>– JavaScript code is run in a <strong>sandbox</strong> that only allows web-related actions to be performed, not general-purpose programming tasks (no writing to disk, creating ﬁles, etc.). <br>
- JavaScript code is constrained by the <strong>same origin policy</strong> – scripts from one website do not have access to information such as usernames, passwords, or cookies from other websites.</p>

<h2>Ajax</h2>

<p>Ajax was originally an acronym that stood for Asynchronous JavaScript and XML (AJAX). </p>

<p>Ajax deals with how various technologies come together in order to provide a more interactive web browsing experience – it’s not a single technology, but a group of them working together. </p>

<p>XMLHttpRequest (XHR) is an API available to the browser via JavaScript. It’s used to send asynchronous HTTP requests to a web server and then load the server response data back into the script. </p>

<p>In spite of the name, any text data can be retrieved from the server, not just XML. Nowadays, it’s common to retrieve JavaScript Object Notation (JSON), HTML, JavaScript or plain text data. </p>

<p>The data in the script can then be used to alter the current document shown in the browser (through the DOM), without loading a new web page.</p>

<p>Ajax, jQuery &amp; Rails The jQuery library provides a full suite of Ajax capabilities (see: <a href="http://api.jquery.com/category/ajax/">http://api.jquery.com/category/ajax/</a>). </p>

<p>The <code>$.ajax()</code> method is used to initiate an asynchronous HTTP (Ajax) request. </p>

<p>An <strong>unobtrusive javascript adapter</strong> for jQuery, called <code>jquery_ujs</code>, is automatically provided in Rails. </p>

<p>Using this adapter, forms and links that have the attribute: <br>
    <code>data-remote=&quot;true&quot;</code> <br>
will be submitted using jQuery’s ajax method, i.e., using <code>$.ajax()</code>. </p>

<p>In Rails, you set this attribute using <code>remote: true</code> <br>
Ex. <br>
    &lt;%= form_for([@post, Comment.new], remote: true) do |f| %&gt;</p>

<h2>Showing a Post &amp; Comments</h2>

<ol>
<li>Identify the pieces of the page you want to dynamically load using
Ajax. (<code>show.html.erb</code>)</li>
<li>Create partial templates for the pieces of the page you want to load
dynamically. (<code>_comments.html.erb</code>)</li>
<li>Modify the form so that it uses Ajax. (<code>show.html.erb</code>,<code>remote: true</code>)</li>
<li>Modify the controller so that it can respond to a Ajax request.(<code>comments_controller.rb</code>, <code>respond_to format.js</code>)</li>
<li>Create the JavaScript code that will be returned and dynamically and
executed in the web page. (<code>create.js.erb</code>)</li>
</ol>

<p>자세한 소스는 비트버킷의 <a href="https://bitbucket.org/nolboo/blog/commits/eddf1632b928a81b52986dd866ded8746cbbc233">해당 커밋 부분</a>을 참조한다.</p>

<h2>첨언</h2>

<p>실제 소스 부분을 보면 알겠지만 실제 블로그를 만들기 위해 직접 작성해야 하는 소스의 량은 몇 십줄도 안된다. 웹앱을 만들때 레일즈를 선호하는 이유를 어렴풋이 알겠다. 그러나, 전체적인 것을 정확히 이해하려면 좀 더 많은 시간을 들여야할 것 같다. 마침 좋아하는 codecademy에 레일즈 강의가 올라와 있어 <a href="http://www.codecademy.com/learn/learn-rails">Learn Ruby on Rails | Codecademy</a>를 통해 좀 더 기본적인 것을 배우려 한다.</p>

<p>코드캐더미 강좌는 여기에 포스팅하였다.</p>

<ul>
<li><a href="http://nolboo.github.io/blog/2015/05/13/rails-codecademy/">코드캐더미로 배우는 레일즈 기초 1부</a></li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[루비 언어 기초]]></title>
            <link>/blog/2015/05/03/ruby-basic/</link>
            <pubDate>Sun, 03 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[Coursera]]></category>
        
            <category><![CDATA[ruby]]></category>
        
            <category><![CDATA[basic]]></category>
        
            <guid>/blog/2015/05/03/ruby-basic/</guid>
            <description>
                <![CDATA[뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌 Web Application Architectures 중에서 루비 언어 기초만 별도로 정리하였다. 나머지는 루비 온 레일즈로 블로그 만들기에서 볼 수 있다. Ruby Programming Language Yukihiro Matsumoto(“Matz”)는 90년 중반에 루비를 만들었다. &quot;펄보다 강력하고 파이썬 보다 객체지향적인 스크립트 언어를 만들길 원했다.&quot; 루비는 기계보단 프로그래머에 초점을 맞쳤고, 설계 목표도...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌 <a href="https://class.coursera.org/webapplications-003">Web Application Architectures</a> 중에서 루비 언어 기초만 별도로 정리하였다. 나머지는 <a href="http://nolboo.github.io/blog/2015/05/05/web-application-architecture/">루비 온 레일즈로 블로그 만들기</a>에서 볼 수 있다.</p>

<h2>Ruby Programming Language</h2>

<p>Yukihiro Matsumoto(“Matz”)는 90년 중반에 루비를 만들었다. &quot;펄보다 강력하고 파이썬 보다 객체지향적인 스크립트 언어를 만들길 원했다.&quot; 루비는 기계보단 프로그래머에 초점을 맞쳤고, 설계 목표도 프로그래머의 효율(즉, 생산성)을 최대화하기 위한 것이었다. &quot;루비가 세상의 모든 프로그래머가 생산적이고, 프로그래밍을 즐기고, 행복해지는 것을 돕길 원했다. 그게 루비 언어의 주요 목적이다.&quot;</p>

<p>Matz’s guiding philosophy for Ruby:<br>
“Ruby is designed to make programmers happy.”</p>

<ul>
<li><a href="http://web.archive.org/web/20130729205129id_/http://itc.conversationsnetwork.org/shows/detail1638.html">Yukihiro &quot;Matz&quot; Matsumoto | Ruby Design Principles</a></li>
<li><a href="http://we.weirdmeetup.com/ruby%EC%9D%98-%EC%B2%A0%ED%95%99%EC%97%90-%EA%B4%80%ED%95%9C-%EB%A7%88%EC%B8%A0%EB%AA%A8%ED%86%A0-%EC%9C%A0%ED%82%A4%ED%9E%88%EB%A1%9C%EC%9D%98-%EC%9D%B8%ED%84%B0%EB%B7%B0-part-1/">Ruby의 철학에 관한 마츠모토 유키히로의 인터뷰</a></li>
</ul>

<pre class="terminal">
ruby --version
gem list
gem install rails

ruby -e ’puts "Hello World!"’
Hello World!
</pre>

<ul>
<li><code>-e</code> 프롬프트로 인터프리터가 <code>&#39;&#39;</code>안의 루비 코드를 실행한다.</li>
<li><code>&#39;&#39;</code>안의 루비 코드를 hello.rb 파일 안에 넣고 실행하면 같은 결과가 나온다.</li>
</ul>

<pre class="terminal">
ruby hello.rb
Hello World!
</pre>

<h3>Interactive Ruby Shell(IRB)</h3>

<pre class="terminal">
irb
2.0.0p195 :001 >
</pre>

<ul>
<li>루비 앱 디렉토리의 루트에서 다음 명령으로 IRB를 실행하여, 콘솔 커맨트 라인에서 루비 앱을 직접 조작할 수 있다.</li>
</ul>

<pre class="terminal">
rails console
Loading development environment (Rails 4.0.0.rc1)
2.0.0-p195 :001 >
</pre>

<p>Ruby is a multi-paradigm programming language:</p>

<ul>
<li>Scripting – It can be used to write scripts that automate the execution
of tasks within some environment.</li>
<li>Imperative (procedure-oriented) programming – It has the traditional control structures found in imperative programs. You can create functions with variables (that store state); however, defining functions/variables outside classes actually makes them methods of the root Object class.</li>
<li>Object-oriented programming – Everything is an object, derived from
the Object class.</li>
<li>Functional programming – Computation proceeds via the evaluation of
functions that depend only on their input, not the program state.</li>
</ul>

<h3>Classes and Inheritance</h3>

<h4>Classes</h4>

<ul>
<li>클래스는 <code>class</code> 키워드와 이름으로 정의된다. 이름은 대문자로 시작하고, 캐멀케이스(CamelCase)를 사용한다.</li>
<li><code>def</code> 키워드로 매서드를 정의한다. 매서드 이름은 대문자 없이 단어를 <code>_</code>로 연결한다.</li>
<li>클래스와 매서드는 <code>end</code> 키워드로 끝낸다.<br></li>
</ul>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span>
    <span class="vi">@boo</span>            <span class="c1"># an instance variable</span>
    <span class="k">def</span> <span class="nf">my_method</span> 
        <span class="vi">@foo</span> <span class="o">=</span> <span class="mi">2</span>    <span class="c1"># an instance variable</span>
    <span class="k">end</span>
<span class="k">end</span> 

<span class="k">in</span> <span class="ss">IRB</span><span class="p">:</span>

<span class="o">&gt;</span> <span class="n">mc</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>  <span class="c1"># create a MyClass object </span>
<span class="o">&gt;</span> <span class="n">mc</span><span class="o">.</span><span class="n">my_method</span>      <span class="c1"># =&gt; 2 </span>
<span class="o">&gt;</span> <span class="n">mc</span><span class="o">.</span><span class="n">boo</span>            <span class="c1"># =&gt; error </span>
</code></pre></div>
<h4>Methods</h4>

<ul>
<li>인스턴스 변수는 매서드 정의 안에서만 접근하거나 변경할 수 있다. 아래에서는 setter 매서드로 값을 지정한 후 getter 매서드로 값을 얻을 수 있다.<br></li>
</ul>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span> 
    <span class="k">def</span> <span class="nf">boo</span>     <span class="c1"># a getter method </span>
        <span class="k">return</span> <span class="vi">@boo</span> 
    <span class="k">end</span> 
    <span class="k">def</span> <span class="nf">boo</span><span class="o">=</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>   <span class="c1"># setter method </span>
        <span class="vi">@boo</span> <span class="o">=</span> <span class="n">val</span> 
    <span class="k">end</span> 
<span class="k">end</span> 

<span class="o">&gt;</span> <span class="n">mc</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>  <span class="c1"># create a MyClass object </span>
<span class="o">&gt;</span> <span class="n">boo</span> <span class="o">=</span> <span class="mi">1</span>   <span class="c1"># =&gt; 1 </span>
<span class="o">&gt;</span> <span class="n">boo</span>       <span class="c1"># =&gt; 1</span>
</code></pre></div>
<p>루비 매서드는 implicit 리턴 값을 갖는다 - 매서드 안에서 마지막 표현식의 값이 리턴값이다. <code>return</code> 선언이 있지만 사용할 필요는 없다.</p>

<p>Ex. 두 개의 수를 비교하여 작은 것을 리턴해주는 min 매서드.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> 
    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="k">then</span> <span class="n">x</span> <span class="k">else</span> <span class="n">y</span> <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>매서드를 호출할 때 괄호는 선택사항이다.</p>

<h5>클래스 매서드</h5>

<p>클래스 매서드는 <code>self</code> 키워드를 앞에 놓으며, 나머지는 일반 매서드와 같다.</p>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span> 
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">cls_method</span> 
        <span class="s2">&quot;MyClass type&quot;</span> 
    <span class="k">end</span> 
<span class="k">end</span> 

<span class="o">&gt;</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">cls_method</span> <span class="c1"># =&gt; &quot;MyClass type&quot;</span>
</code></pre></div>
<p><code>Array.methods</code> 명령으로 Array 클래스의 모든 매서드를 볼 수 있다.</p>

<p>매서드 이름의 마지막 문자가 매서드의 행동을 가리쳐주기도 한다. 물음표<code>?</code>로 끝나는 매서드는 리턴값이 불린값이다. 감탄사<code>!</code>로 끝나는 매서드는 객체의 상태를 변경할 수 있으며, 객체의 본사본을 변경할 수 있는 비감탄사 버전의 매서드도 제공된다. <code>self</code> 키워드는 현재 객체를 참조하도록 객체 안에서 사용할 수 있다. </p>

<h4>Inheritance, Mixins and Extending Classes</h4>

<p>루비에선 하나의 상속만 지원된다. 멀티 상속을 위해서는 <code>mixin</code>이 기본적으로 제공된다. 클래스는 절대 닫히지 않아서 기존 클래스에 매서드를 추가할 수 있다.(작성한 클래스에도 표준 내장 클래스같이 적용된다) </p>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Fixnum</span> 
    <span class="k">def</span> <span class="nf">previous</span> 
        <span class="k">return</span> <span class="nb">self</span><span class="o">-</span><span class="mi">1</span> 
    <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<h4>Specifying Access</h4>

<p>클래스를 정의할 때 <code>public</code>, <code>private</code>, <code>protected</code> 키워드로 접근 레벨을 특정할 수 있다. C++ 이나 Java와는 약간 다르다.</p>

<p>– public : 누구나 호출할 수 있다. (C++ 이나 자바와 같다)<br>
– protected : 정의된 클래스와 그 서브클래스의 객체에 의해서만 호출할 수 있다.<br>
– private : 현재 객체의 컨택스트 안에서만 호출할 수 있다. 같은 클래스의 두 개의 객체는 서로의 private 매서드를 호출활 수 없다. private 매서드를 받는 것은 항상 <code>self</code>이다.</p>

<p>기본적으로 클래스의 모든 매서드는 <code>public</code>이며, 모든 인스턴스 변수는 <code>protected</code>이다.</p>

<p>객체의 속성에 접근하는 방법 중 getter, setter를 이용하는 방법이 있지만, 이건 고통이다. <code>attr_accessor</code>를 이용한 빠른 방법이 있다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span>
    <span class="kp">attr_accessor</span> <span class="ss">:boo</span>
<span class="k">end</span>
</code></pre></div>
<p>boo라고 불리는 인스턴스 변수를 만들고, getter, setter 매서드를 만든다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span>
    <span class="kp">attr_accessor</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
<span class="k">end</span>
</code></pre></div>
<p>first_name, last_name 인스턴스 변수를 만들고, 각각의 getter, setter 매서드를 만든다.</p>

<p>getter 매서드만을 원하면 <code>attr_reader</code>를 사용하고, setter 매서드만을 원하면 <code>attr_writer</code>를 사용한다.</p>

<p>상속의 문법은 다음과 같다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">NewClass</span> <span class="o">&lt;</span> <span class="no">SuperClass</span> 
    <span class="o">.</span><span class="n">.</span><span class="o">.</span> 
<span class="k">end</span>
</code></pre></div>
<p><code>initialize</code> 매서드는 <code>a = Array.new</code>와 같이 클래스 이름과 <code>new</code>를 호출하여 사용한다. 항상 private이다.</p>

<p><code>module</code> 키워드를 사용하여 여러 클래스를 포함하는 네임스페이스를 만들 수 있다. <code>require</code> 키워드를 사용하여 다른 프로그램 안에 모듈을 포함할 수 있다. 예) require ’module_name’</p>

<p>클래스에서 <code>include</code> 키워드를 사용해서 모듈을 mixin할 수 있다. mixin한 모듈 안에 있는 모든 매서드를 클래스의 한 부분으로 만들 수 있다.</p>

<h3>Objects</h3>

<p>루비에선 모든 것이 객체이다. <code>Object</code> 클래스는 모든 클래스의 부모 클래스이다. 모든 객체에서 &#39;Object&#39;의 매서드를 사용할 수 있다.</p>

<p><code>Object</code> 클래스의 중요한 매서드는 <code>class()</code>이다. 객체의 &quot;type&quot;을 리턴한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; 1.class()     # =&gt; Fixnum 
&gt; 1.class       # =&gt; Fixnum 
&gt; 1.0.class     # =&gt; Float 
&gt; &quot;Foo&quot;.class   # =&gt; String 
</code></pre></div>
<p>괄호는 선택사항이며 일반적으로 생략된다.</p>

<p>루비 문법은 대소문자를 구별한다. 대부분의 경우 대문자로 시작한 변수는 상수다.</p>

<h3>Variables</h3>

<p>루비는 변수 선언을 사용하지 않는다. 적절한 변수명에 값을 주면 변수가 만들어진다.(duck-typing)</p>

<p>Ex.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = 2 # =&gt; 2 
&gt; a     # =&gt; 2
</code></pre></div>
<p><code>a.class</code>로 type을 보면 Fixnum 즉, 루비의 정수 데이타이다. 나머지 하나의 정수 타입은 Bignum(임의 크기의 수)이다.</p>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = &quot;2&quot; # =&gt; &quot;2&quot; 
&gt; a # =&gt; &quot;2&quot;
</code></pre></div>
<p>이제 a는 문자열(String) 변수이다.</p>

<p><strong>중요</strong>: 루비에서 모든 할당은 참조로 이루어진다.(C나 C++에서는 기본적으로 할당은 값으로 이루어진다.) 즉, 변수는 객체의 참조를 갖고 있을 뿐이고, 객체의 타입은 상관하지 않는다. </p>

<p>루비는 병렬 할당을 지원한다.</p>

<p>Ex. 두 변수의 값을 쉽게 스왑할 수 있다: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = 2     # =&gt; 2 
&gt; b = 1     # =&gt; 1 
&gt; puts a, b # 2 
            # 1 
            # =&gt; nil 
&gt; a, b = b, a # =&gt; [1, 2]
</code></pre></div>
<p>루비는 변수의 스코프와 타입를 나타내기 위한 간단한 네이밍 규약을 사용한다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">- name      : 지역 변수
- @name     : 인스턴스 변수
- @@name    : 클래스 변수
- $Name     : 전역 변수(대문자로 시작)
</code></pre></div>
<p>@과 $ 도장(sigil)은 프로그래머가 각 변수의 역할을 쉽게 지정할 수 있어 읽기 쉽게 한다.</p>

<p>지역 변수는 소문자로 시작하며, 여러 단어는 밑줄로 연결한다. <br>
상수는 대문자로 시작하며 밑줄을 사용한다. <br>
클래스와 모듈은 상수로 취급되어 대문자로 시작하고 CamelCase를 사용한다.</p>

<h3>String</h3>

<p>큰따옴표<code>&quot;&quot;</code>나 작은따옴표<code>&#39;&#39;</code>를 사용하여 문자열을 만들 수 있다. 큰따옴표로 좀 더 많은 것을 할 수 있다. 큰따옴표로 문자열을 만들 때 <code>#{루비 코드}</code>을 삽입하여 실행시킨 문자열을 만들 수 있다.<br>
Ex.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; &quot;360 degrees=#{2*Math::PI} radians&quot; 
=&gt; &quot;360 degrees=6.283185307179586 radians&quot; 
</code></pre></div>
<p>백틱````으로 문자열을 감싸면 백그라운드 OS(OS X 등)에서 명령어를 실행한다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; `date` 
=&gt; &quot;Tue Oct 15 09:10:21 MDT 2013n&quot; 
</code></pre></div>
<p>루비 문자열은 가변적이다. 루비가 새문자열을 다룰 때마다 새로운 <code>String</code> 객체를 만든다. 즉, 루프에서 문자열을 만들면, 각 반복문에서 새로운 <code>String</code> 객체가 만들어진다. 주의해야한다.</p>

<p><code>String</code> 클래스는 문자열을 다룰 수 있는 많은 매서드를 가지고 있다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; name = &quot;Homer Blimpson&quot; # =&gt; &quot;Homer Blimpson&quot; 
&gt; name.length # =&gt; 14 
&gt; name[6] # =&gt; &quot;B&quot; 
&gt; name[6..14] # =&gt; &quot;Blimpson&quot; 
&gt; &quot;Bart &quot; + name[6..14] # =&gt; &quot;Bart Blimpson&quot; 
&gt; name.encoding # =&gt; #&lt;Encoding:UTF-8&gt;
</code></pre></div>
<h3>Regular Expression Class</h3>

<p>루비는 문자열과 밀접한 <code>Regexp</code>라는 정규식 클래스를 가지고 있다. 정규식은 텍스트의 문자열 매칭(특정 문자, 단어, 문자 패턴)을 위한 간결하면서 유연한 방법을 제공한다.</p>

<p>루비의 정규식은 <code>/pattern/modifiers</code>의 형식으로 쓴다. “pattern”은 정규식 자체이며, “modiﬁers”는 다양한 옵션 문자들이며, 선택적이다. Perl에서 빌려온 문법이다. 특정 정규식을 테스트하려면 <code>=~</code> 연산자를 사용하며, 매칭되는 문자열의 첫 문자의 위치를 리턴하거나 매칭되는 것이 없으면 <code>nil</code>을 리턴한다.<br>
Ex. &quot;Homer&quot; =~ /er/ # =&gt; 3</p>

<p>패턴에 대한 갖는 의미를 몇 가지만 살펴보면:</p>

<table><thead>
<tr>
<th>기 호</th>
<th>의 미</th>
</tr>
</thead><tbody>
<tr>
<td>[ ]</td>
<td>범위 지정 예: [a-z]는 a부터 z사이의 모든 문자</td>
</tr>
<tr>
<td>\w</td>
<td>word 문자, [0-9A-Za-z]와 동일</td>
</tr>
<tr>
<td>\W</td>
<td>\w와 반대</td>
</tr>
<tr>
<td>\s</td>
<td>공백 문자, [\t\n\r\f]와 동일</td>
</tr>
<tr>
<td>\S</td>
<td>\s와 반대</td>
</tr>
<tr>
<td>\d</td>
<td>digit 문자, [0-9]와 동일</td>
</tr>
<tr>
<td>\D</td>
<td>/d와 반대</td>
</tr>
<tr>
<td>\b</td>
<td>백스페이스(범위 지정에서 사용될 때)</td>
</tr>
<tr>
<td>\b</td>
<td>단어 경계(boundary)(범위 지정에서 사용되지 않을 때)</td>
</tr>
<tr>
<td>\B</td>
<td>\b와 반대로 일치</td>
</tr>
<tr>
<td>*</td>
<td>문자가 없는 경우나 하나 이상 연속하는 문자 찾기</td>
</tr>
<tr>
<td>+</td>
<td>하나 이상 연속하는 문자 찾기</td>
</tr>
<tr>
<td>{m, n}</td>
<td>at least m and at most n</td>
</tr>
<tr>
<td>?</td>
<td>at most 1, {0,1}과 동일</td>
</tr>
<tr>
<td></td>
<td>(버티컬 바)</td>
</tr>
<tr>
<td>( )</td>
<td>그룹핑</td>
</tr>
</tbody></table>

<p>정규식은 문자열을 처리할 때 종종 사용된다. 다음 루비 정규식은 전화번호에서 숫자가 아닌 모든 문자를 &quot;&quot;로 바꾼다. 즉, 전화번호에서 숫자를 제외한 모든 문자를 제거한다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">phone = phone.gsub!(/D/, &quot;&quot;) 
</code></pre></div>
<p>정규식은 일반적으로 이메일, 전화번호 같은 사용자 입력을 검증하기 위해 사용한다.<br>
Ex. 다음 정규식은 이메일 주소를 검증하기 위해 사용할 수 있다: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/A[w._%–]+@[w.-]+.[a-zA-Z]{2,4}z/ 
</code></pre></div>
<h3>Symbols</h3>

<p>루비 symbol도 문자열과 밀접하며, 루비에서 문자열은 가변적이고, 루비 symbol은 비가변적인 것을 기억하라.<br>
루비 인터프리터는 심볼 테이블에 모든 클래스, 매서드, 변수를 저장한다. 이 테이블에 자신만의 심볼을 추가할 수 있다. 특별히 심볼은 이름 앞에 콜론<code>:</code>을 붙여 만든다.<br>
    Ex. attr_reader :row, :col </p>

<p>루비 심볼은 이름과 문자열을 대표하곤 한다; 그러나 <code>String</code> 객체와는 다르게 같은 이름의 심볼은 하나의 루비 세션 동안 단 한번만 초기화되며 메모리에 존재한다. 루비 심볼은 비가변적이며, 런타임 동안 변경할 수 없다.<br>
    Ex. :name = &quot;Homer&quot; # =&gt; will yield an error</p>

<p>심볼은 메모리에 단 한번만 저장되어 메모리 공간 활용에 유리하다. 같은 이름을 가진 여러 개의 문자열이 메모리에 존재할 수 있다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; puts :name.object_id # =&gt; yields 20488 
&gt; puts :name.object_id # =&gt; yields 20488 
&gt; puts &quot;name&quot;.object_id # =&gt; yields 2168472820 
&gt; puts &quot;name&quot;.object_id # =&gt; yields 2168484060 
</code></pre></div>
<p>언제 문자열을 사용하고 언제 심볼을 사용하는가? 주먹구구 지침:<br>
    - 만약 객체의 컨텐츠(즉, 일련의 문자들)가 중요하면 이 문자들을 다루려면 문자열을 사용하라.<br>
    - 객체의 아이덴티티가 중요하면(이 경우에는 아마 문자들을 다루고 싶지 않을듯), 심볼을 사용하라.</p>

<h3>Expressions</h3>

<p>루비 문법은 표현식 지향적이다. 루비의 모든 것은 하나의 표현식으로 다루어지므로 무언가를 계산한다.</p>

<p>Ex. 조건적인 실행이나 루핑 구조가 다른 언어에서는 명령문으로 취급되지만 루비에서는 표현식으로 취급된다.</p>

<p>루비에서 <code>if</code>, <code>case</code>, <code>for</code> 구조는 계산된 마지막 표현식의 값을 리턴한다.</p>

<h3>Control Structures – Conditional Execution</h3>

<p>루비는 조건을 표현하기 위한 풍부한 문법을 가지고 있다. 가장 기본적인 것은:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">expression</span>
    <span class="n">code</span>
<span class="k">end</span> 
</code></pre></div>
<p>조건식이 <code>false</code> 나 <code>nil</code>이 아닌 값이면 code가 실행된다.</p>

<p>else 절은 if 조건식이 참이 아닐 경우 실행되어야 하는 코드를 추가할 수 있다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">expression1</span>
    <span class="n">code</span>
<span class="k">elsif</span> <span class="n">expression2</span>
    <span class="n">code</span>
<span class="k">else</span> 
    <span class="n">code</span>
<span class="k">end</span>
</code></pre></div>
<ul>
<li>elsif는 오타가 아니다.</li>
</ul>

<p>There’s a shorthand way of expressing the if conditional that treats it as an expression modiﬁer: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">code</span> <span class="k">if</span> <span class="n">expression</span>
</code></pre></div>
<p>루비는 C/C++ 처럼 <code>?:</code> 연산자도 있다.</p>

<p>비교 연산자: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">==</span><span class="p">,</span> <span class="o">!=</span><span class="p">,</span> <span class="o">=</span><span class="err">∼</span><span class="p">,</span> <span class="o">!</span><span class="err">∼</span><span class="p">,</span> <span class="o">===</span> 
</code></pre></div>
<p>There is a case structure in Ruby, === is the case-equality operator.</p>

<p>표준적인 조건식에 더하여, 루비는 코드의 가독성과 이해를 증가하기 위해 몇 가지를 추가한다.<br>
예로, 다음은 if 문의 반대이다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">until</span> <span class="n">expression</span>
    <span class="n">code</span>
<span class="k">end</span>
</code></pre></div>
<p>조건식이 <code>false</code> 나 <code>nil</code>아닐 때까지 code가 수행된다.</p>

<p>until 조건식에 else 절을 붙일 수 없다.</p>

<h3>Control Structures – Iteration</h3>

<p><code>for</code>/<code>in</code> 루프는 가산 누적되면서 반복한다: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">for</span> <span class="n">var</span> <span class="k">in</span> <span class="n">collection</span> <span class="k">do</span> 
    <span class="n">body</span>
<span class="k">end</span> 
</code></pre></div>
<p>Exit condition loop: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">while</span> <span class="n">condition</span> <span class="k">do</span> 
    <span class="n">body</span>
<span class="k">end</span> 
</code></pre></div>
<p>Exit condition loop, while과 반대: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">until</span> <span class="n">condition</span> <span class="k">do</span> 
    <span class="n">body</span>
<span class="k">end</span> 
</code></pre></div>
<p>In Ruby, it’s more common to use iterators (next lecture).</p>

<h3>Collections</h3>

<p>루비에는 많은 컬렉션 클래스가 있어 데이타의 컬렉션을 하나의 편리한 곳에 저장하고 참조할 수 있다. </p>

<p>제일 중요한 컨렉션 클래스는 배열<code>Array</code>과 해시<code>Hash</code>이다. <code>Set</code> 클래스가 최근에 추가되었다. </p>

<p>각각의 컬렉션 클래스는 <code>Enumerable</code> 모듈을 믹신으로 포함하며, <code>Enumerable</code>에 있는 모든 매서드들을 공유한다.</p>

<p><code>Enumerable</code> 모듈은 <code>iterator</code> 매서드를 제공하는데 한 컬렉션의 모든 요소들에 걸쳐 반복 실행할 수 있다.</p>

<p>배열은 레일즈 컨트롤러에서 널리 사용된다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">index</span> 
    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span> 
<span class="k">end</span>
</code></pre></div>
<p><code>/app/controllers/post_controller.rb</code>의 도입 부분에 있는 위의 index 매서드에서 인스턴트 변수인 <code>@post</code>는 배열이다.</p>

<h3>Array</h3>

<p>배열은 0에서 시작하는 정수로 인덱스할 수 있는(zero-based addressing) 객체 참조의 컬렉션을 담고있다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = [33.3, &quot;hi&quot;, 2] 
&gt; a[0]          # =&gt; 33.3 
</code></pre></div>
<p>Array 클래스에는 아주 많은 매서드가 있다. 예를 들면, 배열의 시작부터 증가되는 수, 끝에서 감소되는 수, 범위 <code>a[1..2]</code>, <code>sort</code>, <code>include?</code>, <code>reverse</code>, <code>length</code>, <code>first</code>, <code>last</code>, <code>&lt;&lt;</code>, <code>push</code>, <code>pop</code>, 등. <br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a[1..2]       # =&gt; [&quot;hi&quot;, 2] 
&gt; a &lt;&lt; 5        # =&gt; [33.3, &quot;hi&quot;, 2, 5] 
&gt; a[-1]         # =&gt; 5 
&gt; a.include? 2  #=&gt; true
</code></pre></div>
<h4>Hashes</h4>

<p>해시는 결합(associative) 배열이며, 키와 값이 <code>=&gt;</code> 심볼로 분리된 객체이다. 키를 사용하여 값을 인덱스한다. 배열에서 키는 정수이고, 해시의 키는 객체이다. 배열은 <code>[]</code>을 사용하지만 해시는 <code>{}</code>를 사용한다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">phone = {’home’=&gt; 1, ’mobile’=&gt; 2, ’work’=&gt; 3}
</code></pre></div>
<p>혹은 심볼을 사용하여 더 낫게: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">phone = {:home =&gt; 1, :mobile =&gt; 2, :work =&gt; 3} 
&gt; phone[:home]      # =&gt; 1 
&gt; phone.key(1)      # =&gt; :home 
&gt; phone.key?(:home) #=&gt; true 
&gt; phone.value?(1)   #=&gt; true
</code></pre></div>
<h4>Nested Collections</h4>

<p>다차원의 컬렉션을 만들려면 컬렉션들을 들여쓰기한다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; ary = [[&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;], [1,2,3], [&quot;Alpha&quot;, &quot;Beta&quot;, &quot;Gamma&quot;]] 
&gt; ary[2][1]      # =&gt; &quot;Beta&quot; 
&gt; hsh = {&quot;Chicago&quot;=&gt;{&quot;nickname&quot;=&gt;&quot;The Windy City&quot;, &quot;state&quot;=&gt;&quot;IL&quot;}, &quot;New York City&quot;=&gt;{&quot;nickname&quot;=&gt;&quot; The Big Apple&quot;, &quot;state&quot;=&gt;&quot;NY&quot;}} 
&gt; hsh[&quot;Chicago&quot;][&quot;nickname&quot;] # =&gt; &quot;The Windy City&quot;
</code></pre></div>
<h3>Code Blocks</h3>

<p>블럭은 <code>{}</code>로 둘러싸인 여러 줄의 코드로 되어있으며, 매서드에 매개변수를 넘길 수 있다. </p>

<p>Using this feature it is easy to build code libraries which can delegate varying functionality to code blocks to be built later. </p>

<p><strong>Important</strong>: A block may appear only in the source if it is adjacent to a method call (on the same line as the method call’s last parameter). </p>

<p>A block is invoked using the <code>yield</code> statement. <br>
Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">three_times</span> 
    <span class="k">yield</span> 
    <span class="k">yield</span> 
    <span class="k">yield</span> 
<span class="k">end</span> 
</code></pre></div>
<ul>
<li><code>three_times {puts &quot;Hello&quot;}</code> 는 &quot;Hello&quot;를 세번 출력한다.</li>
</ul>

<h4>Iterators</h4>

<p>루비에서 다양한 루프 구조는 드물게 사용하며, 반복을 사용하는 것이 더 일반적인다. 반복 매서드를 정의하는 특징은 컬렉션의 각 요소에 블럭 코드를 적용하는 것이다. The deﬁning feature of an iterator method is that it invokes a block of code, applying it to each element in a collection. </p>

<p>A collection class that includes the Enumerable module is required to supply an each method. This method must yield the successive members of the collection.</p>

<p>Iterators work because you can pass parameters into blocks. </p>

<p>Ex. The each method in the Enumerable module works something like: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">each</span> 
    <span class="k">for</span> <span class="n">each</span> <span class="n">item</span> <span class="k">in</span> <span class="n">the</span> <span class="n">collection</span> <span class="c1"># this is psuedocode </span>
        <span class="k">yield</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> 
    <span class="k">end</span> 
<span class="k">end</span> 
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = [33.3, &quot;hi&quot;, 2] 
&gt; a.each {|element| puts element} 
33.3 
&quot;hi&quot; 
2 
=&gt; [33.3, &quot;hi&quot;, 2]
</code></pre></div>
<p>레일즈 뷰에서 사용한 반복문이다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;tbody&gt;</span> 
    <span class="err">&lt;</span>% @posts.each do |post| %&gt; 
        <span class="nt">&lt;tr&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.title %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.body %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= link_to ’Show’, post %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= link_to ’Edit’, edit_post_path(post) %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= link_to ’Destroy’, post, method: :delete , data: { confirm: ’Are you sure?’ } %&gt;<span class="nt">&lt;/td&gt;</span> 
        <span class="nt">&lt;/tr&gt;</span> 
    <span class="err">&lt;</span>% end %&gt; 
<span class="nt">&lt;/tbody&gt;</span>
</code></pre></div>
<p>/views/posts/index.html.erb 안에 있는 소스이다. <code>&lt;%</code>와 <code>%&gt;</code>로 둘러싸인 부분은 뷰에서 실행되는 루비 코드(embedded Ruby)이며, <code>&lt;%=</code>로 시작되는 것은 실행 결과를 HTML 코드로 삽입한다.</p>

<h2>참고링크</h2>

<ul>
<li><a href="https://opentutorials.org/module/1569">Python &amp; Ruby</a>: Ruby와 Python을 동시에 배우는 병렬학습</li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[애용하는 웹브라우저 확장과 북마클릿]]></title>
            <link>/blog/2015/05/02/browser-extension-bookmarklet/</link>
            <pubDate>Sat, 02 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"deve1", "github"=>"deve1"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[browser]]></category>
        
            <category><![CDATA[extension]]></category>
        
            <category><![CDATA[bookmarklet]]></category>
        
            <guid>/blog/2015/05/02/browser-extension-bookmarklet/</guid>
            <description>
                <![CDATA[예전에는 크롬을 주로 사용하였으나 메모리를 너무 많이 잡아먹는 현상때문에 크롬 개발자 도구를 사용할 때 외에는 파이어폭스를 주로 사용한다. 그러나 요즘은 파폭도 탭을 열었다가 닫아도 메모리를 회복하지 못해서 그냥 껏다가 키는 불필요한 행동을 해야한다. 브라우저 회사들은 왜 이리 멍청하게 발전하는지 모르겠다. 다 퍽(fxxx)이다ㅎㅎ 사용하려는 확장이 많이지면 브라우저가 메모리를 차지하는 현상이 더...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>예전에는 크롬을 주로 사용하였으나 메모리를 너무 많이 잡아먹는 현상때문에 크롬 개발자 도구를 사용할 때 외에는 파이어폭스를 주로 사용한다. 그러나 요즘은 파폭도 탭을 열었다가 닫아도 메모리를 회복하지 못해서 그냥 껏다가 키는 불필요한 행동을 해야한다. 브라우저 회사들은 왜 이리 멍청하게 발전하는지 모르겠다. 다 퍽(fxxx)이다ㅎㅎ 사용하려는 확장이 많이지면 브라우저가 메모리를 차지하는 현상이 더 심해지는 것은 오래된 일이다. <a href="http://www.itworld.co.kr/news/93256">브라우저 속도를 느리게 만드는 확장 프로그램 탐지법</a> 등으로 메모리를 많이 차지하는 것을 걸러내는 방법 정도가 차선책이다. 그래서 꼭 필요한 확장 외에는 북마클릿을 주로 사용한다. 정리를 위해 한 군데 모아봤다.</p>

<p>브라우저 확장과 북마클릿을 관리하려고 작성한다.(조금씩 추가되거나 삭제할 수도 있을 것 같다)</p>

<h2>브라우저 확장(일단 파이어폭스 한정)</h2>

<ul>
<li><a href="https://addons.mozilla.org/ko/firefox/addon/onetab/">OneTab</a> : 여러 탭을 하나의 탭 안에 북마크시켜준다. 물론 원클릭으로 100여개의 탭을 죽여버린 적도 많은데 시간이 좀 걸린다. 크롬에도 <a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall">OneTab</a>이 있다. 예전에는 <a href="https://github.com/sergi/tabgrenade">Tab Grenade</a>를 주로 사용하였다.</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/todoist/">Todoist: To-Do list and Task Manager</a> : 즐겨사용하는 할일관리 앱의 확장인데 웹페이지를 할일 목록에 넣을 때에 유용하다. <a href="https://todoist.com/gmail">지메일용 Todoist</a>도 같이 설치하여 메일을 할일 목록에 넣을 때 사용한다.</li>
<li><a href="http://www.wikiwand.com/">Wikiwand</a> : 못생긴 위키피디아 페이지를 이쁘게 보여준다.</li>
<li><a href="https://addons.mozilla.org/ko/firefox/addon/righttoclick/">RightToClick</a> : 우클릭을 막은 사이트에서 유용한다.</li>
<li><a href="https://addons.mozilla.org/ko/firefox/addon/stylish/">Stylish</a> : 특정 웹사이트의 CSS를 내맘대로 바꾼다. 저장되어 방문 시 마다 내 CSS로 웹사이트를 볼 수 있다. Medium 사이트의 기본 한글 글꼴이 맘에 들지 않아서 사용하게 되었다.</li>
</ul>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@namespace</span> <span class="nt">url</span><span class="o">(</span><span class="nt">http</span><span class="o">://</span><span class="nt">www</span><span class="nc">.w3.org</span><span class="o">/</span><span class="nt">1999</span><span class="o">/</span><span class="nt">xhtml</span><span class="o">)</span><span class="p">;</span>

<span class="k">@-moz-document</span> <span class="nt">domain</span><span class="o">(</span><span class="s2">&quot;medium.com&quot;</span><span class="o">)</span> <span class="p">{</span>

<span class="p">}</span>

<span class="nt">div</span><span class="nc">.section-content</span> <span class="p">{</span>
<span class="k">font-family</span><span class="o">:</span> <span class="err">나눔바른고딕</span><span class="p">;</span>
<span class="k">letter-spacing</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="k">line-height</span><span class="o">:</span> <span class="m">1.5em</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><a href="https://chrismatic.io/ublock/">uBlock</a> : 최소의 광고차단 확장이다.</li>
</ul>

<h2>북마클릿</h2>

<ul>
<li><p><a href="javascript:(function()%7B_readableOptions=%7B'text_font':'Tinos','text_font_monospace':'quote(Courier%20New),%20Courier,%20monospace','text_font_header':'quote(Palatino%20Linotype),%20Palatino,%20quote(Book%20Antigua),%20Georgia,%20serif','text_size':'18px','text_line_height':'1.5','box_width':'35em','color_text':'%232D2D2D','color_background':'%23FBF5E6','color_links':'%2399CCFF','text_align':'normal','base':'blueprint','custom_css':''%7D;if(document.getElementsByTagName('body').length%3E0);else%7Breturn;%7Dif(window.$readable)%7Bif(window.$readable.bookmarkletTimer)%7Breturn;%7D%7Delse%7Bwindow.$readable=%7B%7D;%7Dwindow.$readable.bookmarkletTimer=true;window.$readable.options=_readableOptions;if(window.$readable.bookmarkletClicked)%7Bwindow.$readable.bookmarkletClicked();return;%7D_readableScript=document.createElement('script');_readableScript.setAttribute('src','http://readable-static.tastefulwords.com/target.js?rand='+encodeURIComponent(Math.random()));document.getElementsByTagName('body')%5B0%5D.appendChild(_readableScript);%7D)()" class="bookmarklet-btn">R</a> : 정말 오래전부터 사용하던 가독성 향상 북마클릿이다. <a href="http://readable.tastefulwords.com/">Readable</a>에서 자신이 원하는 환경을 설정할 수 있다. 개발자가 에버노트로 스카우트되어 Clearly를 만들었고 만들고 있다.</p></li>
<li><p><a href="javascript:var%20e=document.createElement('script');e.setAttribute('language','javascript');e.setAttribute('src','https://j.mp/bookmarklet/load.js');document.body.appendChild(e);void(0);" class="bookmarklet-btn">j.mp</a> : 다들 아시는 단축주소 서비스 bit.ly의 j.mp 버전 북마클릿이다.</p></li>
</ul>

<!-- <a href="javascript:var%20d=document,w=window,f='http://hootsuite.com/hootlet/load?',l=d.location,e=encodeURIComponent,p='address='+e(l.href)+'&title='+e(d.title),u=f+p;a=function(){if(!w.open(u,'t','scrollbars=0,toolbar=0,location=0,resizable=0,status=0,width=550,height=330'))l.href=u;};if(/Firefox/.test(navigator.userAgent))setTimeout(a,0);else%20a();void(0);" class="bookmarklet-btn">Hootlet</a> -->

<ul>
<li><p><a href="javascript:void(prompt("","["+document.title+"]("+location.href+")"));" class="bookmarklet-btn">L</a> : 현재 웹페이지의 마크다운 형식 링크를 추출해준다.</p></li>
<li><p><a href="javascript:(function()%7Bvar%20e%3Dfunction(t,n,r,i,s)%7Bvar%20o%3D%5B3420139,3829103,4069763,2070003,6326962,3097114,1894000,1282218,6492009,5459201%5D%3Bvar%20i%3Di%7C%7C0,u%3D0,n%3Dn%7C%7C%5B%5D,r%3Dr%7C%7C0,s%3Ds%7C%7C0%3Bvar%20a%3D%7B%27a%27:97,%27b%27:98,%27c%27:99,%27d%27:100,%27e%27:101,%27f%27:102,%27g%27:103,%27h%27:104,%27i%27:105,%27j%27:106,%27k%27:107,%27l%27:108,%27m%27:109,%27n%27:110,%27o%27:111,%27p%27:112,%27q%27:113,%27r%27:114,%27s%27:115,%27t%27:116,%27u%27:117,%27v%27:118,%27w%27:119,%27x%27:120,%27y%27:121,%27z%27:122,%27A%27:65,%27B%27:66,%27C%27:67,%27D%27:68,%27E%27:69,%27F%27:70,%27G%27:71,%27H%27:72,%27I%27:73,%27J%27:74,%27K%27:75,%27L%27:76,%27M%27:77,%27N%27:78,%27O%27:79,%27P%27:80,%27Q%27:81,%27R%27:82,%27S%27:83,%27T%27:84,%27U%27:85,%27V%27:86,%27W%27:87,%27X%27:88,%27Y%27:89,%27Z%27:90,%270%27:48,%271%27:49,%272%27:50,%273%27:51,%274%27:52,%275%27:53,%276%27:54,%277%27:55,%278%27:56,%279%27:57,%27%5C/%27:47,%27:%27:58,%27%3F%27:63,%27%3D%27:61,%27-%27:45,%27_%27:95,%27%26%27:38,%27%24%27:36,%27!%27:33,%27.%27:46%7D%3Bif(!s%7C%7Cs%3D%3D0)%7Bt%3Do%5B0%5D%2Bt%7Dfor(var%20f%3D0%3Bf<t.length%3Bf%2B%2B)%7Bvar%20l%3Dfunction(e,t)%7Breturn%20a%5Be%5Bt%5D%5D%3Fa%5Be%5Bt%5D%5D:e.charCodeAt(t)%7D(t,f)%3Bif(!l*1)l%3D3%3Bvar%20c%3Dl*(o%5Bi%5D%2Bl*o%5Bu%25o.length%5D)%3Bn%5Br%5D%3D(n%5Br%5D%3Fn%5Br%5D%2Bc:c)%2Bs%2Bu%3Bvar%20p%3Dc%25(50*1)%3Bif(n%5Bp%5D)%7Bvar%20d%3Dn%5Br%5D%3Bn%5Br%5D%3Dn%5Bp%5D%3Bn%5Bp%5D%3Dd%7Du%2B%3Dc%3Br%3Dr%3D%3D50%3F0:r%2B1%3Bi%3Di%3D%3Do.length-1%3F0:i%2B1%7Dif(s%3D%3D340)%7Bvar%20v%3D%27%27%3Bfor(var%20f%3D0%3Bf<n.length%3Bf%2B%2B)%7Bv%2B%3DString.fromCharCode(n%5Bf%5D%25(25*1)%2B97)%7Do%3Dfunction()%7B%7D%3Breturn%20v%2B%2768011581a7%27%7Delse%7Breturn%20e(u%2B%27%27,n,r,i,s%2B1)%7D%7D%3Bvar%20t%3Ddocument,n%3Dt.location.href,r%3Dt.title%3Bvar%20i%3De(n)%3Bvar%20s%3Dt.createElement(%27script%27)%3Bs.type%3D%27text/javascript%27%3Bs.src%3D%27https://getpocket.com/b/r4.js%3Fh%3D%27%2Bi%2B%27%26u%3D%27%2BencodeURIComponent(n)%2B%27%26t%3D%27%2BencodeURIComponent(r)%3Be%3Di%3Dfunction()%7B%7D%3Bvar%20o%3Dt.getElementsByTagName(%27head%27)%5B0%5D%7C%7Ct.documentElement%3Bo.appendChild(s)%7D)()" class="bookmarklet-btn">+pocket</a> : Pocket 북마클릿이다. 단, 제목을 <code>^</code>로 만들어서 북마크 도구 모음 공간을 절약한다.</p></li>
<li><p><a href="javascript:(function(){EN_CLIP_HOST='http://www.evernote.com';try{var%20x=document.createElement('SCRIPT');x.type='text/javascript';x.src=EN_CLIP_HOST+'/public/bookmarkClipper.js?'+(new%20Date().getTime()/100000);document.getElementsByTagName('head')[0].appendChild(x);}catch(e){location.href=EN_CLIP_HOST+'/clip.action?url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);}})()" class="bookmarklet-btn">+EN</a> : 현재 페이지 주소나 선택된 부분을 에버노트로 저장한다.</p></li>
<li><p><a href="javascript:(function()%7Bm%3D%27http://mail.google.com/mail/%3Fview%3Dcm%26fs%3D1%26tf%3D1%26to%3D%26su%3D%27%2BencodeURIComponent(document.title)%2B%27%26body%3D%27%2BencodeURIComponent(document.location)%3Bw%3Dwindow.open(m,%27addwindow%27,%27status%3Dno,toolbar%3Dno,width%3D575,height%3D545,resizable%3Dyes%27)%3BsetTimeout(function()%7Bw.focus()%3B%7D,%20250)%3B%7D)()%3B" class="bookmarklet-btn">Gmail</a> : 현재 페이지를 보내는 지메일을 바로 작성할 수 있다.</p></li>
</ul>

<!-- <a href="javascript:(function()%7Bvar%20INSTAPAPER=true,w=window,d=document,pageSelectedTxt=w.getSelection?w.getSelection():(d.getSelection)?d.getSelection():(d.selection?d.selection.createRange().text:0),pageTitle=d.title,pageUri=w.location.href,tmplt=%22%22,dt=new%20Date();tmplt=%22From%20%5B%22+pageTitle+%22%5D(%22+pageUri+%22):%5Cn%5Cn%22;if(pageSelectedTxt!=%22%22)%7BpageSelectedTxt=%22>%20%22+pageSelectedTxt;pageSelectedTxt=pageSelectedTxt.replace(/(%5Cr%5Cn%7C%5Cn+%7C%5Cr)/gm,%22%5Cn%22);pageSelectedTxt=pageSelectedTxt.replace(/%5Cn/g,%22%5Cn>%20%5Cn>%20%22);w.location.href=%22nvalt://make/?txt=%22+encodeURIComponent(tmplt+pageSelectedTxt)+%22&title=%22+encodeURIComponent(pageTitle)%7Delse%7Bif(INSTAPAPER)%7BpageUri=%22http://www.instapaper.com/m?u=%22+encodeURIComponent(pageUri)%7D;w.location.href=%22nvalt://make/?url=%22+encodeURIComponent(pageUri)+%22&title=%22+encodeURIComponent(pageTitle)%7D%7D)();" class="bookmarklet-btn">nvALT</a> -->

<ul>
<li><p><a href="javascript:(function(){if(typeof%20OneNoteBookmarklet==='undefined'){window.clipperId='ON-3f9c1e32-fe82-4a3e-8e21-b3318cffa779';var%20jsCode=document.createElement('script');jsCode.setAttribute('src','https://www.onenote.com/Clipper/Root?NoAuth=1');jsCode.setAttribute('id','oneNoteCaptureRootScript');jsCode.setAttribute('type','text/javascript');document.body.appendChild(jsCode);}})()" class="bookmarklet-btn">+1</a> : 현재 페이지를 원노트에 추가한다.</p></li>
<li><p><a href="javascript:void(function()%20%7B%20if%20(typeof(fsi_webfonter)%20%3D%3D%3D%20%27undefined%27)%20%7B%20console.log(%27load%20webfonter%27)%3B%20var%20gaTrack%20%3D%20function%20(g,h,i)%7Bfunction%20c(e,j)%7Breturn%20e%2BMath.floor(Math.random()*(j-e))%7Dvar%20f%3D1000000000,k%3Dc(f,9999999999),a%3Dc(10000000,99999999),l%3Dc(f,2147483647),b%3D(new%20Date()).getTime(),d%3Dwindow.location,m%3Dnew%20Image(),n%3D%27http://www.google-analytics.com/__utm.gif%3Futmwv%3D1.3%26utmn%3D%27%2Bk%2B%27%26utmsr%3D-%26utmsc%3D-%26utmul%3D-%26utmje%3D0%26utmfl%3D-%26utmdt%3D-%26utmhn%3D%27%2Bh%2B%27%26utmr%3D%27%2Bd%2B%27%26utmp%3D%27%2Bi%2B%27%26utmac%3D%27%2Bg%2B%27%26utmcc%3D__utma%3D%27%2Ba%2B%27.%27%2Bl%2B%27.%27%2Bb%2B%27.%27%2Bb%2B%27.%27%2Bb%2B%27.2%3B%2B__utmb%3D%27%2Ba%2B%27%3B%2B__utmc%3D%27%2Ba%2B%27%3B%2B__utmz%3D%27%2Ba%2B%27.%27%2Bb%2B%27.2.2.utmccn%3D(referral)%7Cutmcsr%3D%27%2Bd.host%2B%27%7Cutmcct%3D%27%2Bd.pathname%2B%27%7Cutmcmd%3Dreferral%3B%2B__utmv%3D%27%2Ba%2B%27.-%3B%27%3Bm.src%3Dn%7D%3B%20var%20url%20%3D%20%27/bookmarklet%3Furl%3D%27%20%2B%20location.host%20%2B%20location.pathname%3B%20gaTrack(%27UA-45420013-1%27,%20%27webfonter.fontshop.com%27,%20url)%3B%20var%20base%20%3D%20%27//webfonter.fontshop.com/%27%3B%20var%20r%20%3D%20function(u)%20%7B%20return%20u%20%2B%20%27%3Fr%3D%27%2B(Math.round(new%20Date().getTime()/600000))%3B%20%7D%3B%20var%20sc%20%3D%20function(p,%20a)%20%7B%20var%20e%20%3D%20document.createElement(%27script%27)%3B%20e.setAttribute(%27type%27,%27text/javascript%27)%3B%20e.setAttribute(%27charset%27,%27UTF-8%27)%3B%20e.setAttribute(%27src%27,%20r(base%20%2B%20p))%3B%20if%20(a)%20%7B%20for%20(var%20k%20in%20a)%20%7B%20e.setAttribute(k,%20a%5Bk%5D)%3B%20%7D%20%7D%20document.body.appendChild(e)%3B%20%7D%3B%20var%20head%20%3D%20document.getElementsByTagName(%27head%27)%5B0%5D%3B%20if%20(!head)%20%7B%20head%20%3D%20document.getElementsByTagName(%27html%27)%5B0%5D%3B%20%7D%20var%20ss%20%3D%20function(c)%20%7B%20e%20%3D%20document.createElement(%27link%27)%3B%20e.setAttribute(%27type%27,%27text/css%27)%3B%20e.setAttribute(%27rel%27,%20%27stylesheet%27)%3B%20e.setAttribute(%27href%27,r(base%20%2B%20c))%3B%20head.appendChild(e)%3B%20%7D%3B%20window.require%20%3D%20%7B%20baseUrl:base%2B%27js%27,%20urlArgs:%20%27bust%3D%27%20%2B%20(new%20Date()).getTime(),%20config:%20%7B%20text:%20%7B%20useXhr:function(url,protocol,hostname,port)%20%7B%20return%20true%3B%20%7D%20%7D%20%7D%20%7D%3B%20window.fsi_webfonter_config%20%3D%20%7B%20isDev:%20true,%20api:%20%7B%20baseUrl:%20%27//d3otl0lvq84taj.cloudfront.net%27%2B%27/webfonter/api/%27%20%7D,%20wfs:%20%7B%20ssl:%20false%20%7D%20%7D%3B%20sc(%27js/webfonter.js%27)%3B%20ss(%27css/bookmarklet.css%27)%3B%20ss(%27css/fsi-swapper.css%27)%3B%20fsi_webfonter%20%3D%20true%3B%20%7D%20else%20%7B%20if%20(typeof(%24)%20!%3D%3D%20%27undefined%27)%20%7B%20%24(%27%23fsi-webfonter%27).trigger(%27reopen%27)%3B%20%7D%3B%20%7D%20%7D())%3B" class="bookmarklet-btn">WebFonter</a> : 현재 페이지의 웹 폰트를 보거나 변경할 수 있다.</p></li>
<li><p><a href="javascript:(function(){var%20s%20=%20document.createElement('script');%20s.type%20=%20'text/javascript';%20s.src%20=%20'http://labs.microsofttranslator.com/bookmarklet/default.aspx?f=js&to=ko';%20document.body.insertBefore(s,%20document.body.firstChild);})()" class="bookmarklet-btn">번역</a> : 구글 번역 서비스를 이용하여 페이지를 번역한다.</p></li>
<li><p><a href="javascript:void((function()%7Bfunction%20e(e,t)%7Bvar%20n%3Ddocument.createElement(%27script%27)%3Bn.type%3D%27text/javascript%27%3Bif(n.readyState)%7Bn.onreadystatechange%3Dfunction()%7Bif(n.readyState%3D%3D%27loaded%27%7C%7Cn.readyState%3D%3D%27complete%27)%7Bn.onreadystatechange%3Dnull%3Bt()%7D%7D%7Delse%7Bn.onload%3Dfunction()%7Bt()%7D%7Dn.src%3De%3Bdocument.getElementsByTagName(%27head%27)%5B0%5D.appendChild(n)%7De(%27http://breakpointtester.com/assets/js/breakpoint.js%27,function()%7Bvar%20e%3Ddocument%3Be.write(%27%3C!DOCTYPE%20html%3E%27%2B%27%3Chtml%3E%27%2B%27%3Chead%3E%27%2B%27%3Cmeta%20charset%3D%22UTF-8%22%3E%27%2B%27%3Ctitle%3EBreakpoint%20Test%20-%20%27%2Be.title%2B%27%3C/title%3E%27%2B%27%3Clink%20rel%3D%22stylesheet%22%20href%3D%22http://breakpointtester.com/assets/css/bookmark.css%22%3E%27%2B%27%3Cscript%20src%3D%22http://breakpointtester.com/assets/js/bookmark.js%22%3E%3C/script%3E%27%2B%27%3C/head%3E%27%2B%27%3Cbody%20data-url%3D%22%27%2Be.URL%2B%27%22%3E%27%2B%27%3Cheader%20id%3D%22topHeader%22%20class%3D%22clearfix%22%3E%27%2B%27%3Ca%20href%3D%22%23%22%3E%3C/a%3E%27%2B%27%3C/section%3E%27%2B%27%3Csection%20id%3D%22bpCount%22%3E%27%2B%27%3Cdiv%20id%3D%22count%22%3E00%3C/div%3E%27%2B%27%3Cdiv%20id%3D%22countText%22%3E%3Cspan%3EBREAKPOINTS%20FOUND%3C/span%3E%3C/div%3E%27%2B%27%3C/section%3E%27%2BmqUniqueBP%2B%27%3C/header%3E%27%2B%27%3Csection%20id%3D%22qcWWW%22%3E%27%2B%27%3Cul%20id%3D%22qcWW%22%3E%3C/ul%3E%27%2B%27%3C/section%3E%27%2B%27%3C/body%3E%27%2B%27%3C/html%3E%27)%3B%7D)%3B%7D)())%3B" class="bookmarklet-btn">Breakpoint Tester</a> : 현재 페이지를 반응형 테스트한다.</p></li>
<li><p>코드 충돌로 여기에 나열할 수 없지만 nvALT와 Hootlet도 애용하는 북마클릿이다.</p></li>
</ul>
]]>
            </content:encoded>
        </item>
    

</channel>

</rss>